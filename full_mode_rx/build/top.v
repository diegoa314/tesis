//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-07-19 17:24:37
//--------------------------------------------------------------------------------
module top(
	input reset,
	(* dont_touch = "true" *)	input write_clk_p,
	input write_clk_n,
	(* dont_touch = "true" *)	input gtp_clk_p,
	input gtp_clk_n,
	(* dont_touch = "true" *)	input clk62_5,
	output gtp_tx_p,
	output gtp_tx_n,
	input gtp_rx_p,
	input gtp_rx_n,
	input we,
	input link_ready,
	input trans_en,
	output rxinit_done
);

wire write_clk_1;
wire write_clk;
wire write_rst;
wire gtp_clk;
wire sys_clk_1;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
wire qpll_clk;
wire qpll_refclk;
wire qpll_reset;
wire qpll_lock;
reg gtp_tx_polarity = 1'd0;
reg gtp_rx_polarity = 1'd0;
reg [2:0] gtp_loopback = 3'd0;
reg [4:0] gtp_txprecursor = 5'd0;
reg [4:0] gtp_txpostcursor = 5'd0;
reg [3:0] gtp_diffctrl = 4'd0;
wire gtp_reset;
wire [8:0] gtp_drpaddr;
wire gtp_drpen;
wire [15:0] gtp_drpdi;
wire gtp_drprdy;
wire [15:0] gtp_drpdo;
wire gtp_drpwe;
wire [39:0] gtp_tx_data;
wire gtp_tx_init_done0;
wire [39:0] gtp_rx_data;
wire gtp_rxbytealigned;
wire gtp_rxcommmadet;
reg gtp_tx_init_done1 = 1'd0;
wire gtp_tx_init_restart;
wire gtp_tx_init_plllock0;
reg gtp_tx_init_pllreset = 1'd0;
reg gtp_tx_init_gttxreset0 = 1'd0;
wire gtp_tx_init_txresetdone0;
reg gtp_tx_init_txdlysreset0 = 1'd0;
wire gtp_tx_init_txdlysresetdone0;
reg gtp_tx_init_txphinit0 = 1'd0;
wire gtp_tx_init_txphinitdone0;
reg gtp_tx_init_txphalign0 = 1'd0;
wire gtp_tx_init_txphaligndone0;
reg gtp_tx_init_txdlyen0 = 1'd0;
reg gtp_tx_init_txuserrdy0 = 1'd0;
wire gtp_tx_init_plllock1;
wire gtp_tx_init_txresetdone1;
wire gtp_tx_init_txdlysresetdone1;
wire gtp_tx_init_txphinitdone1;
wire gtp_tx_init_txphaligndone1;
reg gtp_tx_init_gttxreset1 = 1'd0;
reg gtp_tx_init_txdlysreset1 = 1'd0;
reg gtp_tx_init_txphinit1 = 1'd0;
reg gtp_tx_init_txphalign1 = 1'd0;
reg gtp_tx_init_txdlyen1 = 1'd0;
reg gtp_tx_init_txuserrdy1 = 1'd0;
reg gtp_tx_init_done2 = 1'd0;
reg gtp_tx_init_pll_reset_timer_wait = 1'd0;
wire gtp_tx_init_pll_reset_timer_done;
reg [6:0] gtp_tx_init_pll_reset_timer_count = 7'd120;
wire gtp_tx_init_reset;
wire gtp_tx_init_ready_timer_wait;
wire gtp_tx_init_ready_timer_done;
reg [17:0] gtp_tx_init_ready_timer_count = 18'd240000;
reg gtp_tx_init_txphaligndone_r = 1'd1;
wire gtp_tx_init_txphaligndone_rising;
reg gtp_gtprxinit_done = 1'd0;
reg gtp_gtprxinit_restart0 = 1'd0;
wire gtp_gtprxinit_plllock0;
reg gtp_gtprxinit_gtrxreset0 = 1'd0;
reg gtp_gtprxinit_gtrxpd0 = 1'd0;
wire gtp_gtprxinit_rxresetdone0;
reg gtp_gtprxinit_rxdlysreset0 = 1'd0;
wire gtp_gtprxinit_rxdlysresetdone0;
reg gtp_gtprxinit_rxphalign0 = 1'd0;
reg gtp_gtprxinit_rxdlyen0 = 1'd0;
reg gtp_gtprxinit_rxuserrdy0 = 1'd0;
wire gtp_gtprxinit_rxsyncdone0;
wire gtp_gtprxinit_rxpmaresetdone0;
reg gtp_gtprxinit_rxphdlypd = 1'd1;
reg gtp_gtprxinit_pll_rxusrclk_rst = 1'd0;
wire gtp_gtprxinit_pll_rxusrclk_lock;
wire [8:0] gtp_gtprxinit_drpaddr;
reg gtp_gtprxinit_drpen = 1'd0;
reg [15:0] gtp_gtprxinit_drpdi = 16'd0;
wire gtp_gtprxinit_drprdy;
wire [15:0] gtp_gtprxinit_drpdo;
reg gtp_gtprxinit_drpwe = 1'd0;
reg [15:0] gtp_gtprxinit_drpvalue = 16'd0;
reg gtp_gtprxinit_drpmask = 1'd0;
wire gtp_gtprxinit_rxpmaresetdone1;
reg gtp_gtprxinit_rxpmaresetdone_r = 1'd0;
wire gtp_gtprxinit_plllock1;
wire gtp_gtprxinit_rxresetdone1;
wire gtp_gtprxinit_rxdlysresetdone1;
wire gtp_gtprxinit_rxsyncdone1;
wire gtp_gtprxinit_restart1;
reg gtp_gtprxinit_gtrxreset1 = 1'd0;
reg gtp_gtprxinit_gtrxpd1 = 1'd0;
reg gtp_gtprxinit_rxdlysreset1 = 1'd0;
reg gtp_gtprxinit_rxphalign1 = 1'd0;
reg gtp_gtprxinit_rxdlyen1 = 1'd0;
reg gtp_gtprxinit_rxuserrdy1 = 1'd0;
reg gtp_gtprxinit_pll_reset_timer_wait = 1'd0;
wire gtp_gtprxinit_pll_reset_timer_done;
reg [5:0] gtp_gtprxinit_pll_reset_timer_count = 6'd60;
wire gtp_gtprxinit_reset;
reg gtp_gtprxinit_cdr_stable_timer_wait = 1'd0;
wire gtp_gtprxinit_cdr_stable_timer_done;
reg [10:0] gtp_gtprxinit_cdr_stable_timer_count = 11'd1024;
wire gtp_txoutclk0;
wire gtp_rxoutclk0;
wire gtp_txusrclk0;
wire gtp_txusrclk20;
wire gtp_txusrclk1;
wire gtp_txusrclk21;
wire gtp_txoutclk1;
wire gtp_rxusrclk0;
wire gtp_rxusrclk20;
wire gtp_rxusrclk1;
wire gtp_rxusrclk21;
wire gtp_rxoutclk1;
wire gtp_pll_fb2;
wire gtp_pll_fb2_rx;
wire gtp_pll_txusrclk_lock;
wire gtp_rxinit_done;
wire gtp_rxphaligndone;
(* dont_touch = "true" *) wire tx_clk;
wire tx_rst;
(* dont_touch = "true" *) wire rx_clk;
wire rx_rst;
wire tx_link_ready;
reg [31:0] tx_data_in = 32'd0;
reg [1:0] tx_data_type_in = 2'd0;
reg [39:0] tx_data_out = 40'd0;
wire tx_fifo_empty0;
wire tx_fifo_re;
wire tx_tx_init_done0;
reg [7:0] tx_d0 = 8'd0;
reg [7:0] tx_d1 = 8'd0;
reg [7:0] tx_d2 = 8'd0;
reg [7:0] tx_d3 = 8'd0;
reg tx_k0 = 1'd0;
wire tx_k1;
wire tx_k2;
wire tx_k3;
reg [9:0] tx_output0 = 10'd0;
reg [9:0] tx_output1 = 10'd0;
reg [9:0] tx_output2 = 10'd0;
reg [9:0] tx_output3 = 10'd0;
reg tx_disparity0 = 1'd0;
reg tx_disparity1 = 1'd0;
reg tx_disparity2 = 1'd0;
reg tx_disparity3 = 1'd0;
wire [7:0] tx_singleencoder0_d;
wire tx_singleencoder0_k;
reg tx_singleencoder0_disp_in = 1'd0;
reg [9:0] tx_singleencoder0_output = 10'd0;
reg tx_singleencoder0_disp_out = 1'd0;
reg [5:0] tx_singleencoder0_code6b = 6'd0;
reg tx_singleencoder0_code6b_unbalanced = 1'd0;
reg tx_singleencoder0_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder0_code4b = 4'd0;
reg tx_singleencoder0_code4b_unbalanced = 1'd0;
reg tx_singleencoder0_code4b_flip = 1'd0;
reg tx_singleencoder0_alt7_rd0 = 1'd0;
reg tx_singleencoder0_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder0_output_6b = 6'd0;
wire tx_singleencoder0_disp_inter;
reg [3:0] tx_singleencoder0_output_4b = 4'd0;
wire [9:0] tx_singleencoder0_output_msb_first;
wire [7:0] tx_singleencoder1_d;
wire tx_singleencoder1_k;
wire tx_singleencoder1_disp_in;
reg [9:0] tx_singleencoder1_output = 10'd0;
reg tx_singleencoder1_disp_out = 1'd0;
reg [5:0] tx_singleencoder1_code6b = 6'd0;
reg tx_singleencoder1_code6b_unbalanced = 1'd0;
reg tx_singleencoder1_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder1_code4b = 4'd0;
reg tx_singleencoder1_code4b_unbalanced = 1'd0;
reg tx_singleencoder1_code4b_flip = 1'd0;
reg tx_singleencoder1_alt7_rd0 = 1'd0;
reg tx_singleencoder1_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder1_output_6b = 6'd0;
wire tx_singleencoder1_disp_inter;
reg [3:0] tx_singleencoder1_output_4b = 4'd0;
wire [9:0] tx_singleencoder1_output_msb_first;
wire [7:0] tx_singleencoder2_d;
wire tx_singleencoder2_k;
wire tx_singleencoder2_disp_in;
reg [9:0] tx_singleencoder2_output = 10'd0;
reg tx_singleencoder2_disp_out = 1'd0;
reg [5:0] tx_singleencoder2_code6b = 6'd0;
reg tx_singleencoder2_code6b_unbalanced = 1'd0;
reg tx_singleencoder2_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder2_code4b = 4'd0;
reg tx_singleencoder2_code4b_unbalanced = 1'd0;
reg tx_singleencoder2_code4b_flip = 1'd0;
reg tx_singleencoder2_alt7_rd0 = 1'd0;
reg tx_singleencoder2_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder2_output_6b = 6'd0;
wire tx_singleencoder2_disp_inter;
reg [3:0] tx_singleencoder2_output_4b = 4'd0;
wire [9:0] tx_singleencoder2_output_msb_first;
wire [7:0] tx_singleencoder3_d;
wire tx_singleencoder3_k;
wire tx_singleencoder3_disp_in;
reg [9:0] tx_singleencoder3_output = 10'd0;
reg tx_singleencoder3_disp_out = 1'd0;
reg [5:0] tx_singleencoder3_code6b = 6'd0;
reg tx_singleencoder3_code6b_unbalanced = 1'd0;
reg tx_singleencoder3_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder3_code4b = 4'd0;
reg tx_singleencoder3_code4b_unbalanced = 1'd0;
reg tx_singleencoder3_code4b_flip = 1'd0;
reg tx_singleencoder3_alt7_rd0 = 1'd0;
reg tx_singleencoder3_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder3_output_6b = 6'd0;
wire tx_singleencoder3_disp_inter;
reg [3:0] tx_singleencoder3_output_4b = 4'd0;
wire [9:0] tx_singleencoder3_output_msb_first;
reg [31:0] tx_crc_encoder_i_data_payload = 32'd0;
reg tx_crc_encoder_i_data_strobe = 1'd0;
wire tx_crc_encoder_reset;
wire [19:0] tx_crc_encoder_o_crc;
wire [31:0] tx_crc_encoder_crc_dat;
reg [19:0] tx_crc_encoder_crc_cur = 20'd1048575;
reg [19:0] tx_crc_encoder_crc_next = 20'd597792;
wire tx_stream_controller_link_ready;
wire tx_stream_controller_fifo_empty;
wire [1:0] tx_stream_controller_data_type;
wire tx_stream_controller_tx_init_done;
reg tx_stream_controller_sop = 1'd0;
reg tx_stream_controller_eop = 1'd0;
reg tx_stream_controller_ign = 1'd0;
reg tx_stream_controller_idle = 1'd0;
reg tx_stream_controller_intermediate = 1'd0;
reg tx_stream_controller_encoder_ready = 1'd0;
reg tx_stream_controller_fifo_re = 1'd0;
reg tx_stream_controller_strobe_crc = 1'd0;
reg tx_stream_controller_reset_crc = 1'd0;
reg tx_stream_controller_aux_ign = 1'd0;
reg tx_stream_controller_reset = 1'd0;
wire tx_tx_init_done1;
wire tx_fifo_empty1;
wire [39:0] rx_data_in0;
wire rx_rx_init_done;
wire rx_trans_en0;
wire rx_tx_serial0;
wire rx_aligned;
reg [31:0] rx_corrector_din = 32'd0;
wire rx_corrector_aligned;
reg [31:0] rx_corrector_dout = 32'd0;
wire [31:0] rx_data_32b;
reg rx_rx_k0 = 1'd0;
reg rx_rx_k1 = 1'd0;
reg rx_rx_k2 = 1'd0;
reg rx_rx_k3 = 1'd0;
wire [9:0] rx_decoder1_input;
wire [7:0] rx_decoder1_d;
reg rx_decoder1_k = 1'd0;
wire rx_decoder1_invalid;
reg [9:0] rx_decoder1_input_msb_first = 10'd0;
wire [4:0] rx_decoder1_code5b;
reg [2:0] rx_decoder1_code3b = 3'd0;
wire [5:0] rx_decoder1_adr;
wire [4:0] rx_decoder1_dat_r;
reg [3:0] rx_decoder1_ones = 4'd0;
wire [9:0] rx_decoder2_input;
wire [7:0] rx_decoder2_d;
reg rx_decoder2_k = 1'd0;
wire rx_decoder2_invalid;
reg [9:0] rx_decoder2_input_msb_first = 10'd0;
wire [4:0] rx_decoder2_code5b;
reg [2:0] rx_decoder2_code3b = 3'd0;
wire [5:0] rx_decoder2_adr;
wire [4:0] rx_decoder2_dat_r;
reg [3:0] rx_decoder2_ones = 4'd0;
wire [9:0] rx_decoder3_input;
wire [7:0] rx_decoder3_d;
reg rx_decoder3_k = 1'd0;
wire rx_decoder3_invalid;
reg [9:0] rx_decoder3_input_msb_first = 10'd0;
wire [4:0] rx_decoder3_code5b;
reg [2:0] rx_decoder3_code3b = 3'd0;
wire [5:0] rx_decoder3_adr;
wire [4:0] rx_decoder3_dat_r;
reg [3:0] rx_decoder3_ones = 4'd0;
wire [9:0] rx_decoder4_input;
wire [7:0] rx_decoder4_d;
reg rx_decoder4_k = 1'd0;
wire rx_decoder4_invalid;
reg [9:0] rx_decoder4_input_msb_first = 10'd0;
wire [4:0] rx_decoder4_code5b;
reg [2:0] rx_decoder4_code3b = 3'd0;
wire [5:0] rx_decoder4_adr;
wire [4:0] rx_decoder4_dat_r;
reg [3:0] rx_decoder4_ones = 4'd0;
wire [31:0] rx_decoder_out;
wire [31:0] rx_data_in1;
wire rx_trans_en1;
wire rx_tx_serial1;
reg rx_tx_32bdone = 1'd0;
wire rx_fifoEmpty;
reg [4:0] rx_tx_counter = 5'd0;
reg rx_tx_serial2 = 1'd1;
reg [7:0] rx_tx_data = 8'd0;
wire rx_tx_strobe;
reg [2:0] rx_tx_bitn = 3'd0;
reg rx_tx_ready = 1'd0;
reg [7:0] rx_tx_latch = 8'd0;
reg rx_tx_done = 1'd0;
reg [3:0] rx_byte_cnt = 4'd0;
wire rx_fifo_re;
reg rx_fifo_readable = 1'd0;
wire [31:0] rx_fifo_din;
reg [31:0] rx_fifo_dout = 32'd0;
wire asyncfifo_we;
wire asyncfifo_writable;
wire asyncfifo_re;
wire asyncfifo_readable;
wire [33:0] asyncfifo_din;
wire [33:0] asyncfifo_dout;
wire graycounter0_ce;
(* dont_touch = "true" *) reg [5:0] graycounter0_q = 6'd0;
wire [5:0] graycounter0_q_next;
reg [5:0] graycounter0_q_binary = 6'd0;
reg [5:0] graycounter0_q_next_binary = 6'd0;
wire graycounter1_ce;
(* dont_touch = "true" *) reg [5:0] graycounter1_q = 6'd0;
wire [5:0] graycounter1_q_next;
reg [5:0] graycounter1_q_binary = 6'd0;
reg [5:0] graycounter1_q_next_binary = 6'd0;
wire [5:0] produce_rdomain;
wire [5:0] consume_wdomain;
wire [4:0] wrport_adr;
wire [33:0] wrport_dat_r;
wire wrport_we;
wire [33:0] wrport_dat_w;
wire [4:0] rdport_adr;
wire [33:0] rdport_dat_r;
reg [31:0] o = 32'd0;
wire enable;
reg [6:0] state = 7'd1;
reg prbs_en = 1'd0;
reg [1:0] data_type = 2'd0;
reg [2:0] index = 3'd0;
wire [1:0] i_ignored;
reg write_fifo = 1'd0;
reg [2:0] gtptxinit_state = 3'd0;
reg [2:0] gtptxinit_next_state = 3'd0;
reg [3:0] clockdomainsrenamer_state = 4'd0;
reg [3:0] clockdomainsrenamer_next_state = 4'd0;
reg gtp_gtprxinit_rxphdlypd_gtp_next_value0 = 1'd0;
reg gtp_gtprxinit_rxphdlypd_gtp_next_value_ce0 = 1'd0;
reg [15:0] gtp_gtprxinit_drpvalue_gtp_next_value1 = 16'd0;
reg gtp_gtprxinit_drpvalue_gtp_next_value_ce1 = 1'd0;
reg gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value2 = 1'd0;
reg gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value_ce2 = 1'd0;
reg [2:0] clockdomainsrenamer0_state = 3'd0;
reg [2:0] clockdomainsrenamer0_next_state = 3'd0;
reg tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 = 1'd0;
reg tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 = 1'd0;
reg tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 = 1'd0;
reg tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 = 1'd0;
reg tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 = 1'd0;
reg tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 = 1'd0;
reg tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value0 = 1'd0;
reg tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value_ce0 = 1'd0;
reg tx_stream_controller_intermediate_clockdomainsrenamer0_next_value1 = 1'd0;
reg tx_stream_controller_intermediate_clockdomainsrenamer0_next_value_ce1 = 1'd0;
reg tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value2 = 1'd0;
reg tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value_ce2 = 1'd0;
reg tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value0 = 1'd0;
reg tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value_ce0 = 1'd0;
reg tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value1 = 1'd0;
reg tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value_ce1 = 1'd0;
reg tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value2 = 1'd0;
reg tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value_ce2 = 1'd0;
reg [1:0] fsm_state = 2'd0;
reg [1:0] fsm_next_state = 2'd0;
reg rx_tx_ready_clockdomainsrenamer1_next_value0 = 1'd0;
reg rx_tx_ready_clockdomainsrenamer1_next_value_ce0 = 1'd0;
reg [7:0] rx_tx_data_clockdomainsrenamer1_next_value1 = 8'd0;
reg rx_tx_data_clockdomainsrenamer1_next_value_ce1 = 1'd0;
reg rx_tx_32bdone_clockdomainsrenamer1_next_value2 = 1'd0;
reg rx_tx_32bdone_clockdomainsrenamer1_next_value_ce2 = 1'd0;
reg [3:0] rx_byte_cnt_clockdomainsrenamer1_next_value3 = 4'd0;
reg rx_byte_cnt_clockdomainsrenamer1_next_value_ce3 = 1'd0;
reg [1:0] tx_state = 2'd0;
reg [1:0] tx_next_state = 2'd0;
reg [7:0] rx_tx_latch_clockdomainsrenamer1_t_next_value0 = 8'd0;
reg rx_tx_latch_clockdomainsrenamer1_t_next_value_ce0 = 1'd0;
reg [4:0] rx_tx_counter_clockdomainsrenamer1_t_next_value1 = 5'd0;
reg rx_tx_counter_clockdomainsrenamer1_t_next_value_ce1 = 1'd0;
reg rx_tx_serial2_clockdomainsrenamer1_f_next_value = 1'd0;
reg rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce = 1'd0;
reg [2:0] rx_tx_bitn_clockdomainsrenamer1_t_next_value2 = 3'd0;
reg rx_tx_bitn_clockdomainsrenamer1_t_next_value_ce2 = 1'd0;
reg rx_tx_done_clockdomainsrenamer1_t_next_value3 = 1'd0;
reg rx_tx_done_clockdomainsrenamer1_t_next_value_ce3 = 1'd0;
reg [2:0] clockdomainsrenamer2_state = 3'd0;
reg [2:0] clockdomainsrenamer2_next_state = 3'd0;
reg prbs_en_clockdomainsrenamer2_next_value0 = 1'd0;
reg prbs_en_clockdomainsrenamer2_next_value_ce0 = 1'd0;
reg [1:0] data_type_clockdomainsrenamer2_next_value1 = 2'd0;
reg data_type_clockdomainsrenamer2_next_value_ce1 = 1'd0;
reg write_fifo_clockdomainsrenamer2_next_value2 = 1'd0;
reg write_fifo_clockdomainsrenamer2_next_value_ce2 = 1'd0;
reg [2:0] index_clockdomainsrenamer2_next_value3 = 3'd0;
reg index_clockdomainsrenamer2_next_value_ce3 = 1'd0;
reg [2:0] t_array_muxed0 = 3'd0;
reg [2:0] t_array_muxed1 = 3'd0;
reg [2:0] f_array_muxed0 = 3'd0;
reg [2:0] t_array_muxed2 = 3'd0;
reg [2:0] t_array_muxed3 = 3'd0;
reg [2:0] f_array_muxed1 = 3'd0;
reg [2:0] t_array_muxed4 = 3'd0;
reg [2:0] t_array_muxed5 = 3'd0;
reg [2:0] f_array_muxed2 = 3'd0;
reg [2:0] t_array_muxed6 = 3'd0;
reg [2:0] t_array_muxed7 = 3'd0;
reg [2:0] f_array_muxed3 = 3'd0;
reg [5:0] rhs_array_muxed0 = 6'd0;
reg rhs_array_muxed1 = 1'd0;
reg rhs_array_muxed2 = 1'd0;
reg [3:0] rhs_array_muxed3 = 4'd0;
reg rhs_array_muxed4 = 1'd0;
reg rhs_array_muxed5 = 1'd0;
reg [5:0] rhs_array_muxed6 = 6'd0;
reg rhs_array_muxed7 = 1'd0;
reg rhs_array_muxed8 = 1'd0;
reg [3:0] rhs_array_muxed9 = 4'd0;
reg rhs_array_muxed10 = 1'd0;
reg rhs_array_muxed11 = 1'd0;
reg [5:0] rhs_array_muxed12 = 6'd0;
reg rhs_array_muxed13 = 1'd0;
reg rhs_array_muxed14 = 1'd0;
reg [3:0] rhs_array_muxed15 = 4'd0;
reg rhs_array_muxed16 = 1'd0;
reg rhs_array_muxed17 = 1'd0;
reg [5:0] rhs_array_muxed18 = 6'd0;
reg rhs_array_muxed19 = 1'd0;
reg rhs_array_muxed20 = 1'd0;
reg [3:0] rhs_array_muxed21 = 4'd0;
reg rhs_array_muxed22 = 1'd0;
reg rhs_array_muxed23 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl1_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl1_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl2_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl2_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl3_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl3_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl4_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl4_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl5_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl5_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl6_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl6_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl7_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl7_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl8_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl8_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl9_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl9_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl10_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl10_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl11_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl11_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl12_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl12_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl13_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl13_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl14_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl14_regs1 = 6'd0;

assign write_clk = write_clk_1;
assign write_rst = reset;
assign i_ignored = 2'd2;
assign asyncfifo_din = {data_type, o};
assign enable = prbs_en;
assign asyncfifo_we = write_fifo;
assign gtp_reset = reset;
assign asyncfifo_re = tx_fifo_re;
assign tx_link_ready = link_ready;
assign tx_fifo_empty0 = (~asyncfifo_readable);
assign tx_tx_init_done0 = gtp_tx_init_done0;
always @(*) begin
	tx_data_type_in <= 2'd0;
	tx_data_in <= 32'd0;
	if ((link_ready & asyncfifo_readable)) begin
		tx_data_type_in <= asyncfifo_dout[33:32];
		tx_data_in <= asyncfifo_dout[31:0];
	end
end
assign gtp_tx_data = tx_data_out;
assign rx_data_in0 = gtp_rx_data;
assign rx_aligned = gtp_rxbytealigned;
assign rx_rx_init_done = gtp_rxinit_done;
assign rx_trans_en0 = trans_en;
assign rxinit_done = gtp_rxinit_done;
assign sys_clk = sys_clk_1;
assign por_clk = sys_clk_1;
assign sys_rst = int_rst;
assign gtp_tx_init_restart = gtp_reset;
always @(*) begin
	gtp_gtprxinit_restart0 <= 1'd0;
	if ((~gtp_tx_init_done1)) begin
		gtp_gtprxinit_restart0 <= 1'd1;
	end
end
assign gtp_tx_init_plllock0 = qpll_lock;
assign gtp_gtprxinit_plllock0 = qpll_lock;
assign qpll_reset = gtp_tx_init_pllreset;
assign gtp_tx_init_done0 = gtp_tx_init_done1;
assign gtp_rxinit_done = gtp_gtprxinit_done;
assign gtp_drpaddr = gtp_gtprxinit_drpaddr;
assign gtp_drpdi = gtp_gtprxinit_drpdi;
assign gtp_gtprxinit_drpdo = gtp_drpdo;
assign gtp_drpen = gtp_gtprxinit_drpen;
assign gtp_drpwe = gtp_gtprxinit_drpwe;
assign gtp_gtprxinit_drprdy = gtp_drprdy;
assign tx_rst = gtp_reset;
assign rx_rst = gtp_reset;
assign gtp_tx_init_ready_timer_wait = ((~gtp_tx_init_done2) & (~gtp_tx_init_reset));
assign gtp_tx_init_reset = (gtp_tx_init_restart | gtp_tx_init_ready_timer_done);
assign gtp_tx_init_txphaligndone_rising = (gtp_tx_init_txphaligndone1 & (~gtp_tx_init_txphaligndone_r));
assign gtp_tx_init_pll_reset_timer_done = (gtp_tx_init_pll_reset_timer_count == 1'd0);
always @(*) begin
	gtp_tx_init_txphalign1 <= 1'd0;
	gtp_tx_init_txdlyen1 <= 1'd0;
	gtp_tx_init_txuserrdy1 <= 1'd0;
	gtp_tx_init_done2 <= 1'd0;
	gtptxinit_next_state <= 3'd0;
	gtp_tx_init_pll_reset_timer_wait <= 1'd0;
	gtp_tx_init_pllreset <= 1'd0;
	gtp_tx_init_gttxreset1 <= 1'd0;
	gtp_tx_init_txdlysreset1 <= 1'd0;
	gtp_tx_init_txphinit1 <= 1'd0;
	gtptxinit_next_state <= gtptxinit_state;
	case (gtptxinit_state)
		1'd1: begin
			gtp_tx_init_gttxreset1 <= 1'd1;
			if (gtp_tx_init_plllock1) begin
				gtptxinit_next_state <= 2'd2;
			end
		end
		2'd2: begin
			gtp_tx_init_gttxreset1 <= 1'd0;
			gtp_tx_init_txuserrdy1 <= 1'd1;
			if (gtp_tx_init_txresetdone1) begin
				gtptxinit_next_state <= 2'd3;
			end
		end
		2'd3: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txdlysreset1 <= 1'd1;
			if (gtp_tx_init_txdlysresetdone1) begin
				gtptxinit_next_state <= 3'd4;
			end
		end
		3'd4: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txphinit1 <= 1'd1;
			if (gtp_tx_init_txphinitdone1) begin
				gtptxinit_next_state <= 3'd5;
			end
		end
		3'd5: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txphalign1 <= 1'd1;
			if (gtp_tx_init_txphaligndone_rising) begin
				gtptxinit_next_state <= 3'd6;
			end
		end
		3'd6: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txdlyen1 <= 1'd1;
			if (gtp_tx_init_txphaligndone_rising) begin
				gtptxinit_next_state <= 3'd7;
			end
		end
		3'd7: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_done2 <= 1'd1;
			if (gtp_tx_init_restart) begin
				gtptxinit_next_state <= 1'd0;
			end
		end
		default: begin
			gtp_tx_init_pll_reset_timer_wait <= 1'd1;
			if (gtp_tx_init_pll_reset_timer_done) begin
				gtp_tx_init_pllreset <= 1'd1;
				gtptxinit_next_state <= 1'd1;
			end
		end
	endcase
end
assign gtp_tx_init_ready_timer_done = (gtp_tx_init_ready_timer_count == 1'd0);
assign gtp_gtprxinit_drpaddr = 5'd17;
always @(*) begin
	gtp_gtprxinit_drpdi <= 16'd0;
	if (gtp_gtprxinit_drpmask) begin
		gtp_gtprxinit_drpdi <= (gtp_gtprxinit_drpvalue & 16'd63487);
	end else begin
		gtp_gtprxinit_drpdi <= gtp_gtprxinit_drpvalue;
	end
end
assign gtp_gtprxinit_reset = gtp_gtprxinit_restart1;
assign gtp_gtprxinit_pll_reset_timer_done = (gtp_gtprxinit_pll_reset_timer_count == 1'd0);
always @(*) begin
	gtp_gtprxinit_gtrxreset1 <= 1'd0;
	gtp_gtprxinit_gtrxpd1 <= 1'd0;
	gtp_gtprxinit_rxdlysreset1 <= 1'd0;
	gtp_gtprxinit_rxuserrdy1 <= 1'd0;
	gtp_gtprxinit_pll_reset_timer_wait <= 1'd0;
	gtp_gtprxinit_cdr_stable_timer_wait <= 1'd0;
	gtp_gtprxinit_drpen <= 1'd0;
	clockdomainsrenamer_next_state <= 4'd0;
	gtp_gtprxinit_rxphdlypd_gtp_next_value0 <= 1'd0;
	gtp_gtprxinit_rxphdlypd_gtp_next_value_ce0 <= 1'd0;
	gtp_gtprxinit_drpwe <= 1'd0;
	gtp_gtprxinit_drpmask <= 1'd0;
	gtp_gtprxinit_drpvalue_gtp_next_value1 <= 16'd0;
	gtp_gtprxinit_drpvalue_gtp_next_value_ce1 <= 1'd0;
	gtp_gtprxinit_done <= 1'd0;
	gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value2 <= 1'd0;
	gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value_ce2 <= 1'd0;
	clockdomainsrenamer_next_state <= clockdomainsrenamer_state;
	case (clockdomainsrenamer_state)
		1'd1: begin
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if (gtp_gtprxinit_plllock1) begin
				clockdomainsrenamer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			gtp_gtprxinit_drpen <= 1'd1;
			clockdomainsrenamer_next_state <= 2'd3;
		end
		2'd3: begin
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if (gtp_gtprxinit_drprdy) begin
				gtp_gtprxinit_drpvalue_gtp_next_value1 <= gtp_gtprxinit_drpdo;
				gtp_gtprxinit_drpvalue_gtp_next_value_ce1 <= 1'd1;
				clockdomainsrenamer_next_state <= 3'd4;
			end
		end
		3'd4: begin
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if ((~gtp_gtprxinit_drprdy)) begin
				clockdomainsrenamer_next_state <= 3'd5;
			end
		end
		3'd5: begin
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			gtp_gtprxinit_drpmask <= 1'd1;
			gtp_gtprxinit_drpen <= 1'd1;
			gtp_gtprxinit_drpwe <= 1'd1;
			clockdomainsrenamer_next_state <= 3'd6;
		end
		3'd6: begin
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if (gtp_gtprxinit_drprdy) begin
				gtp_gtprxinit_gtrxreset1 <= 1'd0;
				clockdomainsrenamer_next_state <= 3'd7;
			end
		end
		3'd7: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if ((gtp_gtprxinit_rxpmaresetdone_r & (~gtp_gtprxinit_rxpmaresetdone1))) begin
				clockdomainsrenamer_next_state <= 4'd8;
			end
		end
		4'd8: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_drpen <= 1'd1;
			gtp_gtprxinit_drpwe <= 1'd1;
			clockdomainsrenamer_next_state <= 4'd9;
		end
		4'd9: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtp_gtprxinit_drprdy) begin
				clockdomainsrenamer_next_state <= 4'd10;
			end
		end
		4'd10: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_cdr_stable_timer_wait <= 1'd1;
			if ((gtp_gtprxinit_rxresetdone1 & gtp_gtprxinit_cdr_stable_timer_done)) begin
				clockdomainsrenamer_next_state <= 4'd11;
				gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value2 <= 1'd1;
				gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value_ce2 <= 1'd1;
			end
		end
		4'd11: begin
			gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value2 <= 1'd0;
			gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value_ce2 <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtp_gtprxinit_pll_rxusrclk_lock) begin
				clockdomainsrenamer_next_state <= 4'd12;
			end
		end
		4'd12: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_rxdlysreset1 <= 1'd1;
			if (gtp_gtprxinit_rxdlysresetdone1) begin
				clockdomainsrenamer_next_state <= 4'd13;
			end
		end
		4'd13: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtp_gtprxinit_rxsyncdone1) begin
				clockdomainsrenamer_next_state <= 4'd14;
			end
		end
		4'd14: begin
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_done <= 1'd1;
			if (gtp_gtprxinit_restart1) begin
				clockdomainsrenamer_next_state <= 1'd0;
			end
		end
		default: begin
			gtp_gtprxinit_rxphdlypd_gtp_next_value0 <= 1'd0;
			gtp_gtprxinit_rxphdlypd_gtp_next_value_ce0 <= 1'd1;
			gtp_gtprxinit_gtrxpd1 <= 1'd1;
			gtp_gtprxinit_pll_reset_timer_wait <= 1'd1;
			if (gtp_gtprxinit_pll_reset_timer_done) begin
				clockdomainsrenamer_next_state <= 1'd1;
			end
		end
	endcase
end
assign gtp_gtprxinit_cdr_stable_timer_done = (gtp_gtprxinit_cdr_stable_timer_count == 1'd0);
assign graycounter0_ce = (asyncfifo_writable & asyncfifo_we);
assign graycounter1_ce = (asyncfifo_readable & asyncfifo_re);
assign asyncfifo_writable = (((graycounter0_q[5] == consume_wdomain[5]) | (graycounter0_q[4] == consume_wdomain[4])) | (graycounter0_q[3:0] != consume_wdomain[3:0]));
assign asyncfifo_readable = (graycounter1_q != produce_rdomain);
assign wrport_adr = graycounter0_q_binary[4:0];
assign wrport_dat_w = asyncfifo_din;
assign wrport_we = graycounter0_ce;
assign rdport_adr = graycounter1_q_next_binary[4:0];
assign asyncfifo_dout = rdport_dat_r;
always @(*) begin
	graycounter0_q_next_binary <= 6'd0;
	if (graycounter0_ce) begin
		graycounter0_q_next_binary <= (graycounter0_q_binary + 1'd1);
	end else begin
		graycounter0_q_next_binary <= graycounter0_q_binary;
	end
end
assign graycounter0_q_next = (graycounter0_q_next_binary ^ graycounter0_q_next_binary[5:1]);
always @(*) begin
	graycounter1_q_next_binary <= 6'd0;
	if (graycounter1_ce) begin
		graycounter1_q_next_binary <= (graycounter1_q_binary + 1'd1);
	end else begin
		graycounter1_q_next_binary <= graycounter1_q_binary;
	end
end
assign graycounter1_q_next = (graycounter1_q_next_binary ^ graycounter1_q_next_binary[5:1]);
assign tx_stream_controller_link_ready = tx_link_ready;
assign tx_stream_controller_fifo_empty = tx_fifo_empty1;
assign tx_stream_controller_data_type = tx_data_type_in;
assign tx_stream_controller_tx_init_done = tx_tx_init_done1;
assign tx_fifo_re = tx_stream_controller_fifo_re;
always @(*) begin
	tx_crc_encoder_i_data_strobe <= 1'd0;
	if ((tx_data_type_in != 2'd3)) begin
		tx_crc_encoder_i_data_strobe <= tx_stream_controller_strobe_crc;
	end
end
assign tx_crc_encoder_reset = tx_stream_controller_reset_crc;
always @(*) begin
	tx_crc_encoder_i_data_payload <= 32'd0;
	if (tx_stream_controller_encoder_ready) begin
		tx_crc_encoder_i_data_payload <= tx_data_in;
	end
end
always @(*) begin
	tx_data_out <= 40'd0;
	if (tx_stream_controller_encoder_ready) begin
		tx_data_out <= {tx_output3, tx_output2, tx_output1, tx_output0};
	end else begin
		tx_data_out <= 1'd0;
	end
end
always @(*) begin
	tx_d0 <= 8'd0;
	tx_d1 <= 8'd0;
	tx_d2 <= 8'd0;
	tx_d3 <= 8'd0;
	tx_k0 <= 1'd0;
	if (tx_stream_controller_idle) begin
		tx_d0 <= 8'd188;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_stream_controller_sop) begin
		tx_d0 <= 6'd60;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_stream_controller_intermediate) begin
		tx_d0 <= tx_data_in[7:0];
		tx_d1 <= tx_data_in[15:8];
		tx_d2 <= tx_data_in[23:16];
		tx_d3 <= tx_data_in[31:24];
	end
	if (tx_stream_controller_ign) begin
		tx_d0 <= 7'd92;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_stream_controller_eop) begin
		tx_d0 <= 8'd220;
		tx_k0 <= 1'd1;
		tx_d1 <= tx_crc_encoder_o_crc[7:0];
		tx_d2 <= tx_crc_encoder_o_crc[15:8];
		tx_d3 <= tx_crc_encoder_o_crc[19:16];
	end
	if (((((~tx_stream_controller_idle) & (~tx_stream_controller_eop)) & (~tx_stream_controller_sop)) & (~tx_stream_controller_ign))) begin
		tx_k0 <= 1'd0;
	end
end
assign tx_k1 = 1'd0;
assign tx_k2 = 1'd0;
assign tx_k3 = 1'd0;
assign tx_singleencoder1_disp_in = tx_singleencoder0_disp_out;
assign tx_singleencoder2_disp_in = tx_singleencoder1_disp_out;
assign tx_singleencoder3_disp_in = tx_singleencoder2_disp_out;
assign tx_singleencoder0_d = tx_d0;
assign tx_singleencoder0_k = tx_k0;
assign tx_singleencoder1_d = tx_d1;
assign tx_singleencoder1_k = tx_k1;
assign tx_singleencoder2_d = tx_d2;
assign tx_singleencoder2_k = tx_k2;
assign tx_singleencoder3_d = tx_d3;
assign tx_singleencoder3_k = tx_k3;
assign tx_singleencoder0_disp_inter = (tx_singleencoder0_disp_in ^ tx_singleencoder0_code6b_unbalanced);
always @(*) begin
	tx_singleencoder0_output_6b <= 6'd0;
	if (((~tx_singleencoder0_disp_in) & tx_singleencoder0_code6b_flip)) begin
		tx_singleencoder0_output_6b <= (~tx_singleencoder0_code6b);
	end else begin
		tx_singleencoder0_output_6b <= tx_singleencoder0_code6b;
	end
end
always @(*) begin
	tx_singleencoder0_disp_out <= 1'd0;
	tx_singleencoder0_output_4b <= 4'd0;
	if (((~tx_singleencoder0_disp_inter) & tx_singleencoder0_alt7_rd0)) begin
		tx_singleencoder0_disp_out <= (~tx_singleencoder0_disp_inter);
		tx_singleencoder0_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder0_disp_inter & tx_singleencoder0_alt7_rd1)) begin
			tx_singleencoder0_disp_out <= (~tx_singleencoder0_disp_inter);
			tx_singleencoder0_output_4b <= 4'd8;
		end else begin
			tx_singleencoder0_disp_out <= (tx_singleencoder0_disp_inter ^ tx_singleencoder0_code4b_unbalanced);
			if (((~tx_singleencoder0_disp_inter) & tx_singleencoder0_code4b_flip)) begin
				tx_singleencoder0_output_4b <= (~tx_singleencoder0_code4b);
			end else begin
				tx_singleencoder0_output_4b <= tx_singleencoder0_code4b;
			end
		end
	end
end
assign tx_singleencoder0_output_msb_first = {tx_singleencoder0_output_6b, tx_singleencoder0_output_4b};
always @(*) begin
	tx_singleencoder0_output <= 10'd0;
	tx_singleencoder0_output[0] <= tx_singleencoder0_output_msb_first[9];
	tx_singleencoder0_output[1] <= tx_singleencoder0_output_msb_first[8];
	tx_singleencoder0_output[2] <= tx_singleencoder0_output_msb_first[7];
	tx_singleencoder0_output[3] <= tx_singleencoder0_output_msb_first[6];
	tx_singleencoder0_output[4] <= tx_singleencoder0_output_msb_first[5];
	tx_singleencoder0_output[5] <= tx_singleencoder0_output_msb_first[4];
	tx_singleencoder0_output[6] <= tx_singleencoder0_output_msb_first[3];
	tx_singleencoder0_output[7] <= tx_singleencoder0_output_msb_first[2];
	tx_singleencoder0_output[8] <= tx_singleencoder0_output_msb_first[1];
	tx_singleencoder0_output[9] <= tx_singleencoder0_output_msb_first[0];
end
assign tx_singleencoder1_disp_inter = (tx_singleencoder1_disp_in ^ tx_singleencoder1_code6b_unbalanced);
always @(*) begin
	tx_singleencoder1_output_6b <= 6'd0;
	if (((~tx_singleencoder1_disp_in) & tx_singleencoder1_code6b_flip)) begin
		tx_singleencoder1_output_6b <= (~tx_singleencoder1_code6b);
	end else begin
		tx_singleencoder1_output_6b <= tx_singleencoder1_code6b;
	end
end
always @(*) begin
	tx_singleencoder1_disp_out <= 1'd0;
	tx_singleencoder1_output_4b <= 4'd0;
	if (((~tx_singleencoder1_disp_inter) & tx_singleencoder1_alt7_rd0)) begin
		tx_singleencoder1_disp_out <= (~tx_singleencoder1_disp_inter);
		tx_singleencoder1_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder1_disp_inter & tx_singleencoder1_alt7_rd1)) begin
			tx_singleencoder1_disp_out <= (~tx_singleencoder1_disp_inter);
			tx_singleencoder1_output_4b <= 4'd8;
		end else begin
			tx_singleencoder1_disp_out <= (tx_singleencoder1_disp_inter ^ tx_singleencoder1_code4b_unbalanced);
			if (((~tx_singleencoder1_disp_inter) & tx_singleencoder1_code4b_flip)) begin
				tx_singleencoder1_output_4b <= (~tx_singleencoder1_code4b);
			end else begin
				tx_singleencoder1_output_4b <= tx_singleencoder1_code4b;
			end
		end
	end
end
assign tx_singleencoder1_output_msb_first = {tx_singleencoder1_output_6b, tx_singleencoder1_output_4b};
always @(*) begin
	tx_singleencoder1_output <= 10'd0;
	tx_singleencoder1_output[0] <= tx_singleencoder1_output_msb_first[9];
	tx_singleencoder1_output[1] <= tx_singleencoder1_output_msb_first[8];
	tx_singleencoder1_output[2] <= tx_singleencoder1_output_msb_first[7];
	tx_singleencoder1_output[3] <= tx_singleencoder1_output_msb_first[6];
	tx_singleencoder1_output[4] <= tx_singleencoder1_output_msb_first[5];
	tx_singleencoder1_output[5] <= tx_singleencoder1_output_msb_first[4];
	tx_singleencoder1_output[6] <= tx_singleencoder1_output_msb_first[3];
	tx_singleencoder1_output[7] <= tx_singleencoder1_output_msb_first[2];
	tx_singleencoder1_output[8] <= tx_singleencoder1_output_msb_first[1];
	tx_singleencoder1_output[9] <= tx_singleencoder1_output_msb_first[0];
end
assign tx_singleencoder2_disp_inter = (tx_singleencoder2_disp_in ^ tx_singleencoder2_code6b_unbalanced);
always @(*) begin
	tx_singleencoder2_output_6b <= 6'd0;
	if (((~tx_singleencoder2_disp_in) & tx_singleencoder2_code6b_flip)) begin
		tx_singleencoder2_output_6b <= (~tx_singleencoder2_code6b);
	end else begin
		tx_singleencoder2_output_6b <= tx_singleencoder2_code6b;
	end
end
always @(*) begin
	tx_singleencoder2_disp_out <= 1'd0;
	tx_singleencoder2_output_4b <= 4'd0;
	if (((~tx_singleencoder2_disp_inter) & tx_singleencoder2_alt7_rd0)) begin
		tx_singleencoder2_disp_out <= (~tx_singleencoder2_disp_inter);
		tx_singleencoder2_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder2_disp_inter & tx_singleencoder2_alt7_rd1)) begin
			tx_singleencoder2_disp_out <= (~tx_singleencoder2_disp_inter);
			tx_singleencoder2_output_4b <= 4'd8;
		end else begin
			tx_singleencoder2_disp_out <= (tx_singleencoder2_disp_inter ^ tx_singleencoder2_code4b_unbalanced);
			if (((~tx_singleencoder2_disp_inter) & tx_singleencoder2_code4b_flip)) begin
				tx_singleencoder2_output_4b <= (~tx_singleencoder2_code4b);
			end else begin
				tx_singleencoder2_output_4b <= tx_singleencoder2_code4b;
			end
		end
	end
end
assign tx_singleencoder2_output_msb_first = {tx_singleencoder2_output_6b, tx_singleencoder2_output_4b};
always @(*) begin
	tx_singleencoder2_output <= 10'd0;
	tx_singleencoder2_output[0] <= tx_singleencoder2_output_msb_first[9];
	tx_singleencoder2_output[1] <= tx_singleencoder2_output_msb_first[8];
	tx_singleencoder2_output[2] <= tx_singleencoder2_output_msb_first[7];
	tx_singleencoder2_output[3] <= tx_singleencoder2_output_msb_first[6];
	tx_singleencoder2_output[4] <= tx_singleencoder2_output_msb_first[5];
	tx_singleencoder2_output[5] <= tx_singleencoder2_output_msb_first[4];
	tx_singleencoder2_output[6] <= tx_singleencoder2_output_msb_first[3];
	tx_singleencoder2_output[7] <= tx_singleencoder2_output_msb_first[2];
	tx_singleencoder2_output[8] <= tx_singleencoder2_output_msb_first[1];
	tx_singleencoder2_output[9] <= tx_singleencoder2_output_msb_first[0];
end
assign tx_singleencoder3_disp_inter = (tx_singleencoder3_disp_in ^ tx_singleencoder3_code6b_unbalanced);
always @(*) begin
	tx_singleencoder3_output_6b <= 6'd0;
	if (((~tx_singleencoder3_disp_in) & tx_singleencoder3_code6b_flip)) begin
		tx_singleencoder3_output_6b <= (~tx_singleencoder3_code6b);
	end else begin
		tx_singleencoder3_output_6b <= tx_singleencoder3_code6b;
	end
end
always @(*) begin
	tx_singleencoder3_disp_out <= 1'd0;
	tx_singleencoder3_output_4b <= 4'd0;
	if (((~tx_singleencoder3_disp_inter) & tx_singleencoder3_alt7_rd0)) begin
		tx_singleencoder3_disp_out <= (~tx_singleencoder3_disp_inter);
		tx_singleencoder3_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder3_disp_inter & tx_singleencoder3_alt7_rd1)) begin
			tx_singleencoder3_disp_out <= (~tx_singleencoder3_disp_inter);
			tx_singleencoder3_output_4b <= 4'd8;
		end else begin
			tx_singleencoder3_disp_out <= (tx_singleencoder3_disp_inter ^ tx_singleencoder3_code4b_unbalanced);
			if (((~tx_singleencoder3_disp_inter) & tx_singleencoder3_code4b_flip)) begin
				tx_singleencoder3_output_4b <= (~tx_singleencoder3_code4b);
			end else begin
				tx_singleencoder3_output_4b <= tx_singleencoder3_code4b;
			end
		end
	end
end
assign tx_singleencoder3_output_msb_first = {tx_singleencoder3_output_6b, tx_singleencoder3_output_4b};
always @(*) begin
	tx_singleencoder3_output <= 10'd0;
	tx_singleencoder3_output[0] <= tx_singleencoder3_output_msb_first[9];
	tx_singleencoder3_output[1] <= tx_singleencoder3_output_msb_first[8];
	tx_singleencoder3_output[2] <= tx_singleencoder3_output_msb_first[7];
	tx_singleencoder3_output[3] <= tx_singleencoder3_output_msb_first[6];
	tx_singleencoder3_output[4] <= tx_singleencoder3_output_msb_first[5];
	tx_singleencoder3_output[5] <= tx_singleencoder3_output_msb_first[4];
	tx_singleencoder3_output[6] <= tx_singleencoder3_output_msb_first[3];
	tx_singleencoder3_output[7] <= tx_singleencoder3_output_msb_first[2];
	tx_singleencoder3_output[8] <= tx_singleencoder3_output_msb_first[1];
	tx_singleencoder3_output[9] <= tx_singleencoder3_output_msb_first[0];
end
assign tx_crc_encoder_crc_dat = tx_crc_encoder_i_data_payload;
assign tx_crc_encoder_o_crc = tx_crc_encoder_crc_cur;
always @(*) begin
	tx_crc_encoder_crc_next <= 20'd597792;
	tx_crc_encoder_crc_next[0] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[15]);
	tx_crc_encoder_crc_next[1] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[16]);
	tx_crc_encoder_crc_next[2] <= (((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[3] <= (((((((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[4] <= (((((((((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[18]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[5] <= (((((((((((((((((((((tx_crc_encoder_crc_dat[14] ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[6] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[7] <= (((((((((((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[8] <= (((((((((((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[15]);
	tx_crc_encoder_crc_next[9] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[16]);
	tx_crc_encoder_crc_next[10] <= (((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[11] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[12] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[13] <= (((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[14] <= (((((((((((((((tx_crc_encoder_crc_dat[14] ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[15] <= (((((((((((((((tx_crc_encoder_crc_dat[15] ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[18]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[16] <= (((((((((((((tx_crc_encoder_crc_dat[16] ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[17] <= (((((((((((tx_crc_encoder_crc_dat[17] ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[18] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[19] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]);
end
always @(*) begin
	tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value_ce2 <= 1'd0;
	tx_stream_controller_intermediate_clockdomainsrenamer0_next_value1 <= 1'd0;
	tx_stream_controller_intermediate_clockdomainsrenamer0_next_value_ce1 <= 1'd0;
	tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value2 <= 1'd0;
	tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value_ce2 <= 1'd0;
	clockdomainsrenamer0_next_state <= 3'd0;
	tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd0;
	tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd0;
	tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 <= 1'd0;
	tx_stream_controller_ign <= 1'd0;
	tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 <= 1'd0;
	tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value0 <= 1'd0;
	tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value_ce0 <= 1'd0;
	tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 <= 1'd0;
	tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 <= 1'd0;
	tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value1 <= 1'd0;
	tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value_ce1 <= 1'd0;
	tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value0 <= 1'd0;
	tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value_ce0 <= 1'd0;
	tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value2 <= 1'd0;
	clockdomainsrenamer0_next_state <= clockdomainsrenamer0_state;
	case (clockdomainsrenamer0_state)
		1'd1: begin
			tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value0 <= 1'd1;
			tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
			if (tx_stream_controller_fifo_empty) begin
				clockdomainsrenamer0_next_state <= 1'd1;
			end else begin
				if ((tx_stream_controller_link_ready & (tx_stream_controller_data_type == 1'd1))) begin
					clockdomainsrenamer0_next_state <= 2'd2;
					tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
					tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
					tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 <= 1'd1;
					tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 <= 1'd1;
					tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 <= 1'd0;
					tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 <= 1'd1;
				end
			end
		end
		2'd2: begin
			clockdomainsrenamer0_next_state <= 2'd3;
			tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value0 <= 1'd1;
			tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
			tx_stream_controller_intermediate_clockdomainsrenamer0_next_value1 <= 1'd1;
			tx_stream_controller_intermediate_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
			tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
			tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
			tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 <= 1'd0;
			tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 <= 1'd1;
			tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value2 <= 1'd1;
			tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
		end
		2'd3: begin
			if (tx_stream_controller_fifo_empty) begin
				clockdomainsrenamer0_next_state <= 1'd0;
			end else begin
				tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
				tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
			end
			if ((~tx_stream_controller_fifo_empty)) begin
				case (tx_stream_controller_data_type)
					1'd0: begin
						tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value0 <= 1'd1;
						tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
						tx_stream_controller_intermediate_clockdomainsrenamer0_next_value1 <= 1'd1;
						tx_stream_controller_intermediate_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
						tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value2 <= 1'd1;
						tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
						tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
						tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
						tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value0 <= 1'd0;
						tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value_ce0 <= 1'd1;
					end
					1'd1: begin
						clockdomainsrenamer0_next_state <= 2'd2;
						tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
						tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
						tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 <= 1'd1;
						tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 <= 1'd1;
					end
					2'd2: begin
						clockdomainsrenamer0_next_state <= 3'd4;
						tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value1 <= 1'd1;
						tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value_ce1 <= 1'd1;
						tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value2 <= 1'd0;
						tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
						tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value2 <= 1'd1;
						tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value_ce2 <= 1'd1;
						tx_stream_controller_intermediate_clockdomainsrenamer0_next_value1 <= 1'd0;
						tx_stream_controller_intermediate_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
						tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value0 <= 1'd0;
						tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value_ce0 <= 1'd1;
					end
					2'd3: begin
						clockdomainsrenamer0_next_state <= 2'd3;
						tx_stream_controller_ign <= 1'd1;
					end
				endcase
			end
		end
		3'd4: begin
			tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value1 <= 1'd0;
			tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value_ce1 <= 1'd1;
			tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value2 <= 1'd0;
			tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value_ce2 <= 1'd1;
			if (((~tx_stream_controller_fifo_empty) & (tx_stream_controller_data_type == 1'd1))) begin
				clockdomainsrenamer0_next_state <= 2'd2;
				tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
				tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
				tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 <= 1'd1;
				tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 <= 1'd1;
			end else begin
				tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 <= 1'd1;
				tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 <= 1'd1;
				tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd0;
				tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
				clockdomainsrenamer0_next_state <= 1'd1;
			end
		end
		default: begin
			if (tx_stream_controller_tx_init_done) begin
				if (tx_stream_controller_link_ready) begin
					if (((tx_stream_controller_link_ready & (~tx_stream_controller_fifo_empty)) & (tx_stream_controller_data_type == 1'd1))) begin
						clockdomainsrenamer0_next_state <= 2'd2;
						tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0 <= 1'd1;
						tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0 <= 1'd1;
						tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1 <= 1'd1;
						tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1 <= 1'd1;
						tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 <= 1'd0;
						tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 <= 1'd1;
					end else begin
						clockdomainsrenamer0_next_state <= 1'd1;
						tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 <= 1'd1;
						tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 <= 1'd1;
					end
				end else begin
					clockdomainsrenamer0_next_state <= 1'd1;
					tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2 <= 1'd1;
					tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2 <= 1'd1;
				end
			end else begin
				clockdomainsrenamer0_next_state <= 1'd0;
			end
		end
	endcase
end
assign rx_decoder1_input = rx_data_in0[9:0];
assign rx_decoder2_input = rx_data_in0[19:10];
assign rx_decoder3_input = rx_data_in0[29:20];
assign rx_decoder4_input = rx_data_in0[39:30];
assign rx_decoder_out = {rx_decoder4_d, rx_decoder3_d, rx_decoder2_d, rx_decoder1_d};
assign rx_corrector_aligned = rx_aligned;
always @(*) begin
	rx_corrector_din <= 32'd0;
	rx_corrector_din[7:0] <= rx_decoder1_d;
	rx_corrector_din[15:8] <= rx_decoder2_d;
	rx_corrector_din[23:16] <= rx_decoder3_d;
	rx_corrector_din[31:24] <= rx_decoder4_d;
end
assign rx_data_32b = rx_corrector_dout;
assign rx_fifo_din = rx_data_32b;
assign rx_fifo_re = rx_tx_32bdone;
assign rx_data_in1 = rx_fifo_dout;
assign rx_tx_serial0 = rx_tx_serial1;
assign rx_trans_en1 = rx_trans_en0;
assign rx_fifoEmpty = (~rx_fifo_readable);
assign rx_tx_serial1 = rx_tx_serial2;
always @(*) begin
	rx_byte_cnt_clockdomainsrenamer1_next_value3 <= 4'd0;
	rx_byte_cnt_clockdomainsrenamer1_next_value_ce3 <= 1'd0;
	fsm_next_state <= 2'd0;
	rx_tx_ready_clockdomainsrenamer1_next_value0 <= 1'd0;
	rx_tx_ready_clockdomainsrenamer1_next_value_ce0 <= 1'd0;
	rx_tx_data_clockdomainsrenamer1_next_value1 <= 8'd0;
	rx_tx_data_clockdomainsrenamer1_next_value_ce1 <= 1'd0;
	rx_tx_32bdone_clockdomainsrenamer1_next_value2 <= 1'd0;
	rx_tx_32bdone_clockdomainsrenamer1_next_value_ce2 <= 1'd0;
	fsm_next_state <= fsm_state;
	case (fsm_state)
		1'd1: begin
			if (rx_tx_done) begin
				rx_byte_cnt_clockdomainsrenamer1_next_value3 <= (rx_byte_cnt + 1'd1);
				rx_byte_cnt_clockdomainsrenamer1_next_value_ce3 <= 1'd1;
				if ((rx_byte_cnt < 2'd3)) begin
					rx_tx_ready_clockdomainsrenamer1_next_value0 <= 1'd1;
					rx_tx_ready_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
					fsm_next_state <= 2'd2;
				end else begin
					fsm_next_state <= 1'd0;
					rx_tx_32bdone_clockdomainsrenamer1_next_value2 <= 1'd1;
					rx_tx_32bdone_clockdomainsrenamer1_next_value_ce2 <= 1'd1;
					rx_tx_ready_clockdomainsrenamer1_next_value0 <= 1'd0;
					rx_tx_ready_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
					rx_byte_cnt_clockdomainsrenamer1_next_value3 <= 1'd0;
					rx_byte_cnt_clockdomainsrenamer1_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd2: begin
			case (rx_byte_cnt)
				1'd1: begin
					rx_tx_data_clockdomainsrenamer1_next_value1 <= rx_data_in1[15:8];
					rx_tx_data_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
				end
				2'd2: begin
					rx_tx_data_clockdomainsrenamer1_next_value1 <= rx_data_in1[23:16];
					rx_tx_data_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
				end
				2'd3: begin
					rx_tx_data_clockdomainsrenamer1_next_value1 <= rx_data_in1[31:24];
					rx_tx_data_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
				end
			endcase
			if ((~rx_tx_done)) begin
				fsm_next_state <= 1'd1;
			end
		end
		default: begin
			if (((rx_trans_en1 & (~rx_tx_done)) & (~rx_fifoEmpty))) begin
				fsm_next_state <= 1'd1;
				rx_tx_ready_clockdomainsrenamer1_next_value0 <= 1'd1;
				rx_tx_ready_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
				rx_tx_data_clockdomainsrenamer1_next_value1 <= rx_data_in1[7:0];
				rx_tx_data_clockdomainsrenamer1_next_value_ce1 <= 1'd1;
			end else begin
				fsm_next_state <= 1'd0;
				rx_tx_ready_clockdomainsrenamer1_next_value0 <= 1'd0;
				rx_tx_ready_clockdomainsrenamer1_next_value_ce0 <= 1'd1;
			end
			rx_tx_32bdone_clockdomainsrenamer1_next_value2 <= 1'd0;
			rx_tx_32bdone_clockdomainsrenamer1_next_value_ce2 <= 1'd1;
		end
	endcase
end
assign rx_tx_strobe = (rx_tx_counter == 1'd0);
always @(*) begin
	rx_tx_latch_clockdomainsrenamer1_t_next_value_ce0 <= 1'd0;
	rx_tx_done_clockdomainsrenamer1_t_next_value_ce3 <= 1'd0;
	rx_tx_counter_clockdomainsrenamer1_t_next_value1 <= 5'd0;
	rx_tx_counter_clockdomainsrenamer1_t_next_value_ce1 <= 1'd0;
	rx_tx_done_clockdomainsrenamer1_t_next_value3 <= 1'd0;
	rx_tx_serial2_clockdomainsrenamer1_f_next_value <= 1'd0;
	rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce <= 1'd0;
	rx_tx_bitn_clockdomainsrenamer1_t_next_value2 <= 3'd0;
	rx_tx_bitn_clockdomainsrenamer1_t_next_value_ce2 <= 1'd0;
	tx_next_state <= 2'd0;
	rx_tx_latch_clockdomainsrenamer1_t_next_value0 <= 8'd0;
	tx_next_state <= tx_state;
	case (tx_state)
		1'd1: begin
			if (rx_tx_strobe) begin
				rx_tx_serial2_clockdomainsrenamer1_f_next_value <= 1'd0;
				rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce <= 1'd1;
				tx_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (rx_tx_strobe) begin
				rx_tx_serial2_clockdomainsrenamer1_f_next_value <= rx_tx_latch[0];
				rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce <= 1'd1;
				rx_tx_latch_clockdomainsrenamer1_t_next_value0 <= {1'd0, rx_tx_latch[7:1]};
				rx_tx_latch_clockdomainsrenamer1_t_next_value_ce0 <= 1'd1;
				rx_tx_bitn_clockdomainsrenamer1_t_next_value2 <= (rx_tx_bitn + 1'd1);
				rx_tx_bitn_clockdomainsrenamer1_t_next_value_ce2 <= 1'd1;
				if ((rx_tx_bitn == 3'd7)) begin
					tx_next_state <= 2'd3;
					rx_tx_bitn_clockdomainsrenamer1_t_next_value2 <= 1'd0;
					rx_tx_bitn_clockdomainsrenamer1_t_next_value_ce2 <= 1'd1;
					rx_tx_done_clockdomainsrenamer1_t_next_value3 <= 1'd1;
					rx_tx_done_clockdomainsrenamer1_t_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd3: begin
			if (rx_tx_strobe) begin
				rx_tx_serial2_clockdomainsrenamer1_f_next_value <= 1'd1;
				rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce <= 1'd1;
				rx_tx_done_clockdomainsrenamer1_t_next_value3 <= 1'd0;
				rx_tx_done_clockdomainsrenamer1_t_next_value_ce3 <= 1'd1;
				tx_next_state <= 1'd0;
			end
		end
		default: begin
			if (rx_tx_ready) begin
				rx_tx_latch_clockdomainsrenamer1_t_next_value0 <= rx_tx_data;
				rx_tx_latch_clockdomainsrenamer1_t_next_value_ce0 <= 1'd1;
				rx_tx_counter_clockdomainsrenamer1_t_next_value1 <= 5'd29;
				rx_tx_counter_clockdomainsrenamer1_t_next_value_ce1 <= 1'd1;
				tx_next_state <= 1'd1;
			end else begin
				rx_tx_serial2_clockdomainsrenamer1_f_next_value <= 1'd1;
				rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	rx_decoder1_input_msb_first <= 10'd0;
	rx_decoder1_input_msb_first[0] <= rx_decoder1_input[9];
	rx_decoder1_input_msb_first[1] <= rx_decoder1_input[8];
	rx_decoder1_input_msb_first[2] <= rx_decoder1_input[7];
	rx_decoder1_input_msb_first[3] <= rx_decoder1_input[6];
	rx_decoder1_input_msb_first[4] <= rx_decoder1_input[5];
	rx_decoder1_input_msb_first[5] <= rx_decoder1_input[4];
	rx_decoder1_input_msb_first[6] <= rx_decoder1_input[3];
	rx_decoder1_input_msb_first[7] <= rx_decoder1_input[2];
	rx_decoder1_input_msb_first[8] <= rx_decoder1_input[1];
	rx_decoder1_input_msb_first[9] <= rx_decoder1_input[0];
end
assign rx_decoder1_adr = rx_decoder1_input_msb_first[9:4];
assign rx_decoder1_code5b = rx_decoder1_dat_r;
assign rx_decoder1_d = {rx_decoder1_code3b, rx_decoder1_code5b};
assign rx_decoder1_invalid = (((rx_decoder1_ones != 3'd4) & (rx_decoder1_ones != 3'd5)) & (rx_decoder1_ones != 3'd6));
always @(*) begin
	rx_decoder2_input_msb_first <= 10'd0;
	rx_decoder2_input_msb_first[0] <= rx_decoder2_input[9];
	rx_decoder2_input_msb_first[1] <= rx_decoder2_input[8];
	rx_decoder2_input_msb_first[2] <= rx_decoder2_input[7];
	rx_decoder2_input_msb_first[3] <= rx_decoder2_input[6];
	rx_decoder2_input_msb_first[4] <= rx_decoder2_input[5];
	rx_decoder2_input_msb_first[5] <= rx_decoder2_input[4];
	rx_decoder2_input_msb_first[6] <= rx_decoder2_input[3];
	rx_decoder2_input_msb_first[7] <= rx_decoder2_input[2];
	rx_decoder2_input_msb_first[8] <= rx_decoder2_input[1];
	rx_decoder2_input_msb_first[9] <= rx_decoder2_input[0];
end
assign rx_decoder2_adr = rx_decoder2_input_msb_first[9:4];
assign rx_decoder2_code5b = rx_decoder2_dat_r;
assign rx_decoder2_d = {rx_decoder2_code3b, rx_decoder2_code5b};
assign rx_decoder2_invalid = (((rx_decoder2_ones != 3'd4) & (rx_decoder2_ones != 3'd5)) & (rx_decoder2_ones != 3'd6));
always @(*) begin
	rx_decoder3_input_msb_first <= 10'd0;
	rx_decoder3_input_msb_first[0] <= rx_decoder3_input[9];
	rx_decoder3_input_msb_first[1] <= rx_decoder3_input[8];
	rx_decoder3_input_msb_first[2] <= rx_decoder3_input[7];
	rx_decoder3_input_msb_first[3] <= rx_decoder3_input[6];
	rx_decoder3_input_msb_first[4] <= rx_decoder3_input[5];
	rx_decoder3_input_msb_first[5] <= rx_decoder3_input[4];
	rx_decoder3_input_msb_first[6] <= rx_decoder3_input[3];
	rx_decoder3_input_msb_first[7] <= rx_decoder3_input[2];
	rx_decoder3_input_msb_first[8] <= rx_decoder3_input[1];
	rx_decoder3_input_msb_first[9] <= rx_decoder3_input[0];
end
assign rx_decoder3_adr = rx_decoder3_input_msb_first[9:4];
assign rx_decoder3_code5b = rx_decoder3_dat_r;
assign rx_decoder3_d = {rx_decoder3_code3b, rx_decoder3_code5b};
assign rx_decoder3_invalid = (((rx_decoder3_ones != 3'd4) & (rx_decoder3_ones != 3'd5)) & (rx_decoder3_ones != 3'd6));
always @(*) begin
	rx_decoder4_input_msb_first <= 10'd0;
	rx_decoder4_input_msb_first[0] <= rx_decoder4_input[9];
	rx_decoder4_input_msb_first[1] <= rx_decoder4_input[8];
	rx_decoder4_input_msb_first[2] <= rx_decoder4_input[7];
	rx_decoder4_input_msb_first[3] <= rx_decoder4_input[6];
	rx_decoder4_input_msb_first[4] <= rx_decoder4_input[5];
	rx_decoder4_input_msb_first[5] <= rx_decoder4_input[4];
	rx_decoder4_input_msb_first[6] <= rx_decoder4_input[3];
	rx_decoder4_input_msb_first[7] <= rx_decoder4_input[2];
	rx_decoder4_input_msb_first[8] <= rx_decoder4_input[1];
	rx_decoder4_input_msb_first[9] <= rx_decoder4_input[0];
end
assign rx_decoder4_adr = rx_decoder4_input_msb_first[9:4];
assign rx_decoder4_code5b = rx_decoder4_dat_r;
assign rx_decoder4_d = {rx_decoder4_code3b, rx_decoder4_code5b};
assign rx_decoder4_invalid = (((rx_decoder4_ones != 3'd4) & (rx_decoder4_ones != 3'd5)) & (rx_decoder4_ones != 3'd6));
always @(*) begin
	write_fifo_clockdomainsrenamer2_next_value2 <= 1'd0;
	write_fifo_clockdomainsrenamer2_next_value_ce2 <= 1'd0;
	index_clockdomainsrenamer2_next_value3 <= 3'd0;
	index_clockdomainsrenamer2_next_value_ce3 <= 1'd0;
	clockdomainsrenamer2_next_state <= 3'd0;
	prbs_en_clockdomainsrenamer2_next_value0 <= 1'd0;
	prbs_en_clockdomainsrenamer2_next_value_ce0 <= 1'd0;
	data_type_clockdomainsrenamer2_next_value1 <= 2'd0;
	data_type_clockdomainsrenamer2_next_value_ce1 <= 1'd0;
	clockdomainsrenamer2_next_state <= clockdomainsrenamer2_state;
	case (clockdomainsrenamer2_state)
		1'd1: begin
			data_type_clockdomainsrenamer2_next_value1 <= 1'd0;
			data_type_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
			index_clockdomainsrenamer2_next_value3 <= (index + 1'd1);
			index_clockdomainsrenamer2_next_value_ce3 <= 1'd1;
			clockdomainsrenamer2_next_state <= 2'd2;
		end
		2'd2: begin
			if ((index < 3'd5)) begin
				if ((index == (i_ignored - 1'd1))) begin
					data_type_clockdomainsrenamer2_next_value1 <= 2'd3;
					data_type_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
				end else begin
					data_type_clockdomainsrenamer2_next_value1 <= 1'd0;
					data_type_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
				end
				index_clockdomainsrenamer2_next_value3 <= (index + 1'd1);
				index_clockdomainsrenamer2_next_value_ce3 <= 1'd1;
				clockdomainsrenamer2_next_state <= 2'd2;
			end else begin
				clockdomainsrenamer2_next_state <= 2'd3;
				data_type_clockdomainsrenamer2_next_value1 <= 2'd2;
				data_type_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
				index_clockdomainsrenamer2_next_value3 <= 1'd0;
				index_clockdomainsrenamer2_next_value_ce3 <= 1'd1;
			end
		end
		2'd3: begin
			prbs_en_clockdomainsrenamer2_next_value0 <= 1'd0;
			prbs_en_clockdomainsrenamer2_next_value_ce0 <= 1'd1;
			write_fifo_clockdomainsrenamer2_next_value2 <= 1'd0;
			write_fifo_clockdomainsrenamer2_next_value_ce2 <= 1'd1;
			clockdomainsrenamer2_next_state <= 3'd4;
		end
		3'd4: begin
			if ((~we)) begin
				clockdomainsrenamer2_next_state <= 1'd0;
			end
		end
		default: begin
			if (we) begin
				prbs_en_clockdomainsrenamer2_next_value0 <= 1'd1;
				prbs_en_clockdomainsrenamer2_next_value_ce0 <= 1'd1;
				data_type_clockdomainsrenamer2_next_value1 <= 1'd1;
				data_type_clockdomainsrenamer2_next_value_ce1 <= 1'd1;
				write_fifo_clockdomainsrenamer2_next_value2 <= 1'd1;
				write_fifo_clockdomainsrenamer2_next_value_ce2 <= 1'd1;
				clockdomainsrenamer2_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	t_array_muxed0 <= 3'd0;
	case (rx_decoder1_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed0 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed0 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed0 <= 3'd4;
		end
		2'd3: begin
			t_array_muxed0 <= 2'd3;
		end
		3'd4: begin
			t_array_muxed0 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed0 <= 2'd2;
		end
		3'd6: begin
			t_array_muxed0 <= 3'd6;
		end
		3'd7: begin
			t_array_muxed0 <= 1'd0;
		end
		4'd8: begin
			t_array_muxed0 <= 3'd7;
		end
		4'd9: begin
			t_array_muxed0 <= 1'd1;
		end
		4'd10: begin
			t_array_muxed0 <= 3'd5;
		end
		4'd11: begin
			t_array_muxed0 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed0 <= 1'd0;
		end
		4'd13: begin
			t_array_muxed0 <= 1'd0;
		end
		4'd14: begin
			t_array_muxed0 <= 1'd0;
		end
		default: begin
			t_array_muxed0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed1 <= 3'd0;
	case (rx_decoder1_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed1 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed1 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed1 <= 1'd0;
		end
		2'd3: begin
			t_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			t_array_muxed1 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed1 <= 3'd5;
		end
		3'd6: begin
			t_array_muxed1 <= 1'd1;
		end
		3'd7: begin
			t_array_muxed1 <= 3'd7;
		end
		4'd8: begin
			t_array_muxed1 <= 1'd0;
		end
		4'd9: begin
			t_array_muxed1 <= 3'd6;
		end
		4'd10: begin
			t_array_muxed1 <= 2'd2;
		end
		4'd11: begin
			t_array_muxed1 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed1 <= 2'd3;
		end
		4'd13: begin
			t_array_muxed1 <= 3'd4;
		end
		4'd14: begin
			t_array_muxed1 <= 1'd0;
		end
		default: begin
			t_array_muxed1 <= 1'd0;
		end
	endcase
end
always @(*) begin
	f_array_muxed0 <= 3'd0;
	case (rx_decoder1_input_msb_first[3:0])
		1'd0: begin
			f_array_muxed0 <= 1'd0;
		end
		1'd1: begin
			f_array_muxed0 <= 3'd7;
		end
		2'd2: begin
			f_array_muxed0 <= 3'd4;
		end
		2'd3: begin
			f_array_muxed0 <= 2'd3;
		end
		3'd4: begin
			f_array_muxed0 <= 1'd0;
		end
		3'd5: begin
			f_array_muxed0 <= 2'd2;
		end
		3'd6: begin
			f_array_muxed0 <= 3'd6;
		end
		3'd7: begin
			f_array_muxed0 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed0 <= 3'd7;
		end
		4'd9: begin
			f_array_muxed0 <= 1'd1;
		end
		4'd10: begin
			f_array_muxed0 <= 3'd5;
		end
		4'd11: begin
			f_array_muxed0 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed0 <= 2'd3;
		end
		4'd13: begin
			f_array_muxed0 <= 3'd4;
		end
		4'd14: begin
			f_array_muxed0 <= 3'd7;
		end
		default: begin
			f_array_muxed0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed2 <= 3'd0;
	case (rx_decoder2_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed2 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed2 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed2 <= 3'd4;
		end
		2'd3: begin
			t_array_muxed2 <= 2'd3;
		end
		3'd4: begin
			t_array_muxed2 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed2 <= 2'd2;
		end
		3'd6: begin
			t_array_muxed2 <= 3'd6;
		end
		3'd7: begin
			t_array_muxed2 <= 1'd0;
		end
		4'd8: begin
			t_array_muxed2 <= 3'd7;
		end
		4'd9: begin
			t_array_muxed2 <= 1'd1;
		end
		4'd10: begin
			t_array_muxed2 <= 3'd5;
		end
		4'd11: begin
			t_array_muxed2 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed2 <= 1'd0;
		end
		4'd13: begin
			t_array_muxed2 <= 1'd0;
		end
		4'd14: begin
			t_array_muxed2 <= 1'd0;
		end
		default: begin
			t_array_muxed2 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed3 <= 3'd0;
	case (rx_decoder2_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed3 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed3 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed3 <= 1'd0;
		end
		2'd3: begin
			t_array_muxed3 <= 1'd0;
		end
		3'd4: begin
			t_array_muxed3 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed3 <= 3'd5;
		end
		3'd6: begin
			t_array_muxed3 <= 1'd1;
		end
		3'd7: begin
			t_array_muxed3 <= 3'd7;
		end
		4'd8: begin
			t_array_muxed3 <= 1'd0;
		end
		4'd9: begin
			t_array_muxed3 <= 3'd6;
		end
		4'd10: begin
			t_array_muxed3 <= 2'd2;
		end
		4'd11: begin
			t_array_muxed3 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed3 <= 2'd3;
		end
		4'd13: begin
			t_array_muxed3 <= 3'd4;
		end
		4'd14: begin
			t_array_muxed3 <= 1'd0;
		end
		default: begin
			t_array_muxed3 <= 1'd0;
		end
	endcase
end
always @(*) begin
	f_array_muxed1 <= 3'd0;
	case (rx_decoder2_input_msb_first[3:0])
		1'd0: begin
			f_array_muxed1 <= 1'd0;
		end
		1'd1: begin
			f_array_muxed1 <= 3'd7;
		end
		2'd2: begin
			f_array_muxed1 <= 3'd4;
		end
		2'd3: begin
			f_array_muxed1 <= 2'd3;
		end
		3'd4: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd5: begin
			f_array_muxed1 <= 2'd2;
		end
		3'd6: begin
			f_array_muxed1 <= 3'd6;
		end
		3'd7: begin
			f_array_muxed1 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed1 <= 3'd7;
		end
		4'd9: begin
			f_array_muxed1 <= 1'd1;
		end
		4'd10: begin
			f_array_muxed1 <= 3'd5;
		end
		4'd11: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed1 <= 2'd3;
		end
		4'd13: begin
			f_array_muxed1 <= 3'd4;
		end
		4'd14: begin
			f_array_muxed1 <= 3'd7;
		end
		default: begin
			f_array_muxed1 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed4 <= 3'd0;
	case (rx_decoder3_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed4 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed4 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed4 <= 3'd4;
		end
		2'd3: begin
			t_array_muxed4 <= 2'd3;
		end
		3'd4: begin
			t_array_muxed4 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed4 <= 2'd2;
		end
		3'd6: begin
			t_array_muxed4 <= 3'd6;
		end
		3'd7: begin
			t_array_muxed4 <= 1'd0;
		end
		4'd8: begin
			t_array_muxed4 <= 3'd7;
		end
		4'd9: begin
			t_array_muxed4 <= 1'd1;
		end
		4'd10: begin
			t_array_muxed4 <= 3'd5;
		end
		4'd11: begin
			t_array_muxed4 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed4 <= 1'd0;
		end
		4'd13: begin
			t_array_muxed4 <= 1'd0;
		end
		4'd14: begin
			t_array_muxed4 <= 1'd0;
		end
		default: begin
			t_array_muxed4 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed5 <= 3'd0;
	case (rx_decoder3_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed5 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed5 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed5 <= 1'd0;
		end
		2'd3: begin
			t_array_muxed5 <= 1'd0;
		end
		3'd4: begin
			t_array_muxed5 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed5 <= 3'd5;
		end
		3'd6: begin
			t_array_muxed5 <= 1'd1;
		end
		3'd7: begin
			t_array_muxed5 <= 3'd7;
		end
		4'd8: begin
			t_array_muxed5 <= 1'd0;
		end
		4'd9: begin
			t_array_muxed5 <= 3'd6;
		end
		4'd10: begin
			t_array_muxed5 <= 2'd2;
		end
		4'd11: begin
			t_array_muxed5 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed5 <= 2'd3;
		end
		4'd13: begin
			t_array_muxed5 <= 3'd4;
		end
		4'd14: begin
			t_array_muxed5 <= 1'd0;
		end
		default: begin
			t_array_muxed5 <= 1'd0;
		end
	endcase
end
always @(*) begin
	f_array_muxed2 <= 3'd0;
	case (rx_decoder3_input_msb_first[3:0])
		1'd0: begin
			f_array_muxed2 <= 1'd0;
		end
		1'd1: begin
			f_array_muxed2 <= 3'd7;
		end
		2'd2: begin
			f_array_muxed2 <= 3'd4;
		end
		2'd3: begin
			f_array_muxed2 <= 2'd3;
		end
		3'd4: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd5: begin
			f_array_muxed2 <= 2'd2;
		end
		3'd6: begin
			f_array_muxed2 <= 3'd6;
		end
		3'd7: begin
			f_array_muxed2 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed2 <= 3'd7;
		end
		4'd9: begin
			f_array_muxed2 <= 1'd1;
		end
		4'd10: begin
			f_array_muxed2 <= 3'd5;
		end
		4'd11: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed2 <= 2'd3;
		end
		4'd13: begin
			f_array_muxed2 <= 3'd4;
		end
		4'd14: begin
			f_array_muxed2 <= 3'd7;
		end
		default: begin
			f_array_muxed2 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed6 <= 3'd0;
	case (rx_decoder4_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed6 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed6 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed6 <= 3'd4;
		end
		2'd3: begin
			t_array_muxed6 <= 2'd3;
		end
		3'd4: begin
			t_array_muxed6 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed6 <= 2'd2;
		end
		3'd6: begin
			t_array_muxed6 <= 3'd6;
		end
		3'd7: begin
			t_array_muxed6 <= 1'd0;
		end
		4'd8: begin
			t_array_muxed6 <= 3'd7;
		end
		4'd9: begin
			t_array_muxed6 <= 1'd1;
		end
		4'd10: begin
			t_array_muxed6 <= 3'd5;
		end
		4'd11: begin
			t_array_muxed6 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed6 <= 1'd0;
		end
		4'd13: begin
			t_array_muxed6 <= 1'd0;
		end
		4'd14: begin
			t_array_muxed6 <= 1'd0;
		end
		default: begin
			t_array_muxed6 <= 1'd0;
		end
	endcase
end
always @(*) begin
	t_array_muxed7 <= 3'd0;
	case (rx_decoder4_input_msb_first[3:0])
		1'd0: begin
			t_array_muxed7 <= 1'd0;
		end
		1'd1: begin
			t_array_muxed7 <= 1'd0;
		end
		2'd2: begin
			t_array_muxed7 <= 1'd0;
		end
		2'd3: begin
			t_array_muxed7 <= 1'd0;
		end
		3'd4: begin
			t_array_muxed7 <= 1'd0;
		end
		3'd5: begin
			t_array_muxed7 <= 3'd5;
		end
		3'd6: begin
			t_array_muxed7 <= 1'd1;
		end
		3'd7: begin
			t_array_muxed7 <= 3'd7;
		end
		4'd8: begin
			t_array_muxed7 <= 1'd0;
		end
		4'd9: begin
			t_array_muxed7 <= 3'd6;
		end
		4'd10: begin
			t_array_muxed7 <= 2'd2;
		end
		4'd11: begin
			t_array_muxed7 <= 1'd0;
		end
		4'd12: begin
			t_array_muxed7 <= 2'd3;
		end
		4'd13: begin
			t_array_muxed7 <= 3'd4;
		end
		4'd14: begin
			t_array_muxed7 <= 1'd0;
		end
		default: begin
			t_array_muxed7 <= 1'd0;
		end
	endcase
end
always @(*) begin
	f_array_muxed3 <= 3'd0;
	case (rx_decoder4_input_msb_first[3:0])
		1'd0: begin
			f_array_muxed3 <= 1'd0;
		end
		1'd1: begin
			f_array_muxed3 <= 3'd7;
		end
		2'd2: begin
			f_array_muxed3 <= 3'd4;
		end
		2'd3: begin
			f_array_muxed3 <= 2'd3;
		end
		3'd4: begin
			f_array_muxed3 <= 1'd0;
		end
		3'd5: begin
			f_array_muxed3 <= 2'd2;
		end
		3'd6: begin
			f_array_muxed3 <= 3'd6;
		end
		3'd7: begin
			f_array_muxed3 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed3 <= 3'd7;
		end
		4'd9: begin
			f_array_muxed3 <= 1'd1;
		end
		4'd10: begin
			f_array_muxed3 <= 3'd5;
		end
		4'd11: begin
			f_array_muxed3 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed3 <= 2'd3;
		end
		4'd13: begin
			f_array_muxed3 <= 3'd4;
		end
		4'd14: begin
			f_array_muxed3 <= 3'd7;
		end
		default: begin
			f_array_muxed3 <= 1'd0;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed0 <= 6'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			rhs_array_muxed0 <= 5'd24;
		end
		1'd1: begin
			rhs_array_muxed0 <= 6'd34;
		end
		2'd2: begin
			rhs_array_muxed0 <= 5'd18;
		end
		2'd3: begin
			rhs_array_muxed0 <= 6'd49;
		end
		3'd4: begin
			rhs_array_muxed0 <= 4'd10;
		end
		3'd5: begin
			rhs_array_muxed0 <= 6'd41;
		end
		3'd6: begin
			rhs_array_muxed0 <= 5'd25;
		end
		3'd7: begin
			rhs_array_muxed0 <= 3'd7;
		end
		4'd8: begin
			rhs_array_muxed0 <= 3'd6;
		end
		4'd9: begin
			rhs_array_muxed0 <= 6'd37;
		end
		4'd10: begin
			rhs_array_muxed0 <= 5'd21;
		end
		4'd11: begin
			rhs_array_muxed0 <= 6'd52;
		end
		4'd12: begin
			rhs_array_muxed0 <= 4'd13;
		end
		4'd13: begin
			rhs_array_muxed0 <= 6'd44;
		end
		4'd14: begin
			rhs_array_muxed0 <= 5'd28;
		end
		4'd15: begin
			rhs_array_muxed0 <= 6'd40;
		end
		5'd16: begin
			rhs_array_muxed0 <= 6'd36;
		end
		5'd17: begin
			rhs_array_muxed0 <= 6'd35;
		end
		5'd18: begin
			rhs_array_muxed0 <= 5'd19;
		end
		5'd19: begin
			rhs_array_muxed0 <= 6'd50;
		end
		5'd20: begin
			rhs_array_muxed0 <= 4'd11;
		end
		5'd21: begin
			rhs_array_muxed0 <= 6'd42;
		end
		5'd22: begin
			rhs_array_muxed0 <= 5'd26;
		end
		5'd23: begin
			rhs_array_muxed0 <= 3'd5;
		end
		5'd24: begin
			rhs_array_muxed0 <= 4'd12;
		end
		5'd25: begin
			rhs_array_muxed0 <= 6'd38;
		end
		5'd26: begin
			rhs_array_muxed0 <= 5'd22;
		end
		5'd27: begin
			rhs_array_muxed0 <= 4'd9;
		end
		5'd28: begin
			rhs_array_muxed0 <= 4'd14;
		end
		5'd29: begin
			rhs_array_muxed0 <= 5'd17;
		end
		5'd30: begin
			rhs_array_muxed0 <= 6'd33;
		end
		default: begin
			rhs_array_muxed0 <= 5'd20;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed1 <= 1'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			rhs_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed1 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed1 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd8: begin
			rhs_array_muxed1 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed1 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed1 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed1 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed1 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed1 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed1 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed1 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed1 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed1 <= 1'd1;
		end
		default: begin
			rhs_array_muxed1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed2 <= 1'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			rhs_array_muxed2 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed2 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed2 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed2 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed2 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed2 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed2 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed2 <= 1'd1;
		end
		4'd8: begin
			rhs_array_muxed2 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed2 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed2 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed2 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed2 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed2 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed2 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed2 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed2 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed2 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed2 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed2 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed2 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed2 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed2 <= 1'd1;
		end
		default: begin
			rhs_array_muxed2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed3 <= 4'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed3 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed3 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed3 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed3 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed3 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed3 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed3 <= 3'd6;
		end
		default: begin
			rhs_array_muxed3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed4 <= 1'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed4 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed4 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed4 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed4 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed4 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed4 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed4 <= 1'd0;
		end
		default: begin
			rhs_array_muxed4 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed5 <= 1'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed5 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed5 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed5 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed5 <= 1'd1;
		end
		3'd4: begin
			rhs_array_muxed5 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed5 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed5 <= 1'd0;
		end
		default: begin
			rhs_array_muxed5 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed6 <= 6'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			rhs_array_muxed6 <= 5'd24;
		end
		1'd1: begin
			rhs_array_muxed6 <= 6'd34;
		end
		2'd2: begin
			rhs_array_muxed6 <= 5'd18;
		end
		2'd3: begin
			rhs_array_muxed6 <= 6'd49;
		end
		3'd4: begin
			rhs_array_muxed6 <= 4'd10;
		end
		3'd5: begin
			rhs_array_muxed6 <= 6'd41;
		end
		3'd6: begin
			rhs_array_muxed6 <= 5'd25;
		end
		3'd7: begin
			rhs_array_muxed6 <= 3'd7;
		end
		4'd8: begin
			rhs_array_muxed6 <= 3'd6;
		end
		4'd9: begin
			rhs_array_muxed6 <= 6'd37;
		end
		4'd10: begin
			rhs_array_muxed6 <= 5'd21;
		end
		4'd11: begin
			rhs_array_muxed6 <= 6'd52;
		end
		4'd12: begin
			rhs_array_muxed6 <= 4'd13;
		end
		4'd13: begin
			rhs_array_muxed6 <= 6'd44;
		end
		4'd14: begin
			rhs_array_muxed6 <= 5'd28;
		end
		4'd15: begin
			rhs_array_muxed6 <= 6'd40;
		end
		5'd16: begin
			rhs_array_muxed6 <= 6'd36;
		end
		5'd17: begin
			rhs_array_muxed6 <= 6'd35;
		end
		5'd18: begin
			rhs_array_muxed6 <= 5'd19;
		end
		5'd19: begin
			rhs_array_muxed6 <= 6'd50;
		end
		5'd20: begin
			rhs_array_muxed6 <= 4'd11;
		end
		5'd21: begin
			rhs_array_muxed6 <= 6'd42;
		end
		5'd22: begin
			rhs_array_muxed6 <= 5'd26;
		end
		5'd23: begin
			rhs_array_muxed6 <= 3'd5;
		end
		5'd24: begin
			rhs_array_muxed6 <= 4'd12;
		end
		5'd25: begin
			rhs_array_muxed6 <= 6'd38;
		end
		5'd26: begin
			rhs_array_muxed6 <= 5'd22;
		end
		5'd27: begin
			rhs_array_muxed6 <= 4'd9;
		end
		5'd28: begin
			rhs_array_muxed6 <= 4'd14;
		end
		5'd29: begin
			rhs_array_muxed6 <= 5'd17;
		end
		5'd30: begin
			rhs_array_muxed6 <= 6'd33;
		end
		default: begin
			rhs_array_muxed6 <= 5'd20;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed7 <= 1'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			rhs_array_muxed7 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed7 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed7 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed7 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd8: begin
			rhs_array_muxed7 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed7 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed7 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed7 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed7 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed7 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed7 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed7 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed7 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed7 <= 1'd1;
		end
		default: begin
			rhs_array_muxed7 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed8 <= 1'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			rhs_array_muxed8 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed8 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed8 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed8 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed8 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed8 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed8 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed8 <= 1'd1;
		end
		4'd8: begin
			rhs_array_muxed8 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed8 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed8 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed8 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed8 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed8 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed8 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed8 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed8 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed8 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed8 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed8 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed8 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed8 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed8 <= 1'd1;
		end
		default: begin
			rhs_array_muxed8 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed9 <= 4'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed9 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed9 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed9 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed9 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed9 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed9 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed9 <= 3'd6;
		end
		default: begin
			rhs_array_muxed9 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed10 <= 1'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed10 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed10 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed10 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed10 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed10 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed10 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed10 <= 1'd0;
		end
		default: begin
			rhs_array_muxed10 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed11 <= 1'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed11 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed11 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed11 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed11 <= 1'd1;
		end
		3'd4: begin
			rhs_array_muxed11 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed11 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed11 <= 1'd0;
		end
		default: begin
			rhs_array_muxed11 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed12 <= 6'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			rhs_array_muxed12 <= 5'd24;
		end
		1'd1: begin
			rhs_array_muxed12 <= 6'd34;
		end
		2'd2: begin
			rhs_array_muxed12 <= 5'd18;
		end
		2'd3: begin
			rhs_array_muxed12 <= 6'd49;
		end
		3'd4: begin
			rhs_array_muxed12 <= 4'd10;
		end
		3'd5: begin
			rhs_array_muxed12 <= 6'd41;
		end
		3'd6: begin
			rhs_array_muxed12 <= 5'd25;
		end
		3'd7: begin
			rhs_array_muxed12 <= 3'd7;
		end
		4'd8: begin
			rhs_array_muxed12 <= 3'd6;
		end
		4'd9: begin
			rhs_array_muxed12 <= 6'd37;
		end
		4'd10: begin
			rhs_array_muxed12 <= 5'd21;
		end
		4'd11: begin
			rhs_array_muxed12 <= 6'd52;
		end
		4'd12: begin
			rhs_array_muxed12 <= 4'd13;
		end
		4'd13: begin
			rhs_array_muxed12 <= 6'd44;
		end
		4'd14: begin
			rhs_array_muxed12 <= 5'd28;
		end
		4'd15: begin
			rhs_array_muxed12 <= 6'd40;
		end
		5'd16: begin
			rhs_array_muxed12 <= 6'd36;
		end
		5'd17: begin
			rhs_array_muxed12 <= 6'd35;
		end
		5'd18: begin
			rhs_array_muxed12 <= 5'd19;
		end
		5'd19: begin
			rhs_array_muxed12 <= 6'd50;
		end
		5'd20: begin
			rhs_array_muxed12 <= 4'd11;
		end
		5'd21: begin
			rhs_array_muxed12 <= 6'd42;
		end
		5'd22: begin
			rhs_array_muxed12 <= 5'd26;
		end
		5'd23: begin
			rhs_array_muxed12 <= 3'd5;
		end
		5'd24: begin
			rhs_array_muxed12 <= 4'd12;
		end
		5'd25: begin
			rhs_array_muxed12 <= 6'd38;
		end
		5'd26: begin
			rhs_array_muxed12 <= 5'd22;
		end
		5'd27: begin
			rhs_array_muxed12 <= 4'd9;
		end
		5'd28: begin
			rhs_array_muxed12 <= 4'd14;
		end
		5'd29: begin
			rhs_array_muxed12 <= 5'd17;
		end
		5'd30: begin
			rhs_array_muxed12 <= 6'd33;
		end
		default: begin
			rhs_array_muxed12 <= 5'd20;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed13 <= 1'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			rhs_array_muxed13 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed13 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed13 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed13 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed13 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed13 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed13 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd8: begin
			rhs_array_muxed13 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed13 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed13 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed13 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed13 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed13 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed13 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed13 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed13 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed13 <= 1'd1;
		end
		default: begin
			rhs_array_muxed13 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed14 <= 1'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			rhs_array_muxed14 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed14 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed14 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed14 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed14 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed14 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed14 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed14 <= 1'd1;
		end
		4'd8: begin
			rhs_array_muxed14 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed14 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed14 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed14 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed14 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed14 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed14 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed14 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed14 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed14 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed14 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed14 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed14 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed14 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed14 <= 1'd1;
		end
		default: begin
			rhs_array_muxed14 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed15 <= 4'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed15 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed15 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed15 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed15 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed15 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed15 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed15 <= 3'd6;
		end
		default: begin
			rhs_array_muxed15 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed16 <= 1'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed16 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed16 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed16 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed16 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed16 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed16 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed16 <= 1'd0;
		end
		default: begin
			rhs_array_muxed16 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed17 <= 1'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed17 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed17 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed17 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed17 <= 1'd1;
		end
		3'd4: begin
			rhs_array_muxed17 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed17 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed17 <= 1'd0;
		end
		default: begin
			rhs_array_muxed17 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed18 <= 6'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			rhs_array_muxed18 <= 5'd24;
		end
		1'd1: begin
			rhs_array_muxed18 <= 6'd34;
		end
		2'd2: begin
			rhs_array_muxed18 <= 5'd18;
		end
		2'd3: begin
			rhs_array_muxed18 <= 6'd49;
		end
		3'd4: begin
			rhs_array_muxed18 <= 4'd10;
		end
		3'd5: begin
			rhs_array_muxed18 <= 6'd41;
		end
		3'd6: begin
			rhs_array_muxed18 <= 5'd25;
		end
		3'd7: begin
			rhs_array_muxed18 <= 3'd7;
		end
		4'd8: begin
			rhs_array_muxed18 <= 3'd6;
		end
		4'd9: begin
			rhs_array_muxed18 <= 6'd37;
		end
		4'd10: begin
			rhs_array_muxed18 <= 5'd21;
		end
		4'd11: begin
			rhs_array_muxed18 <= 6'd52;
		end
		4'd12: begin
			rhs_array_muxed18 <= 4'd13;
		end
		4'd13: begin
			rhs_array_muxed18 <= 6'd44;
		end
		4'd14: begin
			rhs_array_muxed18 <= 5'd28;
		end
		4'd15: begin
			rhs_array_muxed18 <= 6'd40;
		end
		5'd16: begin
			rhs_array_muxed18 <= 6'd36;
		end
		5'd17: begin
			rhs_array_muxed18 <= 6'd35;
		end
		5'd18: begin
			rhs_array_muxed18 <= 5'd19;
		end
		5'd19: begin
			rhs_array_muxed18 <= 6'd50;
		end
		5'd20: begin
			rhs_array_muxed18 <= 4'd11;
		end
		5'd21: begin
			rhs_array_muxed18 <= 6'd42;
		end
		5'd22: begin
			rhs_array_muxed18 <= 5'd26;
		end
		5'd23: begin
			rhs_array_muxed18 <= 3'd5;
		end
		5'd24: begin
			rhs_array_muxed18 <= 4'd12;
		end
		5'd25: begin
			rhs_array_muxed18 <= 6'd38;
		end
		5'd26: begin
			rhs_array_muxed18 <= 5'd22;
		end
		5'd27: begin
			rhs_array_muxed18 <= 4'd9;
		end
		5'd28: begin
			rhs_array_muxed18 <= 4'd14;
		end
		5'd29: begin
			rhs_array_muxed18 <= 5'd17;
		end
		5'd30: begin
			rhs_array_muxed18 <= 6'd33;
		end
		default: begin
			rhs_array_muxed18 <= 5'd20;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed19 <= 1'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			rhs_array_muxed19 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed19 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed19 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed19 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed19 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed19 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed19 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd8: begin
			rhs_array_muxed19 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed19 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed19 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed19 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed19 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed19 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed19 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed19 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed19 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed19 <= 1'd1;
		end
		default: begin
			rhs_array_muxed19 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed20 <= 1'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			rhs_array_muxed20 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed20 <= 1'd1;
		end
		2'd2: begin
			rhs_array_muxed20 <= 1'd1;
		end
		2'd3: begin
			rhs_array_muxed20 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed20 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed20 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed20 <= 1'd0;
		end
		3'd7: begin
			rhs_array_muxed20 <= 1'd1;
		end
		4'd8: begin
			rhs_array_muxed20 <= 1'd1;
		end
		4'd9: begin
			rhs_array_muxed20 <= 1'd0;
		end
		4'd10: begin
			rhs_array_muxed20 <= 1'd0;
		end
		4'd11: begin
			rhs_array_muxed20 <= 1'd0;
		end
		4'd12: begin
			rhs_array_muxed20 <= 1'd0;
		end
		4'd13: begin
			rhs_array_muxed20 <= 1'd0;
		end
		4'd14: begin
			rhs_array_muxed20 <= 1'd0;
		end
		4'd15: begin
			rhs_array_muxed20 <= 1'd1;
		end
		5'd16: begin
			rhs_array_muxed20 <= 1'd1;
		end
		5'd17: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd18: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd19: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd20: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd21: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd22: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd23: begin
			rhs_array_muxed20 <= 1'd1;
		end
		5'd24: begin
			rhs_array_muxed20 <= 1'd1;
		end
		5'd25: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd26: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd27: begin
			rhs_array_muxed20 <= 1'd1;
		end
		5'd28: begin
			rhs_array_muxed20 <= 1'd0;
		end
		5'd29: begin
			rhs_array_muxed20 <= 1'd1;
		end
		5'd30: begin
			rhs_array_muxed20 <= 1'd1;
		end
		default: begin
			rhs_array_muxed20 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed21 <= 4'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed21 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed21 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed21 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed21 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed21 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed21 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed21 <= 3'd6;
		end
		default: begin
			rhs_array_muxed21 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed22 <= 1'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed22 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed22 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed22 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed22 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed22 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed22 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed22 <= 1'd0;
		end
		default: begin
			rhs_array_muxed22 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed23 <= 1'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed23 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed23 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed23 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed23 <= 1'd1;
		end
		3'd4: begin
			rhs_array_muxed23 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed23 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed23 <= 1'd0;
		end
		default: begin
			rhs_array_muxed23 <= 1'd1;
		end
	endcase
end
assign gtp_tx_init_plllock1 = xilinxmultiregimpl0_regs1;
assign gtp_tx_init_txresetdone1 = xilinxmultiregimpl1_regs1;
assign gtp_tx_init_txdlysresetdone1 = xilinxmultiregimpl2_regs1;
assign gtp_tx_init_txphinitdone1 = xilinxmultiregimpl3_regs1;
assign gtp_tx_init_txphaligndone1 = xilinxmultiregimpl4_regs1;
assign gtp_gtprxinit_rxpmaresetdone1 = xilinxmultiregimpl5_regs1;
assign gtp_gtprxinit_plllock1 = xilinxmultiregimpl6_regs1;
assign gtp_gtprxinit_rxresetdone1 = xilinxmultiregimpl7_regs1;
assign gtp_gtprxinit_rxdlysresetdone1 = xilinxmultiregimpl8_regs1;
assign gtp_gtprxinit_rxsyncdone1 = xilinxmultiregimpl9_regs1;
assign gtp_gtprxinit_restart1 = xilinxmultiregimpl10_regs1;
assign tx_tx_init_done1 = xilinxmultiregimpl11_regs1;
assign tx_fifo_empty1 = xilinxmultiregimpl12_regs1;
assign produce_rdomain = xilinxmultiregimpl13_regs1;
assign consume_wdomain = xilinxmultiregimpl14_regs1;

always @(posedge por_clk) begin
	int_rst <= reset;
end

always @(posedge rx_clk) begin
	rx_rx_k0 <= rx_decoder1_k;
	rx_rx_k1 <= rx_decoder2_k;
	rx_rx_k2 <= rx_decoder3_k;
	rx_rx_k3 <= rx_decoder4_k;
	fsm_state <= fsm_next_state;
	if (rx_tx_ready_clockdomainsrenamer1_next_value_ce0) begin
		rx_tx_ready <= rx_tx_ready_clockdomainsrenamer1_next_value0;
	end
	if (rx_tx_data_clockdomainsrenamer1_next_value_ce1) begin
		rx_tx_data <= rx_tx_data_clockdomainsrenamer1_next_value1;
	end
	if (rx_tx_32bdone_clockdomainsrenamer1_next_value_ce2) begin
		rx_tx_32bdone <= rx_tx_32bdone_clockdomainsrenamer1_next_value2;
	end
	if (rx_byte_cnt_clockdomainsrenamer1_next_value_ce3) begin
		rx_byte_cnt <= rx_byte_cnt_clockdomainsrenamer1_next_value3;
	end
	if ((rx_tx_counter == 1'd0)) begin
		rx_tx_counter <= 5'd29;
	end else begin
		rx_tx_counter <= (rx_tx_counter - 1'd1);
	end
	tx_state <= tx_next_state;
	if (rx_tx_latch_clockdomainsrenamer1_t_next_value_ce0) begin
		rx_tx_latch <= rx_tx_latch_clockdomainsrenamer1_t_next_value0;
	end
	if (rx_tx_counter_clockdomainsrenamer1_t_next_value_ce1) begin
		rx_tx_counter <= rx_tx_counter_clockdomainsrenamer1_t_next_value1;
	end
	if (rx_tx_serial2_clockdomainsrenamer1_f_next_value_ce) begin
		rx_tx_serial2 <= rx_tx_serial2_clockdomainsrenamer1_f_next_value;
	end
	if (rx_tx_bitn_clockdomainsrenamer1_t_next_value_ce2) begin
		rx_tx_bitn <= rx_tx_bitn_clockdomainsrenamer1_t_next_value2;
	end
	if (rx_tx_done_clockdomainsrenamer1_t_next_value_ce3) begin
		rx_tx_done <= rx_tx_done_clockdomainsrenamer1_t_next_value3;
	end
	rx_decoder1_k <= 1'd0;
	if ((rx_decoder1_input_msb_first[9:4] == 4'd15)) begin
		rx_decoder1_k <= 1'd1;
		rx_decoder1_code3b <= t_array_muxed0;
	end else begin
		if ((rx_decoder1_input_msb_first[9:4] == 6'd48)) begin
			rx_decoder1_k <= 1'd1;
			rx_decoder1_code3b <= t_array_muxed1;
		end else begin
			if (((rx_decoder1_input_msb_first[3:0] == 3'd7) | (rx_decoder1_input_msb_first[3:0] == 4'd8))) begin
				if (((((((rx_decoder1_input_msb_first[9:4] != 6'd35) & (rx_decoder1_input_msb_first[9:4] != 5'd19)) & (rx_decoder1_input_msb_first[9:4] != 4'd11)) & (rx_decoder1_input_msb_first[9:4] != 6'd52)) & (rx_decoder1_input_msb_first[9:4] != 6'd44)) & (rx_decoder1_input_msb_first[9:4] != 5'd28))) begin
					rx_decoder1_k <= 1'd1;
				end
			end
			rx_decoder1_code3b <= f_array_muxed0;
		end
	end
	rx_decoder1_ones <= (((((((((rx_decoder1_input[0] + rx_decoder1_input[1]) + rx_decoder1_input[2]) + rx_decoder1_input[3]) + rx_decoder1_input[4]) + rx_decoder1_input[5]) + rx_decoder1_input[6]) + rx_decoder1_input[7]) + rx_decoder1_input[8]) + rx_decoder1_input[9]);
	rx_decoder2_k <= 1'd0;
	if ((rx_decoder2_input_msb_first[9:4] == 4'd15)) begin
		rx_decoder2_k <= 1'd1;
		rx_decoder2_code3b <= t_array_muxed2;
	end else begin
		if ((rx_decoder2_input_msb_first[9:4] == 6'd48)) begin
			rx_decoder2_k <= 1'd1;
			rx_decoder2_code3b <= t_array_muxed3;
		end else begin
			if (((rx_decoder2_input_msb_first[3:0] == 3'd7) | (rx_decoder2_input_msb_first[3:0] == 4'd8))) begin
				if (((((((rx_decoder2_input_msb_first[9:4] != 6'd35) & (rx_decoder2_input_msb_first[9:4] != 5'd19)) & (rx_decoder2_input_msb_first[9:4] != 4'd11)) & (rx_decoder2_input_msb_first[9:4] != 6'd52)) & (rx_decoder2_input_msb_first[9:4] != 6'd44)) & (rx_decoder2_input_msb_first[9:4] != 5'd28))) begin
					rx_decoder2_k <= 1'd1;
				end
			end
			rx_decoder2_code3b <= f_array_muxed1;
		end
	end
	rx_decoder2_ones <= (((((((((rx_decoder2_input[0] + rx_decoder2_input[1]) + rx_decoder2_input[2]) + rx_decoder2_input[3]) + rx_decoder2_input[4]) + rx_decoder2_input[5]) + rx_decoder2_input[6]) + rx_decoder2_input[7]) + rx_decoder2_input[8]) + rx_decoder2_input[9]);
	rx_decoder3_k <= 1'd0;
	if ((rx_decoder3_input_msb_first[9:4] == 4'd15)) begin
		rx_decoder3_k <= 1'd1;
		rx_decoder3_code3b <= t_array_muxed4;
	end else begin
		if ((rx_decoder3_input_msb_first[9:4] == 6'd48)) begin
			rx_decoder3_k <= 1'd1;
			rx_decoder3_code3b <= t_array_muxed5;
		end else begin
			if (((rx_decoder3_input_msb_first[3:0] == 3'd7) | (rx_decoder3_input_msb_first[3:0] == 4'd8))) begin
				if (((((((rx_decoder3_input_msb_first[9:4] != 6'd35) & (rx_decoder3_input_msb_first[9:4] != 5'd19)) & (rx_decoder3_input_msb_first[9:4] != 4'd11)) & (rx_decoder3_input_msb_first[9:4] != 6'd52)) & (rx_decoder3_input_msb_first[9:4] != 6'd44)) & (rx_decoder3_input_msb_first[9:4] != 5'd28))) begin
					rx_decoder3_k <= 1'd1;
				end
			end
			rx_decoder3_code3b <= f_array_muxed2;
		end
	end
	rx_decoder3_ones <= (((((((((rx_decoder3_input[0] + rx_decoder3_input[1]) + rx_decoder3_input[2]) + rx_decoder3_input[3]) + rx_decoder3_input[4]) + rx_decoder3_input[5]) + rx_decoder3_input[6]) + rx_decoder3_input[7]) + rx_decoder3_input[8]) + rx_decoder3_input[9]);
	rx_decoder4_k <= 1'd0;
	if ((rx_decoder4_input_msb_first[9:4] == 4'd15)) begin
		rx_decoder4_k <= 1'd1;
		rx_decoder4_code3b <= t_array_muxed6;
	end else begin
		if ((rx_decoder4_input_msb_first[9:4] == 6'd48)) begin
			rx_decoder4_k <= 1'd1;
			rx_decoder4_code3b <= t_array_muxed7;
		end else begin
			if (((rx_decoder4_input_msb_first[3:0] == 3'd7) | (rx_decoder4_input_msb_first[3:0] == 4'd8))) begin
				if (((((((rx_decoder4_input_msb_first[9:4] != 6'd35) & (rx_decoder4_input_msb_first[9:4] != 5'd19)) & (rx_decoder4_input_msb_first[9:4] != 4'd11)) & (rx_decoder4_input_msb_first[9:4] != 6'd52)) & (rx_decoder4_input_msb_first[9:4] != 6'd44)) & (rx_decoder4_input_msb_first[9:4] != 5'd28))) begin
					rx_decoder4_k <= 1'd1;
				end
			end
			rx_decoder4_code3b <= f_array_muxed3;
		end
	end
	rx_decoder4_ones <= (((((((((rx_decoder4_input[0] + rx_decoder4_input[1]) + rx_decoder4_input[2]) + rx_decoder4_input[3]) + rx_decoder4_input[4]) + rx_decoder4_input[5]) + rx_decoder4_input[6]) + rx_decoder4_input[7]) + rx_decoder4_input[8]) + rx_decoder4_input[9]);
	if (rx_rst) begin
		rx_rx_k0 <= 1'd0;
		rx_rx_k1 <= 1'd0;
		rx_rx_k2 <= 1'd0;
		rx_rx_k3 <= 1'd0;
		rx_decoder1_k <= 1'd0;
		rx_decoder1_code3b <= 3'd0;
		rx_decoder1_ones <= 4'd0;
		rx_decoder2_k <= 1'd0;
		rx_decoder2_code3b <= 3'd0;
		rx_decoder2_ones <= 4'd0;
		rx_decoder3_k <= 1'd0;
		rx_decoder3_code3b <= 3'd0;
		rx_decoder3_ones <= 4'd0;
		rx_decoder4_k <= 1'd0;
		rx_decoder4_code3b <= 3'd0;
		rx_decoder4_ones <= 4'd0;
		rx_tx_32bdone <= 1'd0;
		rx_tx_counter <= 5'd0;
		rx_tx_serial2 <= 1'd1;
		rx_tx_data <= 8'd0;
		rx_tx_bitn <= 3'd0;
		rx_tx_ready <= 1'd0;
		rx_tx_latch <= 8'd0;
		rx_tx_done <= 1'd0;
		rx_byte_cnt <= 4'd0;
		fsm_state <= 2'd0;
		tx_state <= 2'd0;
	end
end

always @(posedge sys_clk) begin
	gtp_tx_init_gttxreset0 <= gtp_tx_init_gttxreset1;
	gtp_tx_init_txdlysreset0 <= gtp_tx_init_txdlysreset1;
	gtp_tx_init_txphinit0 <= gtp_tx_init_txphinit1;
	gtp_tx_init_txphalign0 <= gtp_tx_init_txphalign1;
	gtp_tx_init_txdlyen0 <= gtp_tx_init_txdlyen1;
	gtp_tx_init_txuserrdy0 <= gtp_tx_init_txuserrdy1;
	gtp_tx_init_done1 <= gtp_tx_init_done2;
	gtp_tx_init_txphaligndone_r <= gtp_tx_init_txphaligndone1;
	if (gtp_tx_init_pll_reset_timer_wait) begin
		if ((~gtp_tx_init_pll_reset_timer_done)) begin
			gtp_tx_init_pll_reset_timer_count <= (gtp_tx_init_pll_reset_timer_count - 1'd1);
		end
	end else begin
		gtp_tx_init_pll_reset_timer_count <= 7'd120;
	end
	gtptxinit_state <= gtptxinit_next_state;
	if (gtp_tx_init_reset) begin
		gtptxinit_state <= 3'd0;
	end
	if (gtp_tx_init_ready_timer_wait) begin
		if ((~gtp_tx_init_ready_timer_done)) begin
			gtp_tx_init_ready_timer_count <= (gtp_tx_init_ready_timer_count - 1'd1);
		end
	end else begin
		gtp_tx_init_ready_timer_count <= 18'd240000;
	end
	if (sys_rst) begin
		gtp_tx_init_done1 <= 1'd0;
		gtp_tx_init_gttxreset0 <= 1'd0;
		gtp_tx_init_txdlysreset0 <= 1'd0;
		gtp_tx_init_txphinit0 <= 1'd0;
		gtp_tx_init_txphalign0 <= 1'd0;
		gtp_tx_init_txdlyen0 <= 1'd0;
		gtp_tx_init_txuserrdy0 <= 1'd0;
		gtp_tx_init_pll_reset_timer_count <= 7'd120;
		gtp_tx_init_ready_timer_count <= 18'd240000;
		gtp_tx_init_txphaligndone_r <= 1'd1;
		gtptxinit_state <= 3'd0;
	end
	xilinxmultiregimpl0_regs0 <= gtp_tx_init_plllock0;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= gtp_tx_init_txresetdone0;
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= gtp_tx_init_txdlysresetdone0;
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
	xilinxmultiregimpl3_regs0 <= gtp_tx_init_txphinitdone0;
	xilinxmultiregimpl3_regs1 <= xilinxmultiregimpl3_regs0;
	xilinxmultiregimpl4_regs0 <= gtp_tx_init_txphaligndone0;
	xilinxmultiregimpl4_regs1 <= xilinxmultiregimpl4_regs0;
end

always @(posedge tx_clk) begin
	gtp_gtprxinit_rxpmaresetdone_r <= gtp_gtprxinit_rxpmaresetdone1;
	gtp_gtprxinit_gtrxreset0 <= gtp_gtprxinit_gtrxreset1;
	gtp_gtprxinit_gtrxpd0 <= gtp_gtprxinit_gtrxpd1;
	gtp_gtprxinit_rxdlysreset0 <= gtp_gtprxinit_rxdlysreset1;
	gtp_gtprxinit_rxphalign0 <= gtp_gtprxinit_rxphalign1;
	gtp_gtprxinit_rxdlyen0 <= gtp_gtprxinit_rxdlyen1;
	gtp_gtprxinit_rxuserrdy0 <= gtp_gtprxinit_rxuserrdy1;
	if (gtp_gtprxinit_pll_reset_timer_wait) begin
		if ((~gtp_gtprxinit_pll_reset_timer_done)) begin
			gtp_gtprxinit_pll_reset_timer_count <= (gtp_gtprxinit_pll_reset_timer_count - 1'd1);
		end
	end else begin
		gtp_gtprxinit_pll_reset_timer_count <= 6'd60;
	end
	clockdomainsrenamer_state <= clockdomainsrenamer_next_state;
	if (gtp_gtprxinit_rxphdlypd_gtp_next_value_ce0) begin
		gtp_gtprxinit_rxphdlypd <= gtp_gtprxinit_rxphdlypd_gtp_next_value0;
	end
	if (gtp_gtprxinit_drpvalue_gtp_next_value_ce1) begin
		gtp_gtprxinit_drpvalue <= gtp_gtprxinit_drpvalue_gtp_next_value1;
	end
	if (gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value_ce2) begin
		gtp_gtprxinit_pll_rxusrclk_rst <= gtp_gtprxinit_pll_rxusrclk_rst_gtp_next_value2;
	end
	if (gtp_gtprxinit_reset) begin
		gtp_gtprxinit_rxphdlypd <= 1'd1;
		gtp_gtprxinit_pll_rxusrclk_rst <= 1'd0;
		gtp_gtprxinit_drpvalue <= 16'd0;
		clockdomainsrenamer_state <= 4'd0;
	end
	if (gtp_gtprxinit_cdr_stable_timer_wait) begin
		if ((~gtp_gtprxinit_cdr_stable_timer_done)) begin
			gtp_gtprxinit_cdr_stable_timer_count <= (gtp_gtprxinit_cdr_stable_timer_count - 1'd1);
		end
	end else begin
		gtp_gtprxinit_cdr_stable_timer_count <= 11'd1024;
	end
	graycounter1_q_binary <= graycounter1_q_next_binary;
	graycounter1_q <= graycounter1_q_next;
	tx_singleencoder0_disp_in <= tx_singleencoder3_disp_out;
	tx_output0 <= tx_singleencoder0_output;
	tx_disparity0 <= tx_singleencoder0_disp_out;
	tx_output1 <= tx_singleencoder1_output;
	tx_disparity1 <= tx_singleencoder1_disp_out;
	tx_output2 <= tx_singleencoder2_output;
	tx_disparity2 <= tx_singleencoder2_disp_out;
	tx_output3 <= tx_singleencoder3_output;
	tx_disparity3 <= tx_singleencoder3_disp_out;
	if ((tx_singleencoder0_k & (tx_singleencoder0_d[4:0] == 5'd28))) begin
		tx_singleencoder0_code6b <= 6'd48;
		tx_singleencoder0_code6b_unbalanced <= 1'd1;
		tx_singleencoder0_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder0_code6b <= rhs_array_muxed0;
		tx_singleencoder0_code6b_unbalanced <= rhs_array_muxed1;
		tx_singleencoder0_code6b_flip <= rhs_array_muxed2;
	end
	tx_singleencoder0_code4b <= rhs_array_muxed3;
	tx_singleencoder0_code4b_unbalanced <= rhs_array_muxed4;
	if (tx_singleencoder0_k) begin
		tx_singleencoder0_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder0_code4b_flip <= rhs_array_muxed5;
	end
	tx_singleencoder0_alt7_rd0 <= 1'd0;
	tx_singleencoder0_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder0_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder0_d[4:0] == 5'd17) | (tx_singleencoder0_d[4:0] == 5'd18)) | (tx_singleencoder0_d[4:0] == 5'd20))) begin
			tx_singleencoder0_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder0_d[4:0] == 4'd11) | (tx_singleencoder0_d[4:0] == 4'd13)) | (tx_singleencoder0_d[4:0] == 4'd14))) begin
			tx_singleencoder0_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder0_k) begin
			tx_singleencoder0_alt7_rd0 <= 1'd1;
			tx_singleencoder0_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder1_k & (tx_singleencoder1_d[4:0] == 5'd28))) begin
		tx_singleencoder1_code6b <= 6'd48;
		tx_singleencoder1_code6b_unbalanced <= 1'd1;
		tx_singleencoder1_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder1_code6b <= rhs_array_muxed6;
		tx_singleencoder1_code6b_unbalanced <= rhs_array_muxed7;
		tx_singleencoder1_code6b_flip <= rhs_array_muxed8;
	end
	tx_singleencoder1_code4b <= rhs_array_muxed9;
	tx_singleencoder1_code4b_unbalanced <= rhs_array_muxed10;
	if (tx_singleencoder1_k) begin
		tx_singleencoder1_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder1_code4b_flip <= rhs_array_muxed11;
	end
	tx_singleencoder1_alt7_rd0 <= 1'd0;
	tx_singleencoder1_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder1_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder1_d[4:0] == 5'd17) | (tx_singleencoder1_d[4:0] == 5'd18)) | (tx_singleencoder1_d[4:0] == 5'd20))) begin
			tx_singleencoder1_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder1_d[4:0] == 4'd11) | (tx_singleencoder1_d[4:0] == 4'd13)) | (tx_singleencoder1_d[4:0] == 4'd14))) begin
			tx_singleencoder1_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder1_k) begin
			tx_singleencoder1_alt7_rd0 <= 1'd1;
			tx_singleencoder1_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder2_k & (tx_singleencoder2_d[4:0] == 5'd28))) begin
		tx_singleencoder2_code6b <= 6'd48;
		tx_singleencoder2_code6b_unbalanced <= 1'd1;
		tx_singleencoder2_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder2_code6b <= rhs_array_muxed12;
		tx_singleencoder2_code6b_unbalanced <= rhs_array_muxed13;
		tx_singleencoder2_code6b_flip <= rhs_array_muxed14;
	end
	tx_singleencoder2_code4b <= rhs_array_muxed15;
	tx_singleencoder2_code4b_unbalanced <= rhs_array_muxed16;
	if (tx_singleencoder2_k) begin
		tx_singleencoder2_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder2_code4b_flip <= rhs_array_muxed17;
	end
	tx_singleencoder2_alt7_rd0 <= 1'd0;
	tx_singleencoder2_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder2_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder2_d[4:0] == 5'd17) | (tx_singleencoder2_d[4:0] == 5'd18)) | (tx_singleencoder2_d[4:0] == 5'd20))) begin
			tx_singleencoder2_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder2_d[4:0] == 4'd11) | (tx_singleencoder2_d[4:0] == 4'd13)) | (tx_singleencoder2_d[4:0] == 4'd14))) begin
			tx_singleencoder2_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder2_k) begin
			tx_singleencoder2_alt7_rd0 <= 1'd1;
			tx_singleencoder2_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder3_k & (tx_singleencoder3_d[4:0] == 5'd28))) begin
		tx_singleencoder3_code6b <= 6'd48;
		tx_singleencoder3_code6b_unbalanced <= 1'd1;
		tx_singleencoder3_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder3_code6b <= rhs_array_muxed18;
		tx_singleencoder3_code6b_unbalanced <= rhs_array_muxed19;
		tx_singleencoder3_code6b_flip <= rhs_array_muxed20;
	end
	tx_singleencoder3_code4b <= rhs_array_muxed21;
	tx_singleencoder3_code4b_unbalanced <= rhs_array_muxed22;
	if (tx_singleencoder3_k) begin
		tx_singleencoder3_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder3_code4b_flip <= rhs_array_muxed23;
	end
	tx_singleencoder3_alt7_rd0 <= 1'd0;
	tx_singleencoder3_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder3_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder3_d[4:0] == 5'd17) | (tx_singleencoder3_d[4:0] == 5'd18)) | (tx_singleencoder3_d[4:0] == 5'd20))) begin
			tx_singleencoder3_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder3_d[4:0] == 4'd11) | (tx_singleencoder3_d[4:0] == 4'd13)) | (tx_singleencoder3_d[4:0] == 4'd14))) begin
			tx_singleencoder3_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder3_k) begin
			tx_singleencoder3_alt7_rd0 <= 1'd1;
			tx_singleencoder3_alt7_rd1 <= 1'd1;
		end
	end
	if (tx_crc_encoder_i_data_strobe) begin
		tx_crc_encoder_crc_cur <= tx_crc_encoder_crc_next;
	end
	if (tx_crc_encoder_reset) begin
		tx_crc_encoder_crc_cur <= 20'd1048575;
	end
	clockdomainsrenamer0_state <= clockdomainsrenamer0_next_state;
	if (tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value_ce0) begin
		tx_stream_controller_fifo_re <= tx_stream_controller_fifo_re_clockdomainsrenamer0_t_next_value0;
	end
	if (tx_stream_controller_sop_clockdomainsrenamer0_t_next_value_ce1) begin
		tx_stream_controller_sop <= tx_stream_controller_sop_clockdomainsrenamer0_t_next_value1;
	end
	if (tx_stream_controller_idle_clockdomainsrenamer0_t_next_value_ce2) begin
		tx_stream_controller_idle <= tx_stream_controller_idle_clockdomainsrenamer0_t_next_value2;
	end
	if (tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value_ce0) begin
		tx_stream_controller_encoder_ready <= tx_stream_controller_encoder_ready_clockdomainsrenamer0_next_value0;
	end
	if (tx_stream_controller_intermediate_clockdomainsrenamer0_next_value_ce1) begin
		tx_stream_controller_intermediate <= tx_stream_controller_intermediate_clockdomainsrenamer0_next_value1;
	end
	if (tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value_ce2) begin
		tx_stream_controller_strobe_crc <= tx_stream_controller_strobe_crc_clockdomainsrenamer0_next_value2;
	end
	if (tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value_ce0) begin
		tx_stream_controller_aux_ign <= tx_stream_controller_aux_ign_clockdomainsrenamer0_cases_next_value0;
	end
	if (tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value_ce1) begin
		tx_stream_controller_eop <= tx_stream_controller_eop_clockdomainsrenamer0_cases_next_value1;
	end
	if (tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value_ce2) begin
		tx_stream_controller_reset_crc <= tx_stream_controller_reset_crc_clockdomainsrenamer0_cases_next_value2;
	end
	if (tx_stream_controller_reset) begin
		tx_stream_controller_sop <= 1'd0;
		tx_stream_controller_eop <= 1'd0;
		tx_stream_controller_idle <= 1'd0;
		tx_stream_controller_intermediate <= 1'd0;
		tx_stream_controller_encoder_ready <= 1'd0;
		tx_stream_controller_fifo_re <= 1'd0;
		tx_stream_controller_strobe_crc <= 1'd0;
		tx_stream_controller_reset_crc <= 1'd0;
		tx_stream_controller_aux_ign <= 1'd0;
		clockdomainsrenamer0_state <= 3'd0;
	end
	if (tx_rst) begin
		gtp_gtprxinit_gtrxreset0 <= 1'd0;
		gtp_gtprxinit_gtrxpd0 <= 1'd0;
		gtp_gtprxinit_rxdlysreset0 <= 1'd0;
		gtp_gtprxinit_rxphalign0 <= 1'd0;
		gtp_gtprxinit_rxdlyen0 <= 1'd0;
		gtp_gtprxinit_rxuserrdy0 <= 1'd0;
		gtp_gtprxinit_rxphdlypd <= 1'd1;
		gtp_gtprxinit_pll_rxusrclk_rst <= 1'd0;
		gtp_gtprxinit_drpvalue <= 16'd0;
		gtp_gtprxinit_rxpmaresetdone_r <= 1'd0;
		gtp_gtprxinit_pll_reset_timer_count <= 6'd60;
		gtp_gtprxinit_cdr_stable_timer_count <= 11'd1024;
		tx_output0 <= 10'd0;
		tx_output1 <= 10'd0;
		tx_output2 <= 10'd0;
		tx_output3 <= 10'd0;
		tx_disparity0 <= 1'd0;
		tx_disparity1 <= 1'd0;
		tx_disparity2 <= 1'd0;
		tx_disparity3 <= 1'd0;
		tx_singleencoder0_disp_in <= 1'd0;
		tx_singleencoder0_code6b <= 6'd0;
		tx_singleencoder0_code6b_unbalanced <= 1'd0;
		tx_singleencoder0_code6b_flip <= 1'd0;
		tx_singleencoder0_code4b <= 4'd0;
		tx_singleencoder0_code4b_unbalanced <= 1'd0;
		tx_singleencoder0_code4b_flip <= 1'd0;
		tx_singleencoder0_alt7_rd0 <= 1'd0;
		tx_singleencoder0_alt7_rd1 <= 1'd0;
		tx_singleencoder1_code6b <= 6'd0;
		tx_singleencoder1_code6b_unbalanced <= 1'd0;
		tx_singleencoder1_code6b_flip <= 1'd0;
		tx_singleencoder1_code4b <= 4'd0;
		tx_singleencoder1_code4b_unbalanced <= 1'd0;
		tx_singleencoder1_code4b_flip <= 1'd0;
		tx_singleencoder1_alt7_rd0 <= 1'd0;
		tx_singleencoder1_alt7_rd1 <= 1'd0;
		tx_singleencoder2_code6b <= 6'd0;
		tx_singleencoder2_code6b_unbalanced <= 1'd0;
		tx_singleencoder2_code6b_flip <= 1'd0;
		tx_singleencoder2_code4b <= 4'd0;
		tx_singleencoder2_code4b_unbalanced <= 1'd0;
		tx_singleencoder2_code4b_flip <= 1'd0;
		tx_singleencoder2_alt7_rd0 <= 1'd0;
		tx_singleencoder2_alt7_rd1 <= 1'd0;
		tx_singleencoder3_code6b <= 6'd0;
		tx_singleencoder3_code6b_unbalanced <= 1'd0;
		tx_singleencoder3_code6b_flip <= 1'd0;
		tx_singleencoder3_code4b <= 4'd0;
		tx_singleencoder3_code4b_unbalanced <= 1'd0;
		tx_singleencoder3_code4b_flip <= 1'd0;
		tx_singleencoder3_alt7_rd0 <= 1'd0;
		tx_singleencoder3_alt7_rd1 <= 1'd0;
		tx_crc_encoder_crc_cur <= 20'd1048575;
		tx_stream_controller_sop <= 1'd0;
		tx_stream_controller_eop <= 1'd0;
		tx_stream_controller_idle <= 1'd0;
		tx_stream_controller_intermediate <= 1'd0;
		tx_stream_controller_encoder_ready <= 1'd0;
		tx_stream_controller_fifo_re <= 1'd0;
		tx_stream_controller_strobe_crc <= 1'd0;
		tx_stream_controller_reset_crc <= 1'd0;
		tx_stream_controller_aux_ign <= 1'd0;
		graycounter1_q <= 6'd0;
		graycounter1_q_binary <= 6'd0;
		clockdomainsrenamer_state <= 4'd0;
		clockdomainsrenamer0_state <= 3'd0;
	end
	xilinxmultiregimpl5_regs0 <= gtp_gtprxinit_rxpmaresetdone0;
	xilinxmultiregimpl5_regs1 <= xilinxmultiregimpl5_regs0;
	xilinxmultiregimpl6_regs0 <= gtp_gtprxinit_plllock0;
	xilinxmultiregimpl6_regs1 <= xilinxmultiregimpl6_regs0;
	xilinxmultiregimpl7_regs0 <= gtp_gtprxinit_rxresetdone0;
	xilinxmultiregimpl7_regs1 <= xilinxmultiregimpl7_regs0;
	xilinxmultiregimpl8_regs0 <= gtp_gtprxinit_rxdlysresetdone0;
	xilinxmultiregimpl8_regs1 <= xilinxmultiregimpl8_regs0;
	xilinxmultiregimpl9_regs0 <= gtp_gtprxinit_rxsyncdone0;
	xilinxmultiregimpl9_regs1 <= xilinxmultiregimpl9_regs0;
	xilinxmultiregimpl10_regs0 <= gtp_gtprxinit_restart0;
	xilinxmultiregimpl10_regs1 <= xilinxmultiregimpl10_regs0;
	xilinxmultiregimpl11_regs0 <= tx_tx_init_done0;
	xilinxmultiregimpl11_regs1 <= xilinxmultiregimpl11_regs0;
	xilinxmultiregimpl12_regs0 <= tx_fifo_empty0;
	xilinxmultiregimpl12_regs1 <= xilinxmultiregimpl12_regs0;
	xilinxmultiregimpl13_regs0 <= graycounter0_q;
	xilinxmultiregimpl13_regs1 <= xilinxmultiregimpl13_regs0;
end

always @(posedge write_clk) begin
	graycounter0_q_binary <= graycounter0_q_next_binary;
	graycounter0_q <= graycounter0_q_next;
	if (enable) begin
		state <= {(((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1]))) ^ ((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2])))), (((((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))) ^ (((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0]))) ^ ((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])))), (((((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))) ^ (((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6])))) ^ ((((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))) ^ (((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])))), (((((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))) ^ (((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5])))) ^ ((((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))) ^ (((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))))), (((((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3]))) ^ (((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4])))) ^ ((((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))) ^ (((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))))), ((((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2]))) ^ (((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3])))) ^ ((((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3]))) ^ (((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))))), ((((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1]))) ^ ((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2])))) ^ (((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2]))) ^ (((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3])))))};
		o <= {(state[5] ^ state[6]), (state[4] ^ state[5]), (state[3] ^ state[4]), (state[2] ^ state[3]), (state[1] ^ state[2]), (state[0] ^ state[1]), ((state[5] ^ state[6]) ^ state[0]), ((state[4] ^ state[5]) ^ (state[5] ^ state[6])), ((state[3] ^ state[4]) ^ (state[4] ^ state[5])), ((state[2] ^ state[3]) ^ (state[3] ^ state[4])), ((state[1] ^ state[2]) ^ (state[2] ^ state[3])), ((state[0] ^ state[1]) ^ (state[1] ^ state[2])), (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])), (((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])), (((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))), (((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))), (((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))), (((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3]))), ((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2]))), ((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1]))), ((((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))) ^ (((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0]))), ((((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))) ^ (((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6])))), ((((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))) ^ (((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5])))), ((((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3]))) ^ (((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4])))), (((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2]))) ^ (((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3])))), (((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1]))) ^ ((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2])))), (((((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))) ^ (((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0]))) ^ ((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])))), (((((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))) ^ (((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6])))) ^ ((((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))) ^ (((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])))), (((((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))) ^ (((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5])))) ^ ((((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))) ^ (((state[3] ^ state[4]) ^ (state[4] ^ state[5])) ^ ((state[4] ^ state[5]) ^ (state[5] ^ state[6]))))), (((((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3]))) ^ (((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4])))) ^ ((((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))) ^ (((state[2] ^ state[3]) ^ (state[3] ^ state[4])) ^ ((state[3] ^ state[4]) ^ (state[4] ^ state[5]))))), ((((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2]))) ^ (((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3])))) ^ ((((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3]))) ^ (((state[1] ^ state[2]) ^ (state[2] ^ state[3])) ^ ((state[2] ^ state[3]) ^ (state[3] ^ state[4]))))), ((((((state[4] ^ state[5]) ^ (state[5] ^ state[6])) ^ ((state[5] ^ state[6]) ^ state[0])) ^ (((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1]))) ^ ((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2])))) ^ (((((state[5] ^ state[6]) ^ state[0]) ^ (state[0] ^ state[1])) ^ ((state[0] ^ state[1]) ^ (state[1] ^ state[2]))) ^ (((state[0] ^ state[1]) ^ (state[1] ^ state[2])) ^ ((state[1] ^ state[2]) ^ (state[2] ^ state[3])))))};
	end
	clockdomainsrenamer2_state <= clockdomainsrenamer2_next_state;
	if (prbs_en_clockdomainsrenamer2_next_value_ce0) begin
		prbs_en <= prbs_en_clockdomainsrenamer2_next_value0;
	end
	if (data_type_clockdomainsrenamer2_next_value_ce1) begin
		data_type <= data_type_clockdomainsrenamer2_next_value1;
	end
	if (write_fifo_clockdomainsrenamer2_next_value_ce2) begin
		write_fifo <= write_fifo_clockdomainsrenamer2_next_value2;
	end
	if (index_clockdomainsrenamer2_next_value_ce3) begin
		index <= index_clockdomainsrenamer2_next_value3;
	end
	if (write_rst) begin
		graycounter0_q <= 6'd0;
		graycounter0_q_binary <= 6'd0;
		o <= 32'd0;
		state <= 7'd1;
		prbs_en <= 1'd0;
		data_type <= 2'd0;
		index <= 3'd0;
		write_fifo <= 1'd0;
		clockdomainsrenamer2_state <= 3'd0;
	end
	xilinxmultiregimpl14_regs0 <= graycounter1_q;
	xilinxmultiregimpl14_regs1 <= xilinxmultiregimpl14_regs0;
end

IBUFGDS IBUFGDS(
	.I(write_clk_p),
	.IB(write_clk_n),
	.O(write_clk_1)
);

IBUFDS_GTE2 IBUFDS_GTE2(
	.CEB(1'd0),
	.I(gtp_clk_p),
	.IB(gtp_clk_n),
	.O(gtp_clk)
);

IBUFG IBUFG(
	.I(clk62_5),
	.O(sys_clk_1)
);

GTPE2_COMMON #(
	.PLL0_FBDIV(3'd5),
	.PLL0_FBDIV_45(3'd4),
	.PLL0_REFCLK_DIV(2'd2)
) GTPE2_COMMON (
	.BGBYPASSB(1'd1),
	.BGMONITORENB(1'd1),
	.BGPDB(1'd1),
	.BGRCALOVRD(5'd31),
	.GTREFCLK0(gtp_clk),
	.PLL0LOCKEN(1'd1),
	.PLL0PD(1'd0),
	.PLL0REFCLKSEL(1'd1),
	.PLL0RESET(qpll_reset),
	.PLL1PD(1'd1),
	.RCALENB(1'd1),
	.PLL0LOCK(qpll_lock),
	.PLL0OUTCLK(qpll_clk),
	.PLL0OUTREFCLK(qpll_refclk)
);

PLLE2_BASE #(
	.CLKFBOUT_MULT(3'd5),
	.CLKIN1_PERIOD(4.166667),
	.CLKOUT0_DIVIDE(3'd5),
	.CLKOUT0_PHASE(0.0),
	.CLKOUT1_DIVIDE(4'd10),
	.CLKOUT1_PHASE(0.0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_BASE (
	.CLKFBIN(gtp_pll_fb2),
	.CLKIN1(gtp_txoutclk1),
	.CLKFBOUT(gtp_pll_fb2),
	.CLKOUT0(gtp_txusrclk1),
	.CLKOUT1(gtp_txusrclk21),
	.LOCKED(gtp_pll_txusrclk_lock)
);

BUFG BUFG(
	.I(gtp_txoutclk0),
	.O(gtp_txoutclk1)
);

BUFG BUFG_1(
	.I(gtp_txusrclk21),
	.O(gtp_txusrclk20)
);

BUFG BUFG_2(
	.I(gtp_txusrclk1),
	.O(gtp_txusrclk0)
);

PLLE2_BASE #(
	.CLKFBOUT_MULT(3'd5),
	.CLKIN1_PERIOD(4.166667),
	.CLKOUT0_DIVIDE(3'd5),
	.CLKOUT0_PHASE(0.0),
	.CLKOUT1_DIVIDE(4'd10),
	.CLKOUT1_PHASE(0.0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_BASE_1 (
	.CLKFBIN(gtp_pll_fb2_rx),
	.CLKIN1(gtp_rxoutclk1),
	.RST(gtp_gtprxinit_pll_rxusrclk_rst),
	.CLKFBOUT(gtp_pll_fb2_rx),
	.CLKOUT0(gtp_rxusrclk1),
	.CLKOUT1(gtp_rxusrclk21),
	.LOCKED(gtp_gtprxinit_pll_rxusrclk_lock)
);

BUFG BUFG_3(
	.I(gtp_rxoutclk0),
	.O(gtp_rxoutclk1)
);

BUFG BUFG_4(
	.I(gtp_rxusrclk21),
	.O(gtp_rxusrclk20)
);

BUFG BUFG_5(
	.I(gtp_rxusrclk1),
	.O(gtp_rxusrclk0)
);

GTPE2_CHANNEL #(
	.ALIGN_COMMA_DOUBLE("FALSE"),
	.ALIGN_COMMA_ENABLE(10'd1023),
	.ALIGN_COMMA_WORD(2'd2),
	.ALIGN_MCOMMA_DET("TRUE"),
	.ALIGN_MCOMMA_VALUE(10'd643),
	.ALIGN_PCOMMA_DET("TRUE"),
	.ALIGN_PCOMMA_VALUE(9'd380),
	.CLK_CORRECT_USE("FALSE"),
	.PD_TRANS_TIME_FROM_P2(6'd60),
	.PD_TRANS_TIME_NONE_P2(6'd60),
	.PD_TRANS_TIME_TO_P2(7'd100),
	.PMA_RSV(10'd819),
	.PMA_RSV2(14'd8256),
	.PMA_RSV3(1'd0),
	.PMA_RSV4(1'd0),
	.RXBUFRESET_TIME(1'd1),
	.RXBUF_ADDR_MODE("FAST"),
	.RXBUF_EIDLE_HI_CNT(4'd8),
	.RXBUF_EIDLE_LO_CNT(1'd0),
	.RXBUF_EN("FALSE"),
	.RXBUF_RESET_ON_CB_CHANGE("TRUE"),
	.RXBUF_RESET_ON_COMMAALIGN("FALSE"),
	.RXBUF_RESET_ON_EIDLE("FALSE"),
	.RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
	.RXBUF_THRESH_OVFLW(6'd61),
	.RXBUF_THRESH_OVRD("FALSE"),
	.RXBUF_THRESH_UNDFLW(3'd4),
	.RXCDR_CFG(65'd19022712657137635344),
	.RXCDR_FR_RESET_ON_EIDLE(1'd0),
	.RXCDR_HOLD_DURING_EIDLE(1'd0),
	.RXCDR_LOCK_CFG(4'd9),
	.RXCDR_PH_RESET_ON_EIDLE(1'd0),
	.RXDLY_CFG(5'd31),
	.RXDLY_LCFG(6'd48),
	.RXDLY_TAP_CFG(1'd0),
	.RXLPM_IPCM_CFG(1'd1),
	.RXOUT_DIV(1'd1),
	.RXPHDLY_CFG(20'd540704),
	.RXPH_CFG(24'd12582914),
	.RXPH_MONITOR_SEL(1'd0),
	.RXPI_CFG1(1'd1),
	.RXPI_CFG2(1'd1),
	.RXPMARESET_TIME(2'd3),
	.RXSLIDE_AUTO_WAIT(3'd7),
	.RXSLIDE_MODE("OFF"),
	.RXSYNC_MULTILANE(1'd0),
	.RXSYNC_OVRD(1'd0),
	.RXSYNC_SKIP_DA(1'd0),
	.RX_BIAS_CFG(12'd3891),
	.RX_BUFFER_CFG(1'd0),
	.RX_CLK25_DIV(3'd5),
	.RX_CM_SEL(1'd1),
	.RX_CM_TRIM(4'd10),
	.RX_DATA_WIDTH(6'd40),
	.RX_DDI_SEL(1'd0),
	.RX_DEFER_RESET_BUF_EN("TRUE"),
	.RX_OS_CFG(8'd128),
	.RX_SIG_VALID_DLY(4'd10),
	.RX_XCLK_SEL("RXUSR"),
	.SHOW_REALIGN_COMMA("FALSE"),
	.SIM_RECEIVER_DETECT_PASS("TRUE"),
	.SIM_RESET_SPEEDUP("FALSE"),
	.SIM_TX_EIDLE_DRIVE_LEVEL("X"),
	.SIM_VERSION("2.0"),
	.TXBUF_EN("FALSE"),
	.TXOUT_DIV(1'd1),
	.TXSYNC_MULTILANE(1'd0),
	.TXSYNC_OVRD(1'd1),
	.TXSYNC_SKIP_DA(1'd0),
	.TX_CLK25_DIV(3'd5),
	.TX_DATA_WIDTH(6'd40),
	.TX_XCLK_SEL("TXUSR")
) GTPE2_CHANNEL (
	.DRPADDR(gtp_drpaddr),
	.DRPCLK(tx_clk),
	.DRPDI(gtp_drpdi),
	.DRPEN(gtp_drpen),
	.DRPWE(gtp_drpwe),
	.EYESCANRESET(1'd0),
	.GTPRXN(gtp_rx_n),
	.GTPRXP(gtp_rx_p),
	.GTRESETSEL(1'd0),
	.GTRXRESET(gtp_gtprxinit_gtrxreset0),
	.GTTXRESET(gtp_tx_init_gttxreset0),
	.LOOPBACK(gtp_loopback),
	.PLL0CLK(qpll_clk),
	.PLL0REFCLK(qpll_refclk),
	.RESETOVRD(1'd0),
	.RX8B10BEN(1'd0),
	.RXBUFRESET(1'd0),
	.RXCDRFREQRESET(1'd0),
	.RXCDRHOLD(1'd0),
	.RXCDROVRDEN(1'd0),
	.RXCDRRESET(1'd0),
	.RXCDRRESETRSV(1'd0),
	.RXCOMMADETEN(1'd1),
	.RXDDIEN(1'd1),
	.RXDLYBYPASS(1'd0),
	.RXDLYSRESET(gtp_gtprxinit_rxdlysreset0),
	.RXELECIDLEMODE(2'd3),
	.RXLPMHFHOLD(1'd0),
	.RXLPMHFOVRDEN(1'd0),
	.RXLPMLFHOLD(1'd0),
	.RXLPMRESET(1'd0),
	.RXMCOMMAALIGNEN(1'd1),
	.RXOOBRESET(1'd0),
	.RXOSCALRESET(1'd0),
	.RXOSHOLD(1'd0),
	.RXOSINTCFG(2'd2),
	.RXOSINTEN(1'd1),
	.RXOSINTHOLD(1'd0),
	.RXOSINTOVRDEN(1'd0),
	.RXOSINTPD(1'd0),
	.RXOSINTSTROBE(1'd0),
	.RXOSINTTESTOVRDEN(1'd0),
	.RXOSOVRDEN(1'd0),
	.RXOUTCLKSEL(2'd2),
	.RXPCOMMAALIGNEN(1'd1),
	.RXPCSRESET(1'd0),
	.RXPD({gtp_gtprxinit_gtrxpd0, gtp_gtprxinit_gtrxpd0}),
	.RXPHDLYPD(gtp_gtprxinit_rxphdlypd),
	.RXPMARESET(1'd0),
	.RXPOLARITY(gtp_rx_polarity),
	.RXRATE(1'd0),
	.RXRATEMODE(1'd0),
	.RXSYNCALLIN(gtp_rxphaligndone),
	.RXSYNCIN(1'd0),
	.RXSYNCMODE(1'd1),
	.RXSYSCLKSEL(1'd0),
	.RXUSERRDY(gtp_gtprxinit_rxuserrdy0),
	.RXUSRCLK(gtp_rxusrclk0),
	.RXUSRCLK2(gtp_rxusrclk20),
	.TX8B10BEN(1'd0),
	.TXBUFDIFFCTRL(3'd4),
	.TXCHARDISPMODE({gtp_tx_data[39], gtp_tx_data[29], gtp_tx_data[19], gtp_tx_data[9]}),
	.TXCHARDISPVAL({gtp_tx_data[38], gtp_tx_data[28], gtp_tx_data[18], gtp_tx_data[8]}),
	.TXDATA({gtp_tx_data[37:30], gtp_tx_data[27:20], gtp_tx_data[17:10], gtp_tx_data[7:0]}),
	.TXDIFFCTRL(gtp_diffctrl),
	.TXDLYBYPASS(1'd0),
	.TXDLYEN(gtp_tx_init_txdlyen0),
	.TXDLYSRESET(gtp_tx_init_txdlysreset0),
	.TXELECIDLE(1'd0),
	.TXINHIBIT(1'd0),
	.TXOUTCLKSEL(2'd3),
	.TXPCSRESET(1'd0),
	.TXPHALIGN(gtp_tx_init_txphalign0),
	.TXPHALIGNEN(1'd1),
	.TXPHDLYRESET(1'd0),
	.TXPHINIT(gtp_tx_init_txphinit0),
	.TXPMARESET(1'd0),
	.TXPOLARITY(gtp_tx_polarity),
	.TXPOSTCURSOR(gtp_txpostcursor),
	.TXPRECURSOR(gtp_txprecursor),
	.TXRATE(1'd0),
	.TXSYNCALLIN(1'd0),
	.TXSYNCIN(1'd0),
	.TXSYNCMODE(1'd0),
	.TXSYSCLKSEL(1'd0),
	.TXUSERRDY(gtp_tx_init_txuserrdy0),
	.TXUSRCLK(gtp_txusrclk0),
	.TXUSRCLK2(gtp_txusrclk20),
	.DRPDO(gtp_drpdo),
	.DRPRDY(gtp_drprdy),
	.GTPTXN(gtp_tx_n),
	.GTPTXP(gtp_tx_p),
	.RXBYTEISALIGNED(gtp_rxbytealigned),
	.RXCHARISK({gtp_rx_data[38], gtp_rx_data[28], gtp_rx_data[18], gtp_rx_data[8]}),
	.RXCOMMADET(gtp_rxcommmadet),
	.RXDATA({gtp_rx_data[37:30], gtp_rx_data[27:20], gtp_rx_data[17:10], gtp_rx_data[7:0]}),
	.RXDISPERR({gtp_rx_data[39], gtp_rx_data[29], gtp_rx_data[19], gtp_rx_data[9]}),
	.RXDLYSRESETDONE(gtp_gtprxinit_rxdlysresetdone0),
	.RXOUTCLK(gtp_rxoutclk0),
	.RXPHALIGNDONE(gtp_rxphaligndone),
	.RXPMARESETDONE(gtp_gtprxinit_rxpmaresetdone0),
	.RXRESETDONE(gtp_gtprxinit_rxresetdone0),
	.RXSYNCDONE(gtp_gtprxinit_rxsyncdone0),
	.TXDLYSRESETDONE(gtp_tx_init_txdlysresetdone0),
	.TXOUTCLK(gtp_txoutclk0),
	.TXPHALIGNDONE(gtp_tx_init_txphaligndone0),
	.TXPHINITDONE(gtp_tx_init_txphinitdone0),
	.TXRESETDONE(gtp_tx_init_txresetdone0)
);

BUFG BUFG_6(
	.I(gtp_txusrclk20),
	.O(tx_clk)
);

BUFG BUFG_7(
	.I(gtp_rxusrclk20),
	.O(rx_clk)
);

reg [4:0] mem_6b5b[0:63];
reg [5:0] memadr;
always @(posedge rx_clk) begin
	memadr <= rx_decoder1_adr;
end

assign rx_decoder1_dat_r = mem_6b5b[memadr];

initial begin
	$readmemh("mem_6b5b.init", mem_6b5b);
end

reg [4:0] mem_6b5b_1[0:63];
reg [5:0] memadr_1;
always @(posedge rx_clk) begin
	memadr_1 <= rx_decoder2_adr;
end

assign rx_decoder2_dat_r = mem_6b5b_1[memadr_1];

initial begin
	$readmemh("mem_6b5b_1.init", mem_6b5b_1);
end

reg [4:0] mem_6b5b_2[0:63];
reg [5:0] memadr_2;
always @(posedge rx_clk) begin
	memadr_2 <= rx_decoder3_adr;
end

assign rx_decoder3_dat_r = mem_6b5b_2[memadr_2];

initial begin
	$readmemh("mem_6b5b_2.init", mem_6b5b_2);
end

reg [4:0] mem_6b5b_3[0:63];
reg [5:0] memadr_3;
always @(posedge rx_clk) begin
	memadr_3 <= rx_decoder4_adr;
end

assign rx_decoder4_dat_r = mem_6b5b_3[memadr_3];

initial begin
	$readmemh("mem_6b5b_3.init", mem_6b5b_3);
end

reg [33:0] storage[0:31];
reg [4:0] memadr_4;
reg [4:0] memadr_5;
always @(posedge write_clk) begin
	if (wrport_we)
		storage[wrport_adr] <= wrport_dat_w;
	memadr_4 <= wrport_adr;
end

always @(posedge tx_clk) begin
	memadr_5 <= rdport_adr;
end

assign wrport_dat_r = storage[memadr_4];
assign rdport_dat_r = storage[memadr_5];

endmodule
