//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-01-19 15:50:36
//--------------------------------------------------------------------------------
module top(
	output serial_tx,
	input serial_rx,
	input user_btn,
	input user_btn_1,
	output user_led,
	output user_led_1,
	(* dont_touch = "true" *)	input clk12
);

wire reset;
reg [4:0] index = 5'd0;
reg [31:0] data_out = 32'd0;
reg [1:0] type_out = 2'd0;
reg [4:0] wrport1_adr = 5'd0;
wire [31:0] wrport1_dat_r;
reg wrport1_we = 1'd0;
reg [31:0] wrport1_dat_w = 32'd0;
reg [4:0] wrport2_adr = 5'd0;
wire [1:0] wrport2_dat_r;
reg wrport2_we = 1'd0;
reg [1:0] wrport2_dat_w = 2'd0;
wire fsm_tx_done;
wire fsm_trans_en;
wire fsm_write_en;
wire fsm_fifo_empty;
wire fsm_fifo_full;
reg fsm_read_next = 1'd0;
reg fsm_encoder_ready = 1'd0;
reg fsm_change_disp = 1'd0;
reg fsm_tx_en = 1'd0;
reg fsm_fifo_we = 1'd0;
reg fsm_fifo_re = 1'd0;
wire [7:0] encoder1_encoder_data_in;
wire encoder1_encoder_k;
reg [9:0] encoder1_encoder_data_out = 10'd0;
reg encoder1_encoder_disp_in = 1'd0;
wire encoder1_encoder_disp_out;
reg [8:0] encoder1_encoder0 = 9'd0;
reg [6:0] encoder1_encoder1 = 7'd0;
reg [5:0] encoder1_encoder2 = 6'd0;
reg [3:0] encoder1_encoder3 = 4'd0;
reg [5:0] encoder1_encoder4 = 6'd0;
reg [3:0] encoder1_encoder5 = 4'd0;
wire encoder1_encoder_illegalk;
wire encoder1_encoder_compls6;
reg [1:0] encoder1_encoder6 = 2'd0;
wire [7:0] encoder2_encoder_data_in;
wire encoder2_encoder_k;
reg [9:0] encoder2_encoder_data_out = 10'd0;
reg encoder2_encoder_disp_in = 1'd0;
wire encoder2_encoder_disp_out;
reg [8:0] encoder2_encoder0 = 9'd0;
reg [6:0] encoder2_encoder1 = 7'd0;
reg [5:0] encoder2_encoder2 = 6'd0;
reg [3:0] encoder2_encoder3 = 4'd0;
reg [5:0] encoder2_encoder4 = 6'd0;
reg [3:0] encoder2_encoder5 = 4'd0;
wire encoder2_encoder_illegalk;
wire encoder2_encoder_compls6;
reg [1:0] encoder2_encoder6 = 2'd0;
wire [7:0] encoder3_encoder_data_in;
wire encoder3_encoder_k;
reg [9:0] encoder3_encoder_data_out = 10'd0;
reg encoder3_encoder_disp_in = 1'd0;
wire encoder3_encoder_disp_out;
reg [8:0] encoder3_encoder0 = 9'd0;
reg [6:0] encoder3_encoder1 = 7'd0;
reg [5:0] encoder3_encoder2 = 6'd0;
reg [3:0] encoder3_encoder3 = 4'd0;
reg [5:0] encoder3_encoder4 = 6'd0;
reg [3:0] encoder3_encoder5 = 4'd0;
wire encoder3_encoder_illegalk;
wire encoder3_encoder_compls6;
reg [1:0] encoder3_encoder6 = 2'd0;
wire [7:0] encoder4_encoder_data_in;
wire encoder4_encoder_k;
reg [9:0] encoder4_encoder_data_out = 10'd0;
reg encoder4_encoder_disp_in = 1'd0;
wire encoder4_encoder_disp_out;
reg [8:0] encoder4_encoder0 = 9'd0;
reg [6:0] encoder4_encoder1 = 7'd0;
reg [5:0] encoder4_encoder2 = 6'd0;
reg [3:0] encoder4_encoder3 = 4'd0;
reg [5:0] encoder4_encoder4 = 6'd0;
reg [3:0] encoder4_encoder5 = 4'd0;
wire encoder4_encoder_illegalk;
wire encoder4_encoder_compls6;
reg [1:0] encoder4_encoder6 = 2'd0;
reg [41:0] transmitter_data_in = 42'd0;
wire transmitter_trans_en;
wire transmitter_tx_serial0;
reg transmitter_tx_42bdone = 1'd0;
reg [1:0] transmitter_tx_counter = 2'd0;
reg transmitter_tx_serial1 = 1'd1;
reg [7:0] transmitter_tx_data = 8'd0;
wire transmitter_tx_strobe;
reg [2:0] transmitter_tx_bitn = 3'd0;
reg transmitter_tx_ready = 1'd0;
reg [7:0] transmitter_tx_latch = 8'd0;
reg transmitter_tx_done = 1'd0;
reg [3:0] transmitter_byte_cnt = 4'd0;
wire re;
reg readable = 1'd0;
wire syncfifo_we;
reg syncfifo_writable = 1'd0;
reg syncfifo_re = 1'd0;
reg syncfifo_readable = 1'd0;
wire [31:0] syncfifo_din;
wire [1:0] syncfifo_dtin;
wire [1:0] syncfifo_dtout;
wire [31:0] syncfifo_dout;
reg [5:0] level0 = 6'd0;
reg replace = 1'd0;
reg [4:0] produce = 5'd0;
reg [4:0] consume = 5'd0;
reg [4:0] wrport_adr = 5'd0;
wire [31:0] wrport_dat_r;
wire wrport_we;
wire [31:0] wrport_dat_w;
wire do_read;
wire [4:0] rdport_adr;
wire [31:0] rdport_dat_r;
wire rdport_re;
reg [4:0] producet = 5'd0;
reg [4:0] consumet = 5'd0;
reg [4:0] wrportTYPE_adr = 5'd0;
wire [1:0] wrportTYPE_dat_r;
wire wrportTYPE_we;
wire [1:0] wrportTYPE_dat_w;
wire do_readTYPE;
wire [4:0] rdportTYPE_adr;
wire [1:0] rdportTYPE_dat_r;
wire rdportTYPE_re;
wire [5:0] level1;
reg [1:0] fsm_state = 2'd0;
reg [1:0] fsm_next_state = 2'd0;
reg transmitter_tx_ready_transmitter42b_next_value0 = 1'd0;
reg transmitter_tx_ready_transmitter42b_next_value_ce0 = 1'd0;
reg [7:0] transmitter_tx_data_transmitter42b_next_value1 = 8'd0;
reg transmitter_tx_data_transmitter42b_next_value_ce1 = 1'd0;
reg transmitter_tx_42bdone_transmitter42b_next_value2 = 1'd0;
reg transmitter_tx_42bdone_transmitter42b_next_value_ce2 = 1'd0;
reg [3:0] transmitter_byte_cnt_transmitter42b_next_value3 = 4'd0;
reg transmitter_byte_cnt_transmitter42b_next_value_ce3 = 1'd0;
reg [1:0] tx_state = 2'd0;
reg [1:0] tx_next_state = 2'd0;
reg [7:0] transmitter_tx_latch_transmitter42b_t_next_value0 = 8'd0;
reg transmitter_tx_latch_transmitter42b_t_next_value_ce0 = 1'd0;
reg [1:0] transmitter_tx_counter_transmitter42b_t_next_value1 = 2'd0;
reg transmitter_tx_counter_transmitter42b_t_next_value_ce1 = 1'd0;
reg transmitter_tx_serial1_transmitter42b_f_next_value = 1'd0;
reg transmitter_tx_serial1_transmitter42b_f_next_value_ce = 1'd0;
reg [2:0] transmitter_tx_bitn_transmitter42b_t_next_value2 = 3'd0;
reg transmitter_tx_bitn_transmitter42b_t_next_value_ce2 = 1'd0;
reg transmitter_tx_done_transmitter42b_t_next_value3 = 1'd0;
reg transmitter_tx_done_transmitter42b_t_next_value_ce3 = 1'd0;
reg [2:0] state = 3'd0;
reg [2:0] next_state = 3'd0;
reg fsm_fifo_re_fsm_v3_1_t_next_value0 = 1'd0;
reg fsm_fifo_re_fsm_v3_1_t_next_value_ce0 = 1'd0;
reg fsm_read_next_fsm_v3_1_f_next_value = 1'd0;
reg fsm_read_next_fsm_v3_1_f_next_value_ce = 1'd0;
reg fsm_change_disp_fsm_v3_1_next_value0 = 1'd0;
reg fsm_change_disp_fsm_v3_1_next_value_ce0 = 1'd0;
reg fsm_fifo_we_fsm_v3_1_t_next_value1 = 1'd0;
reg fsm_fifo_we_fsm_v3_1_t_next_value_ce1 = 1'd0;
reg fsm_encoder_ready_fsm_v3_1_next_value1 = 1'd0;
reg fsm_encoder_ready_fsm_v3_1_next_value_ce1 = 1'd0;
reg fsm_tx_en_fsm_v3_1_next_value2 = 1'd0;
reg fsm_tx_en_fsm_v3_1_next_value_ce2 = 1'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;

assign fsm_tx_done = transmitter_tx_42bdone;
assign fsm_trans_en = user_btn;
assign fsm_fifo_empty = (~syncfifo_readable);
assign fsm_fifo_full = (~syncfifo_writable);
assign fsm_write_en = user_btn_1;
assign transmitter_trans_en = fsm_tx_en;
assign syncfifo_we = fsm_fifo_we;
assign re = fsm_fifo_re;
assign serial_tx = transmitter_tx_serial0;
assign syncfifo_din = data_out;
assign syncfifo_dtin = type_out;
assign encoder1_encoder_data_in = syncfifo_dout[7:0];
assign encoder2_encoder_data_in = syncfifo_dout[15:8];
assign encoder3_encoder_data_in = syncfifo_dout[23:16];
assign encoder4_encoder_data_in = syncfifo_dout[31:24];
always @(*) begin
	transmitter_data_in <= 42'd0;
	if (fsm_encoder_ready) begin
		transmitter_data_in[9:0] <= encoder1_encoder_data_out;
		transmitter_data_in[19:10] <= encoder2_encoder_data_out;
		transmitter_data_in[29:20] <= encoder3_encoder_data_out;
		transmitter_data_in[39:30] <= encoder4_encoder_data_out;
		transmitter_data_in[41:40] <= syncfifo_dtout;
	end
end
assign encoder1_encoder_k = 1'd0;
assign encoder2_encoder_k = 1'd0;
assign encoder3_encoder_k = 1'd0;
assign encoder4_encoder_k = 1'd0;
assign user_led = (~syncfifo_writable);
assign user_led_1 = (~syncfifo_readable);
assign reset = (user_btn & user_btn_1);
always @(*) begin
	encoder1_encoder0 <= 9'd0;
	encoder1_encoder0[0] <= encoder1_encoder_data_in[0];
	encoder1_encoder0[1] <= encoder1_encoder_data_in[1];
	encoder1_encoder0[2] <= encoder1_encoder_data_in[2];
	encoder1_encoder0[3] <= encoder1_encoder_data_in[3];
	encoder1_encoder0[4] <= encoder1_encoder_data_in[4];
	encoder1_encoder0[5] <= encoder1_encoder_data_in[5];
	encoder1_encoder0[6] <= encoder1_encoder_data_in[6];
	encoder1_encoder0[7] <= encoder1_encoder_data_in[7];
	encoder1_encoder0[8] <= encoder1_encoder_k;
end
always @(*) begin
	encoder1_encoder1 <= 7'd0;
	encoder1_encoder1[0] <= ((encoder1_encoder0[0] & encoder1_encoder0[1]) | ((~encoder1_encoder0[0]) & (~encoder1_encoder0[1])));
	encoder1_encoder1[1] <= ((encoder1_encoder0[2] & encoder1_encoder0[3]) | ((~encoder1_encoder0[2]) & (~encoder1_encoder0[3])));
	encoder1_encoder1[2] <= (((((encoder1_encoder0[0] & encoder1_encoder0[1]) & (~encoder1_encoder0[2])) & (~encoder1_encoder0[3])) | (((encoder1_encoder0[2] & encoder1_encoder0[3]) & (~encoder1_encoder0[0])) & (~encoder1_encoder0[1]))) | ((~encoder1_encoder1[0]) & (~encoder1_encoder1[1])));
	encoder1_encoder1[3] <= (((encoder1_encoder0[0] & encoder1_encoder0[1]) & encoder1_encoder0[2]) & encoder1_encoder0[3]);
	encoder1_encoder1[4] <= ((((~encoder1_encoder0[0]) & (~encoder1_encoder0[1])) & (~encoder1_encoder0[2])) & (~encoder1_encoder0[3]));
	encoder1_encoder1[5] <= ((((~encoder1_encoder1[0]) & (~encoder1_encoder0[2])) & (~encoder1_encoder0[3])) | (((~encoder1_encoder1[1]) & (~encoder1_encoder0[0])) & (~encoder1_encoder0[1])));
	encoder1_encoder1[6] <= ((((~encoder1_encoder1[0]) & encoder1_encoder0[2]) & encoder1_encoder0[3]) | (((~encoder1_encoder1[1]) & encoder1_encoder0[0]) & encoder1_encoder0[1]));
end
always @(*) begin
	encoder1_encoder2 <= 6'd0;
	encoder1_encoder2[0] <= encoder1_encoder0[0];
	encoder1_encoder2[1] <= ((encoder1_encoder0[1] & (~encoder1_encoder1[3])) | encoder1_encoder1[4]);
	encoder1_encoder2[2] <= ((encoder1_encoder1[4] | encoder1_encoder0[2]) | ((((encoder1_encoder0[4] & encoder1_encoder0[3]) & (~encoder1_encoder0[2])) & (~encoder1_encoder0[1])) & (~encoder1_encoder0[0])));
	encoder1_encoder2[3] <= (encoder1_encoder0[3] & (~((encoder1_encoder0[0] & encoder1_encoder0[1]) & encoder1_encoder0[2])));
	encoder1_encoder2[4] <= ((encoder1_encoder0[4] | encoder1_encoder1[5]) & (~((((encoder1_encoder0[4] & encoder1_encoder0[3]) & (~encoder1_encoder0[2])) & (~encoder1_encoder0[1])) & (~encoder1_encoder0[0]))));
	encoder1_encoder2[5] <= (((((encoder1_encoder1[2] & (~encoder1_encoder0[4])) | (((encoder1_encoder0[4] & (~encoder1_encoder0[3])) & (~encoder1_encoder0[2])) & (~(encoder1_encoder0[0] & encoder1_encoder0[1])))) | (encoder1_encoder0[4] & encoder1_encoder1[3])) | (((((encoder1_encoder0[8] & encoder1_encoder0[4]) & encoder1_encoder0[3]) & encoder1_encoder0[2]) & (~encoder1_encoder0[1])) & (~encoder1_encoder0[0]))) | ((((encoder1_encoder0[4] & (~encoder1_encoder0[3])) & encoder1_encoder0[2]) & (~encoder1_encoder0[1])) & (~encoder1_encoder0[0])));
end
always @(*) begin
	encoder1_encoder3 <= 4'd0;
	encoder1_encoder3[0] <= (((((encoder1_encoder0[4] & encoder1_encoder0[3]) & (~encoder1_encoder0[2])) & (~encoder1_encoder0[1])) & (~encoder1_encoder0[0])) | (((~encoder1_encoder0[4]) & (~encoder1_encoder1[2])) & (~encoder1_encoder1[6])));
	encoder1_encoder3[1] <= ((encoder1_encoder0[8] | ((encoder1_encoder0[4] & (~encoder1_encoder1[2])) & (~encoder1_encoder1[5]))) | (((((~encoder1_encoder0[4]) & (~encoder1_encoder0[3])) & encoder1_encoder0[2]) & encoder1_encoder0[1]) & encoder1_encoder0[0]));
	encoder1_encoder3[2] <= encoder1_encoder3[0];
	encoder1_encoder3[3] <= (encoder1_encoder0[8] | ((encoder1_encoder0[4] & (~encoder1_encoder1[2])) & (~encoder1_encoder1[5])));
end
always @(*) begin
	encoder1_encoder4 <= 6'd0;
	if (encoder1_encoder_disp_in) begin
		encoder1_encoder4[5] <= (((~encoder1_encoder0[4]) & encoder1_encoder0[3]) & encoder1_encoder1[6]);
	end else begin
		encoder1_encoder4[5] <= ((encoder1_encoder0[4] & (~encoder1_encoder0[3])) & encoder1_encoder1[5]);
	end
	encoder1_encoder4[0] <= (((encoder1_encoder0[5] & encoder1_encoder0[6]) & encoder1_encoder0[7]) & (encoder1_encoder0[8] | encoder1_encoder4[5]));
	encoder1_encoder4[1] <= (encoder1_encoder0[5] & (~encoder1_encoder4[0]));
	encoder1_encoder4[2] <= (encoder1_encoder0[6] | (((~encoder1_encoder0[5]) & (~encoder1_encoder0[6])) & (~encoder1_encoder0[7])));
	encoder1_encoder4[3] <= encoder1_encoder0[7];
	encoder1_encoder4[4] <= (((~encoder1_encoder0[7]) & (encoder1_encoder0[6] ^ encoder1_encoder0[5])) | encoder1_encoder4[0]);
end
always @(*) begin
	encoder1_encoder5 <= 4'd0;
	encoder1_encoder5[0] <= (encoder1_encoder0[5] & encoder1_encoder0[6]);
	encoder1_encoder5[1] <= (((~encoder1_encoder0[5]) & (~encoder1_encoder0[6])) | (encoder1_encoder0[8] & ((encoder1_encoder0[5] & (~encoder1_encoder0[6])) | ((~encoder1_encoder0[5]) & encoder1_encoder0[6]))));
	encoder1_encoder5[2] <= ((~encoder1_encoder0[5]) & (~encoder1_encoder0[6]));
	encoder1_encoder5[3] <= ((encoder1_encoder0[5] & encoder1_encoder0[6]) & encoder1_encoder0[7]);
end
assign encoder1_encoder_illegalk = ((encoder1_encoder0[8] & ((((encoder1_encoder0[0] | encoder1_encoder0[1]) | (~encoder1_encoder0[2])) | (~encoder1_encoder0[3])) | (~encoder1_encoder0[4]))) & (((((~encoder1_encoder0[5]) | (~encoder1_encoder0[6])) | (~encoder1_encoder0[7])) | (~encoder1_encoder0[4])) | (~encoder1_encoder1[6])));
assign encoder1_encoder_compls6 = ((encoder1_encoder3[0] & (~encoder1_encoder_disp_in)) | (encoder1_encoder3[1] & encoder1_encoder_disp_in));
always @(*) begin
	encoder1_encoder6 <= 2'd0;
	encoder1_encoder6[0] <= (encoder1_encoder_disp_in ^ (encoder1_encoder3[2] | encoder1_encoder3[3]));
	encoder1_encoder6[1] <= ((encoder1_encoder5[1] & (~encoder1_encoder6[0])) | (encoder1_encoder5[0] & encoder1_encoder6[0]));
end
assign encoder1_encoder_disp_out = (encoder1_encoder6[0] ^ (encoder1_encoder5[2] | encoder1_encoder5[3]));
always @(*) begin
	encoder1_encoder_data_out <= 10'd0;
	encoder1_encoder_data_out[0] <= (encoder1_encoder4[4] ^ encoder1_encoder6[1]);
	encoder1_encoder_data_out[1] <= (encoder1_encoder4[3] ^ encoder1_encoder6[1]);
	encoder1_encoder_data_out[2] <= (encoder1_encoder4[2] ^ encoder1_encoder6[1]);
	encoder1_encoder_data_out[3] <= (encoder1_encoder4[1] ^ encoder1_encoder6[1]);
	encoder1_encoder_data_out[4] <= (encoder1_encoder2[5] ^ encoder1_encoder_compls6);
	encoder1_encoder_data_out[5] <= (encoder1_encoder2[4] ^ encoder1_encoder_compls6);
	encoder1_encoder_data_out[6] <= (encoder1_encoder2[3] ^ encoder1_encoder_compls6);
	encoder1_encoder_data_out[7] <= (encoder1_encoder2[2] ^ encoder1_encoder_compls6);
	encoder1_encoder_data_out[8] <= (encoder1_encoder2[1] ^ encoder1_encoder_compls6);
	encoder1_encoder_data_out[9] <= (encoder1_encoder2[0] ^ encoder1_encoder_compls6);
end
always @(*) begin
	encoder2_encoder0 <= 9'd0;
	encoder2_encoder0[0] <= encoder2_encoder_data_in[0];
	encoder2_encoder0[1] <= encoder2_encoder_data_in[1];
	encoder2_encoder0[2] <= encoder2_encoder_data_in[2];
	encoder2_encoder0[3] <= encoder2_encoder_data_in[3];
	encoder2_encoder0[4] <= encoder2_encoder_data_in[4];
	encoder2_encoder0[5] <= encoder2_encoder_data_in[5];
	encoder2_encoder0[6] <= encoder2_encoder_data_in[6];
	encoder2_encoder0[7] <= encoder2_encoder_data_in[7];
	encoder2_encoder0[8] <= encoder2_encoder_k;
end
always @(*) begin
	encoder2_encoder1 <= 7'd0;
	encoder2_encoder1[0] <= ((encoder2_encoder0[0] & encoder2_encoder0[1]) | ((~encoder2_encoder0[0]) & (~encoder2_encoder0[1])));
	encoder2_encoder1[1] <= ((encoder2_encoder0[2] & encoder2_encoder0[3]) | ((~encoder2_encoder0[2]) & (~encoder2_encoder0[3])));
	encoder2_encoder1[2] <= (((((encoder2_encoder0[0] & encoder2_encoder0[1]) & (~encoder2_encoder0[2])) & (~encoder2_encoder0[3])) | (((encoder2_encoder0[2] & encoder2_encoder0[3]) & (~encoder2_encoder0[0])) & (~encoder2_encoder0[1]))) | ((~encoder2_encoder1[0]) & (~encoder2_encoder1[1])));
	encoder2_encoder1[3] <= (((encoder2_encoder0[0] & encoder2_encoder0[1]) & encoder2_encoder0[2]) & encoder2_encoder0[3]);
	encoder2_encoder1[4] <= ((((~encoder2_encoder0[0]) & (~encoder2_encoder0[1])) & (~encoder2_encoder0[2])) & (~encoder2_encoder0[3]));
	encoder2_encoder1[5] <= ((((~encoder2_encoder1[0]) & (~encoder2_encoder0[2])) & (~encoder2_encoder0[3])) | (((~encoder2_encoder1[1]) & (~encoder2_encoder0[0])) & (~encoder2_encoder0[1])));
	encoder2_encoder1[6] <= ((((~encoder2_encoder1[0]) & encoder2_encoder0[2]) & encoder2_encoder0[3]) | (((~encoder2_encoder1[1]) & encoder2_encoder0[0]) & encoder2_encoder0[1]));
end
always @(*) begin
	encoder2_encoder2 <= 6'd0;
	encoder2_encoder2[0] <= encoder2_encoder0[0];
	encoder2_encoder2[1] <= ((encoder2_encoder0[1] & (~encoder2_encoder1[3])) | encoder2_encoder1[4]);
	encoder2_encoder2[2] <= ((encoder2_encoder1[4] | encoder2_encoder0[2]) | ((((encoder2_encoder0[4] & encoder2_encoder0[3]) & (~encoder2_encoder0[2])) & (~encoder2_encoder0[1])) & (~encoder2_encoder0[0])));
	encoder2_encoder2[3] <= (encoder2_encoder0[3] & (~((encoder2_encoder0[0] & encoder2_encoder0[1]) & encoder2_encoder0[2])));
	encoder2_encoder2[4] <= ((encoder2_encoder0[4] | encoder2_encoder1[5]) & (~((((encoder2_encoder0[4] & encoder2_encoder0[3]) & (~encoder2_encoder0[2])) & (~encoder2_encoder0[1])) & (~encoder2_encoder0[0]))));
	encoder2_encoder2[5] <= (((((encoder2_encoder1[2] & (~encoder2_encoder0[4])) | (((encoder2_encoder0[4] & (~encoder2_encoder0[3])) & (~encoder2_encoder0[2])) & (~(encoder2_encoder0[0] & encoder2_encoder0[1])))) | (encoder2_encoder0[4] & encoder2_encoder1[3])) | (((((encoder2_encoder0[8] & encoder2_encoder0[4]) & encoder2_encoder0[3]) & encoder2_encoder0[2]) & (~encoder2_encoder0[1])) & (~encoder2_encoder0[0]))) | ((((encoder2_encoder0[4] & (~encoder2_encoder0[3])) & encoder2_encoder0[2]) & (~encoder2_encoder0[1])) & (~encoder2_encoder0[0])));
end
always @(*) begin
	encoder2_encoder3 <= 4'd0;
	encoder2_encoder3[0] <= (((((encoder2_encoder0[4] & encoder2_encoder0[3]) & (~encoder2_encoder0[2])) & (~encoder2_encoder0[1])) & (~encoder2_encoder0[0])) | (((~encoder2_encoder0[4]) & (~encoder2_encoder1[2])) & (~encoder2_encoder1[6])));
	encoder2_encoder3[1] <= ((encoder2_encoder0[8] | ((encoder2_encoder0[4] & (~encoder2_encoder1[2])) & (~encoder2_encoder1[5]))) | (((((~encoder2_encoder0[4]) & (~encoder2_encoder0[3])) & encoder2_encoder0[2]) & encoder2_encoder0[1]) & encoder2_encoder0[0]));
	encoder2_encoder3[2] <= encoder2_encoder3[0];
	encoder2_encoder3[3] <= (encoder2_encoder0[8] | ((encoder2_encoder0[4] & (~encoder2_encoder1[2])) & (~encoder2_encoder1[5])));
end
always @(*) begin
	encoder2_encoder4 <= 6'd0;
	if (encoder2_encoder_disp_in) begin
		encoder2_encoder4[5] <= (((~encoder2_encoder0[4]) & encoder2_encoder0[3]) & encoder2_encoder1[6]);
	end else begin
		encoder2_encoder4[5] <= ((encoder2_encoder0[4] & (~encoder2_encoder0[3])) & encoder2_encoder1[5]);
	end
	encoder2_encoder4[0] <= (((encoder2_encoder0[5] & encoder2_encoder0[6]) & encoder2_encoder0[7]) & (encoder2_encoder0[8] | encoder2_encoder4[5]));
	encoder2_encoder4[1] <= (encoder2_encoder0[5] & (~encoder2_encoder4[0]));
	encoder2_encoder4[2] <= (encoder2_encoder0[6] | (((~encoder2_encoder0[5]) & (~encoder2_encoder0[6])) & (~encoder2_encoder0[7])));
	encoder2_encoder4[3] <= encoder2_encoder0[7];
	encoder2_encoder4[4] <= (((~encoder2_encoder0[7]) & (encoder2_encoder0[6] ^ encoder2_encoder0[5])) | encoder2_encoder4[0]);
end
always @(*) begin
	encoder2_encoder5 <= 4'd0;
	encoder2_encoder5[0] <= (encoder2_encoder0[5] & encoder2_encoder0[6]);
	encoder2_encoder5[1] <= (((~encoder2_encoder0[5]) & (~encoder2_encoder0[6])) | (encoder2_encoder0[8] & ((encoder2_encoder0[5] & (~encoder2_encoder0[6])) | ((~encoder2_encoder0[5]) & encoder2_encoder0[6]))));
	encoder2_encoder5[2] <= ((~encoder2_encoder0[5]) & (~encoder2_encoder0[6]));
	encoder2_encoder5[3] <= ((encoder2_encoder0[5] & encoder2_encoder0[6]) & encoder2_encoder0[7]);
end
assign encoder2_encoder_illegalk = ((encoder2_encoder0[8] & ((((encoder2_encoder0[0] | encoder2_encoder0[1]) | (~encoder2_encoder0[2])) | (~encoder2_encoder0[3])) | (~encoder2_encoder0[4]))) & (((((~encoder2_encoder0[5]) | (~encoder2_encoder0[6])) | (~encoder2_encoder0[7])) | (~encoder2_encoder0[4])) | (~encoder2_encoder1[6])));
assign encoder2_encoder_compls6 = ((encoder2_encoder3[0] & (~encoder2_encoder_disp_in)) | (encoder2_encoder3[1] & encoder2_encoder_disp_in));
always @(*) begin
	encoder2_encoder6 <= 2'd0;
	encoder2_encoder6[0] <= (encoder2_encoder_disp_in ^ (encoder2_encoder3[2] | encoder2_encoder3[3]));
	encoder2_encoder6[1] <= ((encoder2_encoder5[1] & (~encoder2_encoder6[0])) | (encoder2_encoder5[0] & encoder2_encoder6[0]));
end
assign encoder2_encoder_disp_out = (encoder2_encoder6[0] ^ (encoder2_encoder5[2] | encoder2_encoder5[3]));
always @(*) begin
	encoder2_encoder_data_out <= 10'd0;
	encoder2_encoder_data_out[0] <= (encoder2_encoder4[4] ^ encoder2_encoder6[1]);
	encoder2_encoder_data_out[1] <= (encoder2_encoder4[3] ^ encoder2_encoder6[1]);
	encoder2_encoder_data_out[2] <= (encoder2_encoder4[2] ^ encoder2_encoder6[1]);
	encoder2_encoder_data_out[3] <= (encoder2_encoder4[1] ^ encoder2_encoder6[1]);
	encoder2_encoder_data_out[4] <= (encoder2_encoder2[5] ^ encoder2_encoder_compls6);
	encoder2_encoder_data_out[5] <= (encoder2_encoder2[4] ^ encoder2_encoder_compls6);
	encoder2_encoder_data_out[6] <= (encoder2_encoder2[3] ^ encoder2_encoder_compls6);
	encoder2_encoder_data_out[7] <= (encoder2_encoder2[2] ^ encoder2_encoder_compls6);
	encoder2_encoder_data_out[8] <= (encoder2_encoder2[1] ^ encoder2_encoder_compls6);
	encoder2_encoder_data_out[9] <= (encoder2_encoder2[0] ^ encoder2_encoder_compls6);
end
always @(*) begin
	encoder3_encoder0 <= 9'd0;
	encoder3_encoder0[0] <= encoder3_encoder_data_in[0];
	encoder3_encoder0[1] <= encoder3_encoder_data_in[1];
	encoder3_encoder0[2] <= encoder3_encoder_data_in[2];
	encoder3_encoder0[3] <= encoder3_encoder_data_in[3];
	encoder3_encoder0[4] <= encoder3_encoder_data_in[4];
	encoder3_encoder0[5] <= encoder3_encoder_data_in[5];
	encoder3_encoder0[6] <= encoder3_encoder_data_in[6];
	encoder3_encoder0[7] <= encoder3_encoder_data_in[7];
	encoder3_encoder0[8] <= encoder3_encoder_k;
end
always @(*) begin
	encoder3_encoder1 <= 7'd0;
	encoder3_encoder1[0] <= ((encoder3_encoder0[0] & encoder3_encoder0[1]) | ((~encoder3_encoder0[0]) & (~encoder3_encoder0[1])));
	encoder3_encoder1[1] <= ((encoder3_encoder0[2] & encoder3_encoder0[3]) | ((~encoder3_encoder0[2]) & (~encoder3_encoder0[3])));
	encoder3_encoder1[2] <= (((((encoder3_encoder0[0] & encoder3_encoder0[1]) & (~encoder3_encoder0[2])) & (~encoder3_encoder0[3])) | (((encoder3_encoder0[2] & encoder3_encoder0[3]) & (~encoder3_encoder0[0])) & (~encoder3_encoder0[1]))) | ((~encoder3_encoder1[0]) & (~encoder3_encoder1[1])));
	encoder3_encoder1[3] <= (((encoder3_encoder0[0] & encoder3_encoder0[1]) & encoder3_encoder0[2]) & encoder3_encoder0[3]);
	encoder3_encoder1[4] <= ((((~encoder3_encoder0[0]) & (~encoder3_encoder0[1])) & (~encoder3_encoder0[2])) & (~encoder3_encoder0[3]));
	encoder3_encoder1[5] <= ((((~encoder3_encoder1[0]) & (~encoder3_encoder0[2])) & (~encoder3_encoder0[3])) | (((~encoder3_encoder1[1]) & (~encoder3_encoder0[0])) & (~encoder3_encoder0[1])));
	encoder3_encoder1[6] <= ((((~encoder3_encoder1[0]) & encoder3_encoder0[2]) & encoder3_encoder0[3]) | (((~encoder3_encoder1[1]) & encoder3_encoder0[0]) & encoder3_encoder0[1]));
end
always @(*) begin
	encoder3_encoder2 <= 6'd0;
	encoder3_encoder2[0] <= encoder3_encoder0[0];
	encoder3_encoder2[1] <= ((encoder3_encoder0[1] & (~encoder3_encoder1[3])) | encoder3_encoder1[4]);
	encoder3_encoder2[2] <= ((encoder3_encoder1[4] | encoder3_encoder0[2]) | ((((encoder3_encoder0[4] & encoder3_encoder0[3]) & (~encoder3_encoder0[2])) & (~encoder3_encoder0[1])) & (~encoder3_encoder0[0])));
	encoder3_encoder2[3] <= (encoder3_encoder0[3] & (~((encoder3_encoder0[0] & encoder3_encoder0[1]) & encoder3_encoder0[2])));
	encoder3_encoder2[4] <= ((encoder3_encoder0[4] | encoder3_encoder1[5]) & (~((((encoder3_encoder0[4] & encoder3_encoder0[3]) & (~encoder3_encoder0[2])) & (~encoder3_encoder0[1])) & (~encoder3_encoder0[0]))));
	encoder3_encoder2[5] <= (((((encoder3_encoder1[2] & (~encoder3_encoder0[4])) | (((encoder3_encoder0[4] & (~encoder3_encoder0[3])) & (~encoder3_encoder0[2])) & (~(encoder3_encoder0[0] & encoder3_encoder0[1])))) | (encoder3_encoder0[4] & encoder3_encoder1[3])) | (((((encoder3_encoder0[8] & encoder3_encoder0[4]) & encoder3_encoder0[3]) & encoder3_encoder0[2]) & (~encoder3_encoder0[1])) & (~encoder3_encoder0[0]))) | ((((encoder3_encoder0[4] & (~encoder3_encoder0[3])) & encoder3_encoder0[2]) & (~encoder3_encoder0[1])) & (~encoder3_encoder0[0])));
end
always @(*) begin
	encoder3_encoder3 <= 4'd0;
	encoder3_encoder3[0] <= (((((encoder3_encoder0[4] & encoder3_encoder0[3]) & (~encoder3_encoder0[2])) & (~encoder3_encoder0[1])) & (~encoder3_encoder0[0])) | (((~encoder3_encoder0[4]) & (~encoder3_encoder1[2])) & (~encoder3_encoder1[6])));
	encoder3_encoder3[1] <= ((encoder3_encoder0[8] | ((encoder3_encoder0[4] & (~encoder3_encoder1[2])) & (~encoder3_encoder1[5]))) | (((((~encoder3_encoder0[4]) & (~encoder3_encoder0[3])) & encoder3_encoder0[2]) & encoder3_encoder0[1]) & encoder3_encoder0[0]));
	encoder3_encoder3[2] <= encoder3_encoder3[0];
	encoder3_encoder3[3] <= (encoder3_encoder0[8] | ((encoder3_encoder0[4] & (~encoder3_encoder1[2])) & (~encoder3_encoder1[5])));
end
always @(*) begin
	encoder3_encoder4 <= 6'd0;
	if (encoder3_encoder_disp_in) begin
		encoder3_encoder4[5] <= (((~encoder3_encoder0[4]) & encoder3_encoder0[3]) & encoder3_encoder1[6]);
	end else begin
		encoder3_encoder4[5] <= ((encoder3_encoder0[4] & (~encoder3_encoder0[3])) & encoder3_encoder1[5]);
	end
	encoder3_encoder4[0] <= (((encoder3_encoder0[5] & encoder3_encoder0[6]) & encoder3_encoder0[7]) & (encoder3_encoder0[8] | encoder3_encoder4[5]));
	encoder3_encoder4[1] <= (encoder3_encoder0[5] & (~encoder3_encoder4[0]));
	encoder3_encoder4[2] <= (encoder3_encoder0[6] | (((~encoder3_encoder0[5]) & (~encoder3_encoder0[6])) & (~encoder3_encoder0[7])));
	encoder3_encoder4[3] <= encoder3_encoder0[7];
	encoder3_encoder4[4] <= (((~encoder3_encoder0[7]) & (encoder3_encoder0[6] ^ encoder3_encoder0[5])) | encoder3_encoder4[0]);
end
always @(*) begin
	encoder3_encoder5 <= 4'd0;
	encoder3_encoder5[0] <= (encoder3_encoder0[5] & encoder3_encoder0[6]);
	encoder3_encoder5[1] <= (((~encoder3_encoder0[5]) & (~encoder3_encoder0[6])) | (encoder3_encoder0[8] & ((encoder3_encoder0[5] & (~encoder3_encoder0[6])) | ((~encoder3_encoder0[5]) & encoder3_encoder0[6]))));
	encoder3_encoder5[2] <= ((~encoder3_encoder0[5]) & (~encoder3_encoder0[6]));
	encoder3_encoder5[3] <= ((encoder3_encoder0[5] & encoder3_encoder0[6]) & encoder3_encoder0[7]);
end
assign encoder3_encoder_illegalk = ((encoder3_encoder0[8] & ((((encoder3_encoder0[0] | encoder3_encoder0[1]) | (~encoder3_encoder0[2])) | (~encoder3_encoder0[3])) | (~encoder3_encoder0[4]))) & (((((~encoder3_encoder0[5]) | (~encoder3_encoder0[6])) | (~encoder3_encoder0[7])) | (~encoder3_encoder0[4])) | (~encoder3_encoder1[6])));
assign encoder3_encoder_compls6 = ((encoder3_encoder3[0] & (~encoder3_encoder_disp_in)) | (encoder3_encoder3[1] & encoder3_encoder_disp_in));
always @(*) begin
	encoder3_encoder6 <= 2'd0;
	encoder3_encoder6[0] <= (encoder3_encoder_disp_in ^ (encoder3_encoder3[2] | encoder3_encoder3[3]));
	encoder3_encoder6[1] <= ((encoder3_encoder5[1] & (~encoder3_encoder6[0])) | (encoder3_encoder5[0] & encoder3_encoder6[0]));
end
assign encoder3_encoder_disp_out = (encoder3_encoder6[0] ^ (encoder3_encoder5[2] | encoder3_encoder5[3]));
always @(*) begin
	encoder3_encoder_data_out <= 10'd0;
	encoder3_encoder_data_out[0] <= (encoder3_encoder4[4] ^ encoder3_encoder6[1]);
	encoder3_encoder_data_out[1] <= (encoder3_encoder4[3] ^ encoder3_encoder6[1]);
	encoder3_encoder_data_out[2] <= (encoder3_encoder4[2] ^ encoder3_encoder6[1]);
	encoder3_encoder_data_out[3] <= (encoder3_encoder4[1] ^ encoder3_encoder6[1]);
	encoder3_encoder_data_out[4] <= (encoder3_encoder2[5] ^ encoder3_encoder_compls6);
	encoder3_encoder_data_out[5] <= (encoder3_encoder2[4] ^ encoder3_encoder_compls6);
	encoder3_encoder_data_out[6] <= (encoder3_encoder2[3] ^ encoder3_encoder_compls6);
	encoder3_encoder_data_out[7] <= (encoder3_encoder2[2] ^ encoder3_encoder_compls6);
	encoder3_encoder_data_out[8] <= (encoder3_encoder2[1] ^ encoder3_encoder_compls6);
	encoder3_encoder_data_out[9] <= (encoder3_encoder2[0] ^ encoder3_encoder_compls6);
end
always @(*) begin
	encoder4_encoder0 <= 9'd0;
	encoder4_encoder0[0] <= encoder4_encoder_data_in[0];
	encoder4_encoder0[1] <= encoder4_encoder_data_in[1];
	encoder4_encoder0[2] <= encoder4_encoder_data_in[2];
	encoder4_encoder0[3] <= encoder4_encoder_data_in[3];
	encoder4_encoder0[4] <= encoder4_encoder_data_in[4];
	encoder4_encoder0[5] <= encoder4_encoder_data_in[5];
	encoder4_encoder0[6] <= encoder4_encoder_data_in[6];
	encoder4_encoder0[7] <= encoder4_encoder_data_in[7];
	encoder4_encoder0[8] <= encoder4_encoder_k;
end
always @(*) begin
	encoder4_encoder1 <= 7'd0;
	encoder4_encoder1[0] <= ((encoder4_encoder0[0] & encoder4_encoder0[1]) | ((~encoder4_encoder0[0]) & (~encoder4_encoder0[1])));
	encoder4_encoder1[1] <= ((encoder4_encoder0[2] & encoder4_encoder0[3]) | ((~encoder4_encoder0[2]) & (~encoder4_encoder0[3])));
	encoder4_encoder1[2] <= (((((encoder4_encoder0[0] & encoder4_encoder0[1]) & (~encoder4_encoder0[2])) & (~encoder4_encoder0[3])) | (((encoder4_encoder0[2] & encoder4_encoder0[3]) & (~encoder4_encoder0[0])) & (~encoder4_encoder0[1]))) | ((~encoder4_encoder1[0]) & (~encoder4_encoder1[1])));
	encoder4_encoder1[3] <= (((encoder4_encoder0[0] & encoder4_encoder0[1]) & encoder4_encoder0[2]) & encoder4_encoder0[3]);
	encoder4_encoder1[4] <= ((((~encoder4_encoder0[0]) & (~encoder4_encoder0[1])) & (~encoder4_encoder0[2])) & (~encoder4_encoder0[3]));
	encoder4_encoder1[5] <= ((((~encoder4_encoder1[0]) & (~encoder4_encoder0[2])) & (~encoder4_encoder0[3])) | (((~encoder4_encoder1[1]) & (~encoder4_encoder0[0])) & (~encoder4_encoder0[1])));
	encoder4_encoder1[6] <= ((((~encoder4_encoder1[0]) & encoder4_encoder0[2]) & encoder4_encoder0[3]) | (((~encoder4_encoder1[1]) & encoder4_encoder0[0]) & encoder4_encoder0[1]));
end
always @(*) begin
	encoder4_encoder2 <= 6'd0;
	encoder4_encoder2[0] <= encoder4_encoder0[0];
	encoder4_encoder2[1] <= ((encoder4_encoder0[1] & (~encoder4_encoder1[3])) | encoder4_encoder1[4]);
	encoder4_encoder2[2] <= ((encoder4_encoder1[4] | encoder4_encoder0[2]) | ((((encoder4_encoder0[4] & encoder4_encoder0[3]) & (~encoder4_encoder0[2])) & (~encoder4_encoder0[1])) & (~encoder4_encoder0[0])));
	encoder4_encoder2[3] <= (encoder4_encoder0[3] & (~((encoder4_encoder0[0] & encoder4_encoder0[1]) & encoder4_encoder0[2])));
	encoder4_encoder2[4] <= ((encoder4_encoder0[4] | encoder4_encoder1[5]) & (~((((encoder4_encoder0[4] & encoder4_encoder0[3]) & (~encoder4_encoder0[2])) & (~encoder4_encoder0[1])) & (~encoder4_encoder0[0]))));
	encoder4_encoder2[5] <= (((((encoder4_encoder1[2] & (~encoder4_encoder0[4])) | (((encoder4_encoder0[4] & (~encoder4_encoder0[3])) & (~encoder4_encoder0[2])) & (~(encoder4_encoder0[0] & encoder4_encoder0[1])))) | (encoder4_encoder0[4] & encoder4_encoder1[3])) | (((((encoder4_encoder0[8] & encoder4_encoder0[4]) & encoder4_encoder0[3]) & encoder4_encoder0[2]) & (~encoder4_encoder0[1])) & (~encoder4_encoder0[0]))) | ((((encoder4_encoder0[4] & (~encoder4_encoder0[3])) & encoder4_encoder0[2]) & (~encoder4_encoder0[1])) & (~encoder4_encoder0[0])));
end
always @(*) begin
	encoder4_encoder3 <= 4'd0;
	encoder4_encoder3[0] <= (((((encoder4_encoder0[4] & encoder4_encoder0[3]) & (~encoder4_encoder0[2])) & (~encoder4_encoder0[1])) & (~encoder4_encoder0[0])) | (((~encoder4_encoder0[4]) & (~encoder4_encoder1[2])) & (~encoder4_encoder1[6])));
	encoder4_encoder3[1] <= ((encoder4_encoder0[8] | ((encoder4_encoder0[4] & (~encoder4_encoder1[2])) & (~encoder4_encoder1[5]))) | (((((~encoder4_encoder0[4]) & (~encoder4_encoder0[3])) & encoder4_encoder0[2]) & encoder4_encoder0[1]) & encoder4_encoder0[0]));
	encoder4_encoder3[2] <= encoder4_encoder3[0];
	encoder4_encoder3[3] <= (encoder4_encoder0[8] | ((encoder4_encoder0[4] & (~encoder4_encoder1[2])) & (~encoder4_encoder1[5])));
end
always @(*) begin
	encoder4_encoder4 <= 6'd0;
	if (encoder4_encoder_disp_in) begin
		encoder4_encoder4[5] <= (((~encoder4_encoder0[4]) & encoder4_encoder0[3]) & encoder4_encoder1[6]);
	end else begin
		encoder4_encoder4[5] <= ((encoder4_encoder0[4] & (~encoder4_encoder0[3])) & encoder4_encoder1[5]);
	end
	encoder4_encoder4[0] <= (((encoder4_encoder0[5] & encoder4_encoder0[6]) & encoder4_encoder0[7]) & (encoder4_encoder0[8] | encoder4_encoder4[5]));
	encoder4_encoder4[1] <= (encoder4_encoder0[5] & (~encoder4_encoder4[0]));
	encoder4_encoder4[2] <= (encoder4_encoder0[6] | (((~encoder4_encoder0[5]) & (~encoder4_encoder0[6])) & (~encoder4_encoder0[7])));
	encoder4_encoder4[3] <= encoder4_encoder0[7];
	encoder4_encoder4[4] <= (((~encoder4_encoder0[7]) & (encoder4_encoder0[6] ^ encoder4_encoder0[5])) | encoder4_encoder4[0]);
end
always @(*) begin
	encoder4_encoder5 <= 4'd0;
	encoder4_encoder5[0] <= (encoder4_encoder0[5] & encoder4_encoder0[6]);
	encoder4_encoder5[1] <= (((~encoder4_encoder0[5]) & (~encoder4_encoder0[6])) | (encoder4_encoder0[8] & ((encoder4_encoder0[5] & (~encoder4_encoder0[6])) | ((~encoder4_encoder0[5]) & encoder4_encoder0[6]))));
	encoder4_encoder5[2] <= ((~encoder4_encoder0[5]) & (~encoder4_encoder0[6]));
	encoder4_encoder5[3] <= ((encoder4_encoder0[5] & encoder4_encoder0[6]) & encoder4_encoder0[7]);
end
assign encoder4_encoder_illegalk = ((encoder4_encoder0[8] & ((((encoder4_encoder0[0] | encoder4_encoder0[1]) | (~encoder4_encoder0[2])) | (~encoder4_encoder0[3])) | (~encoder4_encoder0[4]))) & (((((~encoder4_encoder0[5]) | (~encoder4_encoder0[6])) | (~encoder4_encoder0[7])) | (~encoder4_encoder0[4])) | (~encoder4_encoder1[6])));
assign encoder4_encoder_compls6 = ((encoder4_encoder3[0] & (~encoder4_encoder_disp_in)) | (encoder4_encoder3[1] & encoder4_encoder_disp_in));
always @(*) begin
	encoder4_encoder6 <= 2'd0;
	encoder4_encoder6[0] <= (encoder4_encoder_disp_in ^ (encoder4_encoder3[2] | encoder4_encoder3[3]));
	encoder4_encoder6[1] <= ((encoder4_encoder5[1] & (~encoder4_encoder6[0])) | (encoder4_encoder5[0] & encoder4_encoder6[0]));
end
assign encoder4_encoder_disp_out = (encoder4_encoder6[0] ^ (encoder4_encoder5[2] | encoder4_encoder5[3]));
always @(*) begin
	encoder4_encoder_data_out <= 10'd0;
	encoder4_encoder_data_out[0] <= (encoder4_encoder4[4] ^ encoder4_encoder6[1]);
	encoder4_encoder_data_out[1] <= (encoder4_encoder4[3] ^ encoder4_encoder6[1]);
	encoder4_encoder_data_out[2] <= (encoder4_encoder4[2] ^ encoder4_encoder6[1]);
	encoder4_encoder_data_out[3] <= (encoder4_encoder4[1] ^ encoder4_encoder6[1]);
	encoder4_encoder_data_out[4] <= (encoder4_encoder2[5] ^ encoder4_encoder_compls6);
	encoder4_encoder_data_out[5] <= (encoder4_encoder2[4] ^ encoder4_encoder_compls6);
	encoder4_encoder_data_out[6] <= (encoder4_encoder2[3] ^ encoder4_encoder_compls6);
	encoder4_encoder_data_out[7] <= (encoder4_encoder2[2] ^ encoder4_encoder_compls6);
	encoder4_encoder_data_out[8] <= (encoder4_encoder2[1] ^ encoder4_encoder_compls6);
	encoder4_encoder_data_out[9] <= (encoder4_encoder2[0] ^ encoder4_encoder_compls6);
end
assign transmitter_tx_serial0 = transmitter_tx_serial1;
always @(*) begin
	fsm_next_state <= 2'd0;
	transmitter_tx_ready_transmitter42b_next_value0 <= 1'd0;
	transmitter_tx_ready_transmitter42b_next_value_ce0 <= 1'd0;
	transmitter_tx_data_transmitter42b_next_value1 <= 8'd0;
	transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd0;
	transmitter_tx_42bdone_transmitter42b_next_value2 <= 1'd0;
	transmitter_tx_42bdone_transmitter42b_next_value_ce2 <= 1'd0;
	transmitter_byte_cnt_transmitter42b_next_value3 <= 4'd0;
	transmitter_byte_cnt_transmitter42b_next_value_ce3 <= 1'd0;
	fsm_next_state <= fsm_state;
	case (fsm_state)
		1'd1: begin
			if (transmitter_tx_done) begin
				transmitter_byte_cnt_transmitter42b_next_value3 <= (transmitter_byte_cnt + 1'd1);
				transmitter_byte_cnt_transmitter42b_next_value_ce3 <= 1'd1;
				if ((transmitter_byte_cnt < 4'd8)) begin
					transmitter_tx_ready_transmitter42b_next_value0 <= 1'd1;
					transmitter_tx_ready_transmitter42b_next_value_ce0 <= 1'd1;
					fsm_next_state <= 2'd2;
				end else begin
					fsm_next_state <= 1'd0;
					transmitter_tx_42bdone_transmitter42b_next_value2 <= 1'd1;
					transmitter_tx_42bdone_transmitter42b_next_value_ce2 <= 1'd1;
					transmitter_tx_ready_transmitter42b_next_value0 <= 1'd0;
					transmitter_tx_ready_transmitter42b_next_value_ce0 <= 1'd1;
					transmitter_byte_cnt_transmitter42b_next_value3 <= 1'd0;
					transmitter_byte_cnt_transmitter42b_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd2: begin
			case (transmitter_byte_cnt)
				1'd1: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[9:5];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				2'd2: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[14:10];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				2'd3: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[19:15];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				3'd4: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[24:20];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				3'd5: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[29:25];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				3'd6: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[34:30];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				3'd7: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[39:35];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
				4'd8: begin
					transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[41:40];
					transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
				end
			endcase
			if ((~transmitter_tx_done)) begin
				fsm_next_state <= 1'd1;
			end
		end
		default: begin
			if ((transmitter_trans_en & (~transmitter_tx_done))) begin
				fsm_next_state <= 1'd1;
				transmitter_tx_ready_transmitter42b_next_value0 <= 1'd1;
				transmitter_tx_ready_transmitter42b_next_value_ce0 <= 1'd1;
				transmitter_tx_data_transmitter42b_next_value1 <= transmitter_data_in[4:0];
				transmitter_tx_data_transmitter42b_next_value_ce1 <= 1'd1;
			end else begin
				fsm_next_state <= 1'd0;
				transmitter_tx_ready_transmitter42b_next_value0 <= 1'd0;
				transmitter_tx_ready_transmitter42b_next_value_ce0 <= 1'd1;
			end
			transmitter_tx_42bdone_transmitter42b_next_value2 <= 1'd0;
			transmitter_tx_42bdone_transmitter42b_next_value_ce2 <= 1'd1;
		end
	endcase
end
assign transmitter_tx_strobe = (transmitter_tx_counter == 1'd0);
always @(*) begin
	transmitter_tx_latch_transmitter42b_t_next_value_ce0 <= 1'd0;
	transmitter_tx_done_transmitter42b_t_next_value_ce3 <= 1'd0;
	transmitter_tx_counter_transmitter42b_t_next_value1 <= 2'd0;
	transmitter_tx_counter_transmitter42b_t_next_value_ce1 <= 1'd0;
	transmitter_tx_serial1_transmitter42b_f_next_value <= 1'd0;
	transmitter_tx_serial1_transmitter42b_f_next_value_ce <= 1'd0;
	transmitter_tx_done_transmitter42b_t_next_value3 <= 1'd0;
	transmitter_tx_bitn_transmitter42b_t_next_value2 <= 3'd0;
	transmitter_tx_bitn_transmitter42b_t_next_value_ce2 <= 1'd0;
	tx_next_state <= 2'd0;
	transmitter_tx_latch_transmitter42b_t_next_value0 <= 8'd0;
	tx_next_state <= tx_state;
	case (tx_state)
		1'd1: begin
			if (transmitter_tx_strobe) begin
				transmitter_tx_serial1_transmitter42b_f_next_value <= 1'd0;
				transmitter_tx_serial1_transmitter42b_f_next_value_ce <= 1'd1;
				tx_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (transmitter_tx_strobe) begin
				transmitter_tx_serial1_transmitter42b_f_next_value <= transmitter_tx_latch[0];
				transmitter_tx_serial1_transmitter42b_f_next_value_ce <= 1'd1;
				transmitter_tx_latch_transmitter42b_t_next_value0 <= {1'd0, transmitter_tx_latch[7:1]};
				transmitter_tx_latch_transmitter42b_t_next_value_ce0 <= 1'd1;
				transmitter_tx_bitn_transmitter42b_t_next_value2 <= (transmitter_tx_bitn + 1'd1);
				transmitter_tx_bitn_transmitter42b_t_next_value_ce2 <= 1'd1;
				if ((transmitter_tx_bitn == 3'd7)) begin
					tx_next_state <= 2'd3;
					transmitter_tx_bitn_transmitter42b_t_next_value2 <= 1'd0;
					transmitter_tx_bitn_transmitter42b_t_next_value_ce2 <= 1'd1;
					transmitter_tx_done_transmitter42b_t_next_value3 <= 1'd1;
					transmitter_tx_done_transmitter42b_t_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd3: begin
			if (transmitter_tx_strobe) begin
				transmitter_tx_serial1_transmitter42b_f_next_value <= 1'd1;
				transmitter_tx_serial1_transmitter42b_f_next_value_ce <= 1'd1;
				transmitter_tx_done_transmitter42b_t_next_value3 <= 1'd0;
				transmitter_tx_done_transmitter42b_t_next_value_ce3 <= 1'd1;
				tx_next_state <= 1'd0;
			end
		end
		default: begin
			if (transmitter_tx_ready) begin
				transmitter_tx_latch_transmitter42b_t_next_value0 <= transmitter_tx_data;
				transmitter_tx_latch_transmitter42b_t_next_value_ce0 <= 1'd1;
				transmitter_tx_counter_transmitter42b_t_next_value1 <= 2'd2;
				transmitter_tx_counter_transmitter42b_t_next_value_ce1 <= 1'd1;
				tx_next_state <= 1'd1;
			end else begin
				transmitter_tx_serial1_transmitter42b_f_next_value <= 1'd1;
				transmitter_tx_serial1_transmitter42b_f_next_value_ce <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	fsm_read_next_fsm_v3_1_f_next_value <= 1'd0;
	fsm_encoder_ready_fsm_v3_1_next_value1 <= 1'd0;
	fsm_read_next_fsm_v3_1_f_next_value_ce <= 1'd0;
	fsm_encoder_ready_fsm_v3_1_next_value_ce1 <= 1'd0;
	fsm_change_disp_fsm_v3_1_next_value0 <= 1'd0;
	fsm_tx_en_fsm_v3_1_next_value2 <= 1'd0;
	fsm_change_disp_fsm_v3_1_next_value_ce0 <= 1'd0;
	fsm_tx_en_fsm_v3_1_next_value_ce2 <= 1'd0;
	fsm_fifo_we_fsm_v3_1_t_next_value1 <= 1'd0;
	next_state <= 3'd0;
	fsm_fifo_we_fsm_v3_1_t_next_value_ce1 <= 1'd0;
	fsm_fifo_re_fsm_v3_1_t_next_value0 <= 1'd0;
	fsm_fifo_re_fsm_v3_1_t_next_value_ce0 <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			if ((~fsm_fifo_full)) begin
				fsm_fifo_we_fsm_v3_1_t_next_value1 <= 1'd1;
				fsm_fifo_we_fsm_v3_1_t_next_value_ce1 <= 1'd1;
				next_state <= 2'd2;
				fsm_read_next_fsm_v3_1_f_next_value <= 1'd0;
				fsm_read_next_fsm_v3_1_f_next_value_ce <= 1'd1;
			end else begin
				next_state <= 1'd0;
			end
		end
		2'd2: begin
			fsm_fifo_we_fsm_v3_1_t_next_value1 <= 1'd0;
			fsm_fifo_we_fsm_v3_1_t_next_value_ce1 <= 1'd1;
			if (fsm_trans_en) begin
				next_state <= 2'd3;
				fsm_fifo_re_fsm_v3_1_t_next_value0 <= 1'd1;
				fsm_fifo_re_fsm_v3_1_t_next_value_ce0 <= 1'd1;
			end else begin
				next_state <= 1'd0;
			end
		end
		2'd3: begin
			fsm_fifo_re_fsm_v3_1_t_next_value0 <= 1'd0;
			fsm_fifo_re_fsm_v3_1_t_next_value_ce0 <= 1'd1;
			next_state <= 3'd4;
		end
		3'd4: begin
			next_state <= 3'd5;
			fsm_encoder_ready_fsm_v3_1_next_value1 <= 1'd1;
			fsm_encoder_ready_fsm_v3_1_next_value_ce1 <= 1'd1;
			fsm_tx_en_fsm_v3_1_next_value2 <= 1'd1;
			fsm_tx_en_fsm_v3_1_next_value_ce2 <= 1'd1;
		end
		3'd5: begin
			fsm_tx_en_fsm_v3_1_next_value2 <= 1'd1;
			fsm_tx_en_fsm_v3_1_next_value_ce2 <= 1'd1;
			if (fsm_tx_done) begin
				next_state <= 1'd0;
				fsm_tx_en_fsm_v3_1_next_value2 <= 1'd0;
				fsm_tx_en_fsm_v3_1_next_value_ce2 <= 1'd1;
				fsm_change_disp_fsm_v3_1_next_value0 <= 1'd1;
				fsm_change_disp_fsm_v3_1_next_value_ce0 <= 1'd1;
			end
		end
		default: begin
			if (((fsm_trans_en & (~fsm_tx_done)) & (~fsm_fifo_empty))) begin
				next_state <= 2'd3;
				fsm_fifo_re_fsm_v3_1_t_next_value0 <= 1'd1;
				fsm_fifo_re_fsm_v3_1_t_next_value_ce0 <= 1'd1;
			end else begin
				if (((fsm_write_en & (~fsm_tx_done)) & (~fsm_fifo_full))) begin
					next_state <= 1'd1;
					fsm_read_next_fsm_v3_1_f_next_value <= 1'd1;
					fsm_read_next_fsm_v3_1_f_next_value_ce <= 1'd1;
				end
			end
			fsm_change_disp_fsm_v3_1_next_value0 <= 1'd0;
			fsm_change_disp_fsm_v3_1_next_value_ce0 <= 1'd1;
		end
	endcase
end
assign level1 = (level0 + readable);
always @(*) begin
	syncfifo_re <= 1'd0;
	syncfifo_re <= (syncfifo_readable & ((~readable) | re));
	syncfifo_re <= (re | (~readable));
end
always @(*) begin
	wrport_adr <= 5'd0;
	if (replace) begin
		wrport_adr <= (produce - 1'd1);
	end else begin
		wrport_adr <= produce;
	end
end
assign wrport_dat_w = syncfifo_din;
assign wrport_we = (syncfifo_we & (syncfifo_writable | replace));
assign do_read = (syncfifo_readable & syncfifo_re);
assign rdport_adr = consume;
assign syncfifo_dout = rdport_dat_r;
assign rdport_re = do_read;
always @(*) begin
	wrportTYPE_adr <= 5'd0;
	if (replace) begin
		wrportTYPE_adr <= (producet - 1'd1);
	end else begin
		wrportTYPE_adr <= producet;
	end
end
assign wrportTYPE_dat_w = syncfifo_dtin;
assign wrportTYPE_we = (syncfifo_we & (syncfifo_writable | replace));
assign do_readTYPE = (syncfifo_readable & syncfifo_re);
assign rdportTYPE_adr = consumet;
assign syncfifo_dtout = rdportTYPE_dat_r;
assign rdportTYPE_re = do_readTYPE;
always @(*) begin
	syncfifo_writable <= 1'd0;
	syncfifo_writable <= (level0 != 6'd32);
	syncfifo_writable <= (level0 != 6'd32);
end
always @(*) begin
	syncfifo_readable <= 1'd0;
	syncfifo_readable <= (level0 != 1'd0);
	syncfifo_readable <= (level0 != 1'd0);
end
assign sys_clk = clk12;
assign por_clk = clk12;
assign sys_rst = int_rst;

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	if (fsm_change_disp) begin
		encoder1_encoder_disp_in <= encoder1_encoder_disp_out;
		encoder2_encoder_disp_in <= encoder2_encoder_disp_out;
		encoder3_encoder_disp_in <= encoder3_encoder_disp_out;
		encoder4_encoder_disp_in <= encoder4_encoder_disp_out;
	end
	if (fsm_read_next) begin
		index <= (index + 1'd1);
	end
	wrport1_adr <= index;
	wrport2_adr <= index;
	data_out <= wrport1_dat_r;
	type_out <= wrport2_dat_r;
	fsm_state <= fsm_next_state;
	if (transmitter_tx_ready_transmitter42b_next_value_ce0) begin
		transmitter_tx_ready <= transmitter_tx_ready_transmitter42b_next_value0;
	end
	if (transmitter_tx_data_transmitter42b_next_value_ce1) begin
		transmitter_tx_data <= transmitter_tx_data_transmitter42b_next_value1;
	end
	if (transmitter_tx_42bdone_transmitter42b_next_value_ce2) begin
		transmitter_tx_42bdone <= transmitter_tx_42bdone_transmitter42b_next_value2;
	end
	if (transmitter_byte_cnt_transmitter42b_next_value_ce3) begin
		transmitter_byte_cnt <= transmitter_byte_cnt_transmitter42b_next_value3;
	end
	if ((transmitter_tx_counter == 1'd0)) begin
		transmitter_tx_counter <= 2'd2;
	end else begin
		transmitter_tx_counter <= (transmitter_tx_counter - 1'd1);
	end
	tx_state <= tx_next_state;
	if (transmitter_tx_latch_transmitter42b_t_next_value_ce0) begin
		transmitter_tx_latch <= transmitter_tx_latch_transmitter42b_t_next_value0;
	end
	if (transmitter_tx_counter_transmitter42b_t_next_value_ce1) begin
		transmitter_tx_counter <= transmitter_tx_counter_transmitter42b_t_next_value1;
	end
	if (transmitter_tx_serial1_transmitter42b_f_next_value_ce) begin
		transmitter_tx_serial1 <= transmitter_tx_serial1_transmitter42b_f_next_value;
	end
	if (transmitter_tx_bitn_transmitter42b_t_next_value_ce2) begin
		transmitter_tx_bitn <= transmitter_tx_bitn_transmitter42b_t_next_value2;
	end
	if (transmitter_tx_done_transmitter42b_t_next_value_ce3) begin
		transmitter_tx_done <= transmitter_tx_done_transmitter42b_t_next_value3;
	end
	state <= next_state;
	if (fsm_fifo_re_fsm_v3_1_t_next_value_ce0) begin
		fsm_fifo_re <= fsm_fifo_re_fsm_v3_1_t_next_value0;
	end
	if (fsm_read_next_fsm_v3_1_f_next_value_ce) begin
		fsm_read_next <= fsm_read_next_fsm_v3_1_f_next_value;
	end
	if (fsm_change_disp_fsm_v3_1_next_value_ce0) begin
		fsm_change_disp <= fsm_change_disp_fsm_v3_1_next_value0;
	end
	if (fsm_fifo_we_fsm_v3_1_t_next_value_ce1) begin
		fsm_fifo_we <= fsm_fifo_we_fsm_v3_1_t_next_value1;
	end
	if (fsm_encoder_ready_fsm_v3_1_next_value_ce1) begin
		fsm_encoder_ready <= fsm_encoder_ready_fsm_v3_1_next_value1;
	end
	if (fsm_tx_en_fsm_v3_1_next_value_ce2) begin
		fsm_tx_en <= fsm_tx_en_fsm_v3_1_next_value2;
	end
	if (syncfifo_re) begin
		readable <= 1'd1;
	end else begin
		if (re) begin
			readable <= 1'd0;
		end
	end
	if (((syncfifo_we & syncfifo_writable) & (~replace))) begin
		produce <= (produce + 1'd1);
	end
	if (do_read) begin
		consume <= (consume + 1'd1);
	end
	if (((syncfifo_we & syncfifo_writable) & (~replace))) begin
		if ((~do_read)) begin
			level0 <= (level0 + 1'd1);
		end
	end else begin
		if (do_read) begin
			level0 <= (level0 - 1'd1);
		end
	end
	if (((syncfifo_we & syncfifo_writable) & (~replace))) begin
		producet <= (producet + 1'd1);
	end
	if (do_readTYPE) begin
		consumet <= (consumet + 1'd1);
	end
	if (((syncfifo_we & syncfifo_writable) & (~replace))) begin
		if ((~do_readTYPE)) begin
			level0 <= (level0 + 1'd1);
		end
	end else begin
		if (do_readTYPE) begin
			level0 <= (level0 - 1'd1);
		end
	end
	if (sys_rst) begin
		index <= 5'd0;
		data_out <= 32'd0;
		type_out <= 2'd0;
		wrport1_adr <= 5'd0;
		wrport2_adr <= 5'd0;
		fsm_read_next <= 1'd0;
		fsm_encoder_ready <= 1'd0;
		fsm_change_disp <= 1'd0;
		fsm_tx_en <= 1'd0;
		fsm_fifo_we <= 1'd0;
		fsm_fifo_re <= 1'd0;
		encoder1_encoder_disp_in <= 1'd0;
		encoder2_encoder_disp_in <= 1'd0;
		encoder3_encoder_disp_in <= 1'd0;
		encoder4_encoder_disp_in <= 1'd0;
		transmitter_tx_42bdone <= 1'd0;
		transmitter_tx_counter <= 2'd0;
		transmitter_tx_serial1 <= 1'd1;
		transmitter_tx_data <= 8'd0;
		transmitter_tx_bitn <= 3'd0;
		transmitter_tx_ready <= 1'd0;
		transmitter_tx_latch <= 8'd0;
		transmitter_tx_done <= 1'd0;
		transmitter_byte_cnt <= 4'd0;
		readable <= 1'd0;
		level0 <= 6'd0;
		produce <= 5'd0;
		consume <= 5'd0;
		producet <= 5'd0;
		consumet <= 5'd0;
		fsm_state <= 2'd0;
		tx_state <= 2'd0;
		state <= 3'd0;
	end
end

reg [31:0] INPUT[0:31];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	if (wrport1_we)
		INPUT[wrport1_adr] <= wrport1_dat_w;
	memdat <= INPUT[wrport1_adr];
end

assign wrport1_dat_r = memdat;

initial begin
	$readmemh("INPUT.init", INPUT);
end

reg [1:0] TYPE[0:31];
reg [1:0] memdat_1;
always @(posedge sys_clk) begin
	if (wrport2_we)
		TYPE[wrport2_adr] <= wrport2_dat_w;
	memdat_1 <= TYPE[wrport2_adr];
end

assign wrport2_dat_r = memdat_1;

initial begin
	$readmemh("TYPE.init", TYPE);
end

reg [31:0] DATA[0:31];
reg [31:0] memdat_2;
reg [31:0] memdat_3;
always @(posedge sys_clk) begin
	if (wrport_we)
		DATA[wrport_adr] <= wrport_dat_w;
	memdat_2 <= DATA[wrport_adr];
end

always @(posedge sys_clk) begin
	if (rdport_re)
		memdat_3 <= DATA[rdport_adr];
end

assign wrport_dat_r = memdat_2;
assign rdport_dat_r = memdat_3;

reg [1:0] TYPE_1[0:31];
reg [1:0] memdat_4;
reg [1:0] memdat_5;
always @(posedge sys_clk) begin
	if (wrportTYPE_we)
		TYPE_1[wrportTYPE_adr] <= wrportTYPE_dat_w;
	memdat_4 <= TYPE_1[wrportTYPE_adr];
end

always @(posedge sys_clk) begin
	if (rdportTYPE_re)
		memdat_5 <= TYPE_1[rdportTYPE_adr];
end

assign wrportTYPE_dat_r = memdat_4;
assign rdportTYPE_dat_r = memdat_5;

endmodule
