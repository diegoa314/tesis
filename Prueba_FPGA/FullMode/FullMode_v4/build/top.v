//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-06-18 18:26:48
//--------------------------------------------------------------------------------
module top(
	input user_btn,
	input user_btn_1,
	output serial_tx,
	input serial_rx,
	(* dont_touch = "true" *)	input clk12
);

reg [3:0] counter = 4'd0;
wire tx_link_ready;
wire [31:0] tx_data_in;
wire [1:0] tx_data_type_in;
reg [39:0] tx_data_out = 40'd0;
reg tx_fifo_empty = 1'd1;
wire tx_fifo_re;
wire tx_tx_init_done;
wire tx_pll_lock;
reg tx_reset = 1'd0;
reg [7:0] tx_d0 = 8'd0;
reg [7:0] tx_d1 = 8'd0;
reg [7:0] tx_d2 = 8'd0;
reg [7:0] tx_d3 = 8'd0;
reg tx_k0 = 1'd0;
reg tx_k1 = 1'd0;
reg tx_k2 = 1'd0;
reg tx_k3 = 1'd0;
reg [9:0] tx_output0 = 10'd0;
reg [9:0] tx_output1 = 10'd0;
reg [9:0] tx_output2 = 10'd0;
reg [9:0] tx_output3 = 10'd0;
reg tx_disparity0 = 1'd0;
reg tx_disparity1 = 1'd0;
reg tx_disparity2 = 1'd0;
reg tx_disparity3 = 1'd0;
wire [7:0] tx_singleencoder0_d;
wire tx_singleencoder0_k;
reg tx_singleencoder0_disp_in = 1'd0;
wire [9:0] tx_singleencoder0_output;
reg tx_singleencoder0_disp_out = 1'd0;
reg [5:0] tx_singleencoder0_code6b = 6'd0;
reg tx_singleencoder0_code6b_unbalanced = 1'd0;
reg tx_singleencoder0_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder0_code4b = 4'd0;
reg tx_singleencoder0_code4b_unbalanced = 1'd0;
reg tx_singleencoder0_code4b_flip = 1'd0;
reg tx_singleencoder0_alt7_rd0 = 1'd0;
reg tx_singleencoder0_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder0_output_6b = 6'd0;
wire tx_singleencoder0_disp_inter;
reg [3:0] tx_singleencoder0_output_4b = 4'd0;
wire [9:0] tx_singleencoder0_output_msb_first;
wire [7:0] tx_singleencoder1_d;
wire tx_singleencoder1_k;
wire tx_singleencoder1_disp_in;
wire [9:0] tx_singleencoder1_output;
reg tx_singleencoder1_disp_out = 1'd0;
reg [5:0] tx_singleencoder1_code6b = 6'd0;
reg tx_singleencoder1_code6b_unbalanced = 1'd0;
reg tx_singleencoder1_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder1_code4b = 4'd0;
reg tx_singleencoder1_code4b_unbalanced = 1'd0;
reg tx_singleencoder1_code4b_flip = 1'd0;
reg tx_singleencoder1_alt7_rd0 = 1'd0;
reg tx_singleencoder1_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder1_output_6b = 6'd0;
wire tx_singleencoder1_disp_inter;
reg [3:0] tx_singleencoder1_output_4b = 4'd0;
wire [9:0] tx_singleencoder1_output_msb_first;
wire [7:0] tx_singleencoder2_d;
wire tx_singleencoder2_k;
wire tx_singleencoder2_disp_in;
wire [9:0] tx_singleencoder2_output;
reg tx_singleencoder2_disp_out = 1'd0;
reg [5:0] tx_singleencoder2_code6b = 6'd0;
reg tx_singleencoder2_code6b_unbalanced = 1'd0;
reg tx_singleencoder2_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder2_code4b = 4'd0;
reg tx_singleencoder2_code4b_unbalanced = 1'd0;
reg tx_singleencoder2_code4b_flip = 1'd0;
reg tx_singleencoder2_alt7_rd0 = 1'd0;
reg tx_singleencoder2_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder2_output_6b = 6'd0;
wire tx_singleencoder2_disp_inter;
reg [3:0] tx_singleencoder2_output_4b = 4'd0;
wire [9:0] tx_singleencoder2_output_msb_first;
wire [7:0] tx_singleencoder3_d;
wire tx_singleencoder3_k;
wire tx_singleencoder3_disp_in;
wire [9:0] tx_singleencoder3_output;
reg tx_singleencoder3_disp_out = 1'd0;
reg [5:0] tx_singleencoder3_code6b = 6'd0;
reg tx_singleencoder3_code6b_unbalanced = 1'd0;
reg tx_singleencoder3_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder3_code4b = 4'd0;
reg tx_singleencoder3_code4b_unbalanced = 1'd0;
reg tx_singleencoder3_code4b_flip = 1'd0;
reg tx_singleencoder3_alt7_rd0 = 1'd0;
reg tx_singleencoder3_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder3_output_6b = 6'd0;
wire tx_singleencoder3_disp_inter;
reg [3:0] tx_singleencoder3_output_4b = 4'd0;
wire [9:0] tx_singleencoder3_output_msb_first;
reg [31:0] tx_crc_encoder_i_data_payload = 32'd0;
wire tx_crc_encoder_i_data_strobe;
wire tx_crc_encoder_reset;
wire [19:0] tx_crc_encoder_o_crc;
wire [31:0] tx_crc_encoder_crc_dat;
reg [19:0] tx_crc_encoder_crc_cur = 20'd1048575;
reg [19:0] tx_crc_encoder_crc_next = 20'd597792;
wire tx_fsm_link_ready;
wire tx_fsm_fifo_empty;
wire [1:0] tx_fsm_data_type;
reg tx_fsm_sop = 1'd0;
reg tx_fsm_eop = 1'd0;
reg tx_fsm_idle = 1'd0;
reg tx_fsm_fifo_ready = 1'd0;
reg tx_fsm_encoder_ready = 1'd0;
reg tx_fsm_change_disp = 1'd0;
reg tx_fsm_fifo_re = 1'd0;
reg tx_fsm_strobe_crc = 1'd0;
wire tx_fsm_reset0;
wire tx_fsm_system_ready;
reg tx_fsm_reset_crc = 1'd0;
reg [1:0] tx_fsm_counter_idle = 2'd0;
wire tx_fsm_reset1;
reg [4:0] memoria_index = 5'd0;
reg [31:0] memoria_data_out = 32'd0;
reg [1:0] memoria_type_out = 2'd0;
reg [2:0] memoria_wrport1_adr = 3'd0;
wire [31:0] memoria_wrport1_dat_r;
reg memoria_wrport1_we = 1'd0;
reg [31:0] memoria_wrport1_dat_w = 32'd0;
reg [2:0] memoria_wrport2_adr = 3'd0;
wire [1:0] memoria_wrport2_dat_r;
reg memoria_wrport2_we = 1'd0;
reg [1:0] memoria_wrport2_dat_w = 2'd0;
wire receiver_top_writable;
wire receiver_top_readable;
wire [39:0] receiver_top_din;
wire receiver_top_tx_40done;
wire receiver_top_tx_init_done;
wire receiver_top_pll_lock;
wire receiver_top_trans_en;
wire receiver_top_tx_serial;
wire [39:0] receiver_top_tx_transmitter_data_in;
wire receiver_top_tx_transmitter_trans_en;
wire receiver_top_tx_transmitter_tx_serial0;
reg receiver_top_tx_transmitter_tx_40bdone = 1'd0;
reg receiver_top_tx_transmitter_re = 1'd0;
wire receiver_top_tx_transmitter_fifoEmpty;
reg [1:0] receiver_top_tx_transmitter_tx_counter = 2'd0;
reg receiver_top_tx_transmitter_tx_serial1 = 1'd1;
reg [7:0] receiver_top_tx_transmitter_tx_data = 8'd0;
wire receiver_top_tx_transmitter_tx_strobe;
reg [2:0] receiver_top_tx_transmitter_tx_bitn = 3'd0;
reg receiver_top_tx_transmitter_tx_ready = 1'd0;
reg [7:0] receiver_top_tx_transmitter_tx_latch = 8'd0;
reg receiver_top_tx_transmitter_tx_done = 1'd0;
reg [3:0] receiver_top_tx_transmitter_byte_cnt = 4'd0;
reg [1:0] receiver_top_tx_transmitter_aux = 2'd0;
wire receiver_top_fifo_re;
reg receiver_top_fifo_readable = 1'd0;
reg receiver_top_fifo_syncfifo_we = 1'd0;
wire receiver_top_fifo_syncfifo_writable;
wire receiver_top_fifo_syncfifo_re;
wire receiver_top_fifo_syncfifo_readable;
wire [39:0] receiver_top_fifo_syncfifo_din;
wire [39:0] receiver_top_fifo_syncfifo_dout;
reg [3:0] receiver_top_fifo_level0 = 4'd0;
reg receiver_top_fifo_replace = 1'd0;
reg [3:0] receiver_top_fifo_produce = 4'd0;
reg [3:0] receiver_top_fifo_consume = 4'd0;
reg [3:0] receiver_top_fifo_wrport_adr = 4'd0;
wire [39:0] receiver_top_fifo_wrport_dat_r;
wire receiver_top_fifo_wrport_we;
wire [39:0] receiver_top_fifo_wrport_dat_w;
wire receiver_top_fifo_do_read;
wire [3:0] receiver_top_fifo_rdport_adr;
wire [39:0] receiver_top_fifo_rdport_dat_r;
wire receiver_top_fifo_rdport_re;
wire [3:0] receiver_top_fifo_level1;
reg [2:0] tx_state = 3'd0;
reg [2:0] tx_next_state = 3'd0;
reg tx_fsm_fifo_re_next_value0 = 1'd0;
reg tx_fsm_fifo_re_next_value_ce0 = 1'd0;
reg tx_fsm_sop_next_value1 = 1'd0;
reg tx_fsm_sop_next_value_ce1 = 1'd0;
reg tx_fsm_idle_next_value2 = 1'd0;
reg tx_fsm_idle_next_value_ce2 = 1'd0;
reg tx_fsm_change_disp_next_value3 = 1'd0;
reg tx_fsm_change_disp_next_value_ce3 = 1'd0;
reg [1:0] tx_fsm_counter_idle_next_value4 = 2'd0;
reg tx_fsm_counter_idle_next_value_ce4 = 1'd0;
reg tx_fsm_encoder_ready_next_value5 = 1'd0;
reg tx_fsm_encoder_ready_next_value_ce5 = 1'd0;
reg tx_fsm_fifo_ready_next_value6 = 1'd0;
reg tx_fsm_fifo_ready_next_value_ce6 = 1'd0;
reg tx_fsm_strobe_crc_next_value7 = 1'd0;
reg tx_fsm_strobe_crc_next_value_ce7 = 1'd0;
reg tx_fsm_eop_next_value8 = 1'd0;
reg tx_fsm_eop_next_value_ce8 = 1'd0;
reg tx_fsm_reset_crc_next_value9 = 1'd0;
reg tx_fsm_reset_crc_next_value_ce9 = 1'd0;
reg [1:0] receiver_top_fsm_state = 2'd0;
reg [1:0] receiver_top_fsm_next_state = 2'd0;
reg receiver_top_tx_transmitter_re_fsm_t_next_value0 = 1'd0;
reg receiver_top_tx_transmitter_re_fsm_t_next_value_ce0 = 1'd0;
reg receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0 = 1'd0;
reg receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0 = 1'd0;
reg [7:0] receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 = 8'd0;
reg receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 = 1'd0;
reg receiver_top_tx_transmitter_tx_40bdone_fsm_next_value0 = 1'd0;
reg receiver_top_tx_transmitter_tx_40bdone_fsm_next_value_ce0 = 1'd0;
reg [1:0] receiver_top_tx_transmitter_aux_fsm_next_value1 = 2'd0;
reg receiver_top_tx_transmitter_aux_fsm_next_value_ce1 = 1'd0;
reg [3:0] receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value1 = 4'd0;
reg receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value_ce1 = 1'd0;
reg [1:0] receiver_top_tx_state = 2'd0;
reg [1:0] receiver_top_tx_next_state = 2'd0;
reg [7:0] receiver_top_tx_transmitter_tx_latch_tx_t_next_value0 = 8'd0;
reg receiver_top_tx_transmitter_tx_latch_tx_t_next_value_ce0 = 1'd0;
reg [1:0] receiver_top_tx_transmitter_tx_counter_tx_t_next_value1 = 2'd0;
reg receiver_top_tx_transmitter_tx_counter_tx_t_next_value_ce1 = 1'd0;
reg receiver_top_tx_transmitter_tx_serial1_tx_f_next_value = 1'd0;
reg receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce = 1'd0;
reg [2:0] receiver_top_tx_transmitter_tx_bitn_tx_t_next_value2 = 3'd0;
reg receiver_top_tx_transmitter_tx_bitn_tx_t_next_value_ce2 = 1'd0;
reg receiver_top_tx_transmitter_tx_done_tx_t_next_value3 = 1'd0;
reg receiver_top_tx_transmitter_tx_done_tx_t_next_value_ce3 = 1'd0;
reg [1:0] receiver_top_state = 2'd0;
reg [1:0] receiver_top_next_state = 2'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
reg [5:0] f_array_muxed0 = 6'd0;
reg f_array_muxed1 = 1'd0;
reg f_array_muxed2 = 1'd0;
reg [3:0] rhs_array_muxed0 = 4'd0;
reg rhs_array_muxed1 = 1'd0;
reg f_array_muxed3 = 1'd0;
reg [5:0] f_array_muxed4 = 6'd0;
reg f_array_muxed5 = 1'd0;
reg f_array_muxed6 = 1'd0;
reg [3:0] rhs_array_muxed2 = 4'd0;
reg rhs_array_muxed3 = 1'd0;
reg f_array_muxed7 = 1'd0;
reg [5:0] f_array_muxed8 = 6'd0;
reg f_array_muxed9 = 1'd0;
reg f_array_muxed10 = 1'd0;
reg [3:0] rhs_array_muxed4 = 4'd0;
reg rhs_array_muxed5 = 1'd0;
reg f_array_muxed11 = 1'd0;
reg [5:0] f_array_muxed12 = 6'd0;
reg f_array_muxed13 = 1'd0;
reg f_array_muxed14 = 1'd0;
reg [3:0] rhs_array_muxed6 = 4'd0;
reg rhs_array_muxed7 = 1'd0;
reg f_array_muxed15 = 1'd0;

assign tx_data_in = memoria_data_out;
assign tx_data_type_in = memoria_type_out;
assign tx_link_ready = 1'd1;
assign serial_tx = receiver_top_tx_serial;
assign tx_tx_init_done = 1'd1;
assign tx_pll_lock = 1'd1;
assign receiver_top_din = tx_data_out;
assign receiver_top_trans_en = user_btn_1;
assign receiver_top_tx_init_done = 1'd1;
assign receiver_top_pll_lock = 1'd1;
assign tx_fsm_link_ready = tx_link_ready;
assign tx_fsm_fifo_empty = tx_fifo_empty;
assign tx_fsm_data_type = tx_data_type_in;
assign tx_fsm_reset0 = tx_reset;
assign tx_fsm_system_ready = (tx_tx_init_done & tx_pll_lock);
assign tx_fifo_re = tx_fsm_fifo_re;
assign tx_crc_encoder_i_data_strobe = tx_fsm_strobe_crc;
assign tx_crc_encoder_reset = tx_fsm_reset_crc;
always @(*) begin
	tx_crc_encoder_i_data_payload <= 32'd0;
	if (tx_fsm_encoder_ready) begin
		tx_crc_encoder_i_data_payload <= tx_data_in;
	end
end
always @(*) begin
	tx_data_out <= 40'd0;
	if (tx_fsm_encoder_ready) begin
		tx_data_out <= {tx_output3, tx_output2, tx_output1, tx_output0};
	end else begin
		tx_data_out <= 1'd0;
	end
end
assign tx_singleencoder1_disp_in = tx_singleencoder0_disp_out;
assign tx_singleencoder2_disp_in = tx_singleencoder1_disp_out;
assign tx_singleencoder3_disp_in = tx_singleencoder2_disp_out;
assign tx_singleencoder0_d = tx_d0;
assign tx_singleencoder0_k = tx_k0;
assign tx_singleencoder1_d = tx_d1;
assign tx_singleencoder1_k = tx_k1;
assign tx_singleencoder2_d = tx_d2;
assign tx_singleencoder2_k = tx_k2;
assign tx_singleencoder3_d = tx_d3;
assign tx_singleencoder3_k = tx_k3;
assign tx_singleencoder0_disp_inter = (tx_singleencoder0_disp_in ^ tx_singleencoder0_code6b_unbalanced);
always @(*) begin
	tx_singleencoder0_output_6b <= 6'd0;
	if (((~tx_singleencoder0_disp_in) & tx_singleencoder0_code6b_flip)) begin
		tx_singleencoder0_output_6b <= (~tx_singleencoder0_code6b);
	end else begin
		tx_singleencoder0_output_6b <= tx_singleencoder0_code6b;
	end
end
always @(*) begin
	tx_singleencoder0_disp_out <= 1'd0;
	tx_singleencoder0_output_4b <= 4'd0;
	if (((~tx_singleencoder0_disp_inter) & tx_singleencoder0_alt7_rd0)) begin
		tx_singleencoder0_disp_out <= (~tx_singleencoder0_disp_inter);
		tx_singleencoder0_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder0_disp_inter & tx_singleencoder0_alt7_rd1)) begin
			tx_singleencoder0_disp_out <= (~tx_singleencoder0_disp_inter);
			tx_singleencoder0_output_4b <= 4'd8;
		end else begin
			tx_singleencoder0_disp_out <= (tx_singleencoder0_disp_inter ^ tx_singleencoder0_code4b_unbalanced);
			if (((~tx_singleencoder0_disp_inter) & tx_singleencoder0_code4b_flip)) begin
				tx_singleencoder0_output_4b <= (~tx_singleencoder0_code4b);
			end else begin
				tx_singleencoder0_output_4b <= tx_singleencoder0_code4b;
			end
		end
	end
end
assign tx_singleencoder0_output_msb_first = {tx_singleencoder0_output_6b, tx_singleencoder0_output_4b};
assign tx_singleencoder0_output = tx_singleencoder0_output_msb_first;
assign tx_singleencoder1_disp_inter = (tx_singleencoder1_disp_in ^ tx_singleencoder1_code6b_unbalanced);
always @(*) begin
	tx_singleencoder1_output_6b <= 6'd0;
	if (((~tx_singleencoder1_disp_in) & tx_singleencoder1_code6b_flip)) begin
		tx_singleencoder1_output_6b <= (~tx_singleencoder1_code6b);
	end else begin
		tx_singleencoder1_output_6b <= tx_singleencoder1_code6b;
	end
end
always @(*) begin
	tx_singleencoder1_disp_out <= 1'd0;
	tx_singleencoder1_output_4b <= 4'd0;
	if (((~tx_singleencoder1_disp_inter) & tx_singleencoder1_alt7_rd0)) begin
		tx_singleencoder1_disp_out <= (~tx_singleencoder1_disp_inter);
		tx_singleencoder1_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder1_disp_inter & tx_singleencoder1_alt7_rd1)) begin
			tx_singleencoder1_disp_out <= (~tx_singleencoder1_disp_inter);
			tx_singleencoder1_output_4b <= 4'd8;
		end else begin
			tx_singleencoder1_disp_out <= (tx_singleencoder1_disp_inter ^ tx_singleencoder1_code4b_unbalanced);
			if (((~tx_singleencoder1_disp_inter) & tx_singleencoder1_code4b_flip)) begin
				tx_singleencoder1_output_4b <= (~tx_singleencoder1_code4b);
			end else begin
				tx_singleencoder1_output_4b <= tx_singleencoder1_code4b;
			end
		end
	end
end
assign tx_singleencoder1_output_msb_first = {tx_singleencoder1_output_6b, tx_singleencoder1_output_4b};
assign tx_singleencoder1_output = tx_singleencoder1_output_msb_first;
assign tx_singleencoder2_disp_inter = (tx_singleencoder2_disp_in ^ tx_singleencoder2_code6b_unbalanced);
always @(*) begin
	tx_singleencoder2_output_6b <= 6'd0;
	if (((~tx_singleencoder2_disp_in) & tx_singleencoder2_code6b_flip)) begin
		tx_singleencoder2_output_6b <= (~tx_singleencoder2_code6b);
	end else begin
		tx_singleencoder2_output_6b <= tx_singleencoder2_code6b;
	end
end
always @(*) begin
	tx_singleencoder2_disp_out <= 1'd0;
	tx_singleencoder2_output_4b <= 4'd0;
	if (((~tx_singleencoder2_disp_inter) & tx_singleencoder2_alt7_rd0)) begin
		tx_singleencoder2_disp_out <= (~tx_singleencoder2_disp_inter);
		tx_singleencoder2_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder2_disp_inter & tx_singleencoder2_alt7_rd1)) begin
			tx_singleencoder2_disp_out <= (~tx_singleencoder2_disp_inter);
			tx_singleencoder2_output_4b <= 4'd8;
		end else begin
			tx_singleencoder2_disp_out <= (tx_singleencoder2_disp_inter ^ tx_singleencoder2_code4b_unbalanced);
			if (((~tx_singleencoder2_disp_inter) & tx_singleencoder2_code4b_flip)) begin
				tx_singleencoder2_output_4b <= (~tx_singleencoder2_code4b);
			end else begin
				tx_singleencoder2_output_4b <= tx_singleencoder2_code4b;
			end
		end
	end
end
assign tx_singleencoder2_output_msb_first = {tx_singleencoder2_output_6b, tx_singleencoder2_output_4b};
assign tx_singleencoder2_output = tx_singleencoder2_output_msb_first;
assign tx_singleencoder3_disp_inter = (tx_singleencoder3_disp_in ^ tx_singleencoder3_code6b_unbalanced);
always @(*) begin
	tx_singleencoder3_output_6b <= 6'd0;
	if (((~tx_singleencoder3_disp_in) & tx_singleencoder3_code6b_flip)) begin
		tx_singleencoder3_output_6b <= (~tx_singleencoder3_code6b);
	end else begin
		tx_singleencoder3_output_6b <= tx_singleencoder3_code6b;
	end
end
always @(*) begin
	tx_singleencoder3_output_4b <= 4'd0;
	tx_singleencoder3_disp_out <= 1'd0;
	if (((~tx_singleencoder3_disp_inter) & tx_singleencoder3_alt7_rd0)) begin
		tx_singleencoder3_disp_out <= (~tx_singleencoder3_disp_inter);
		tx_singleencoder3_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder3_disp_inter & tx_singleencoder3_alt7_rd1)) begin
			tx_singleencoder3_disp_out <= (~tx_singleencoder3_disp_inter);
			tx_singleencoder3_output_4b <= 4'd8;
		end else begin
			tx_singleencoder3_disp_out <= (tx_singleencoder3_disp_inter ^ tx_singleencoder3_code4b_unbalanced);
			if (((~tx_singleencoder3_disp_inter) & tx_singleencoder3_code4b_flip)) begin
				tx_singleencoder3_output_4b <= (~tx_singleencoder3_code4b);
			end else begin
				tx_singleencoder3_output_4b <= tx_singleencoder3_code4b;
			end
		end
	end
end
assign tx_singleencoder3_output_msb_first = {tx_singleencoder3_output_6b, tx_singleencoder3_output_4b};
assign tx_singleencoder3_output = tx_singleencoder3_output_msb_first;
assign tx_crc_encoder_crc_dat = tx_crc_encoder_i_data_payload;
assign tx_crc_encoder_o_crc = tx_crc_encoder_crc_cur;
always @(*) begin
	tx_crc_encoder_crc_next <= 20'd597792;
	tx_crc_encoder_crc_next[0] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[15]);
	tx_crc_encoder_crc_next[1] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[16]);
	tx_crc_encoder_crc_next[2] <= (((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[3] <= (((((((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[4] <= (((((((((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[18]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[5] <= (((((((((((((((((((((tx_crc_encoder_crc_dat[14] ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[6] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[7] <= (((((((((((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[8] <= (((((((((((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[15]);
	tx_crc_encoder_crc_next[9] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[16]);
	tx_crc_encoder_crc_next[10] <= (((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[11] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[12] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[13] <= (((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[14] <= (((((((((((((((tx_crc_encoder_crc_dat[14] ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[15] <= (((((((((((((((tx_crc_encoder_crc_dat[15] ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[18]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[16] <= (((((((((((((tx_crc_encoder_crc_dat[16] ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[17] <= (((((((((((tx_crc_encoder_crc_dat[17] ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[18] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[19] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]);
end
assign tx_fsm_reset1 = tx_fsm_reset0;
always @(*) begin
	tx_fsm_change_disp_next_value_ce3 <= 1'd0;
	tx_fsm_counter_idle_next_value4 <= 2'd0;
	tx_fsm_counter_idle_next_value_ce4 <= 1'd0;
	tx_fsm_eop_next_value8 <= 1'd0;
	tx_fsm_eop_next_value_ce8 <= 1'd0;
	tx_fsm_encoder_ready_next_value5 <= 1'd0;
	tx_fsm_encoder_ready_next_value_ce5 <= 1'd0;
	tx_fsm_reset_crc_next_value9 <= 1'd0;
	tx_fsm_reset_crc_next_value_ce9 <= 1'd0;
	tx_next_state <= 3'd0;
	tx_fsm_fifo_re_next_value0 <= 1'd0;
	tx_fsm_fifo_re_next_value_ce0 <= 1'd0;
	tx_fsm_fifo_ready_next_value6 <= 1'd0;
	tx_fsm_sop_next_value1 <= 1'd0;
	tx_fsm_fifo_ready_next_value_ce6 <= 1'd0;
	tx_fsm_sop_next_value_ce1 <= 1'd0;
	tx_fsm_idle_next_value2 <= 1'd0;
	tx_fsm_idle_next_value_ce2 <= 1'd0;
	tx_fsm_strobe_crc_next_value7 <= 1'd0;
	tx_fsm_strobe_crc_next_value_ce7 <= 1'd0;
	tx_fsm_change_disp_next_value3 <= 1'd0;
	tx_next_state <= tx_state;
	case (tx_state)
		1'd1: begin
			if (tx_fsm_link_ready) begin
				if (tx_fsm_fifo_empty) begin
					tx_fsm_counter_idle_next_value4 <= (tx_fsm_counter_idle + 1'd1);
					tx_fsm_counter_idle_next_value_ce4 <= 1'd1;
					if ((tx_fsm_counter_idle == 2'd2)) begin
						tx_next_state <= 2'd2;
						tx_fsm_encoder_ready_next_value5 <= 1'd1;
						tx_fsm_encoder_ready_next_value_ce5 <= 1'd1;
					end else begin
						tx_next_state <= 1'd1;
					end
				end else begin
					tx_next_state <= 2'd3;
					tx_fsm_fifo_re_next_value0 <= 1'd1;
					tx_fsm_fifo_re_next_value_ce0 <= 1'd1;
					tx_fsm_sop_next_value1 <= 1'd1;
					tx_fsm_sop_next_value_ce1 <= 1'd1;
					tx_fsm_idle_next_value2 <= 1'd0;
					tx_fsm_idle_next_value_ce2 <= 1'd1;
				end
			end else begin
				tx_next_state <= 1'd0;
				tx_fsm_encoder_ready_next_value5 <= 1'd0;
				tx_fsm_encoder_ready_next_value_ce5 <= 1'd1;
				tx_fsm_idle_next_value2 <= 1'd0;
				tx_fsm_idle_next_value_ce2 <= 1'd1;
			end
		end
		2'd2: begin
			if (tx_fsm_link_ready) begin
				if (tx_fsm_fifo_empty) begin
					tx_next_state <= 2'd2;
				end else begin
					tx_next_state <= 2'd3;
					tx_fsm_fifo_re_next_value0 <= 1'd1;
					tx_fsm_fifo_re_next_value_ce0 <= 1'd1;
					tx_fsm_sop_next_value1 <= 1'd1;
					tx_fsm_sop_next_value_ce1 <= 1'd1;
					tx_fsm_idle_next_value2 <= 1'd0;
					tx_fsm_idle_next_value_ce2 <= 1'd1;
				end
			end else begin
				tx_next_state <= 1'd0;
				tx_fsm_encoder_ready_next_value5 <= 1'd0;
				tx_fsm_encoder_ready_next_value_ce5 <= 1'd1;
				tx_fsm_idle_next_value2 <= 1'd0;
				tx_fsm_idle_next_value_ce2 <= 1'd1;
			end
		end
		2'd3: begin
			tx_next_state <= 3'd4;
			tx_fsm_encoder_ready_next_value5 <= 1'd1;
			tx_fsm_encoder_ready_next_value_ce5 <= 1'd1;
			tx_fsm_fifo_ready_next_value6 <= 1'd1;
			tx_fsm_fifo_ready_next_value_ce6 <= 1'd1;
			tx_fsm_fifo_re_next_value0 <= 1'd1;
			tx_fsm_fifo_re_next_value_ce0 <= 1'd1;
			tx_fsm_sop_next_value1 <= 1'd0;
			tx_fsm_sop_next_value_ce1 <= 1'd1;
			tx_fsm_strobe_crc_next_value7 <= 1'd1;
			tx_fsm_strobe_crc_next_value_ce7 <= 1'd1;
		end
		3'd4: begin
			tx_fsm_encoder_ready_next_value5 <= 1'd1;
			tx_fsm_encoder_ready_next_value_ce5 <= 1'd1;
			tx_fsm_fifo_ready_next_value6 <= 1'd1;
			tx_fsm_fifo_ready_next_value_ce6 <= 1'd1;
			tx_fsm_strobe_crc_next_value7 <= 1'd1;
			tx_fsm_strobe_crc_next_value_ce7 <= 1'd1;
			if (tx_fsm_fifo_empty) begin
				tx_next_state <= 1'd0;
			end else begin
				tx_fsm_fifo_re_next_value0 <= 1'd1;
				tx_fsm_fifo_re_next_value_ce0 <= 1'd1;
			end
			if ((tx_fsm_data_type == 2'd2)) begin
				tx_fsm_eop_next_value8 <= 1'd1;
				tx_fsm_eop_next_value_ce8 <= 1'd1;
				tx_fsm_fifo_re_next_value0 <= 1'd0;
				tx_fsm_fifo_re_next_value_ce0 <= 1'd1;
				tx_next_state <= 3'd5;
				tx_fsm_strobe_crc_next_value7 <= 1'd0;
				tx_fsm_strobe_crc_next_value_ce7 <= 1'd1;
				tx_fsm_reset_crc_next_value9 <= 1'd1;
				tx_fsm_reset_crc_next_value_ce9 <= 1'd1;
			end
		end
		3'd5: begin
			tx_next_state <= 3'd6;
			tx_fsm_eop_next_value8 <= 1'd0;
			tx_fsm_eop_next_value_ce8 <= 1'd1;
			tx_fsm_idle_next_value2 <= 1'd1;
			tx_fsm_idle_next_value_ce2 <= 1'd1;
			tx_fsm_reset_crc_next_value9 <= 1'd0;
			tx_fsm_reset_crc_next_value_ce9 <= 1'd1;
		end
		3'd6: begin
			tx_fsm_fifo_ready_next_value6 <= 1'd0;
			tx_fsm_fifo_ready_next_value_ce6 <= 1'd1;
			tx_next_state <= 3'd7;
		end
		3'd7: begin
			tx_next_state <= 2'd2;
		end
		default: begin
			if ((tx_fsm_link_ready & tx_fsm_system_ready)) begin
				if ((~tx_fsm_fifo_empty)) begin
					tx_next_state <= 2'd3;
					tx_fsm_fifo_re_next_value0 <= 1'd1;
					tx_fsm_fifo_re_next_value_ce0 <= 1'd1;
					tx_fsm_sop_next_value1 <= 1'd1;
					tx_fsm_sop_next_value_ce1 <= 1'd1;
					tx_fsm_idle_next_value2 <= 1'd0;
					tx_fsm_idle_next_value_ce2 <= 1'd1;
				end else begin
					tx_next_state <= 1'd1;
					tx_fsm_idle_next_value2 <= 1'd1;
					tx_fsm_idle_next_value_ce2 <= 1'd1;
				end
				tx_fsm_change_disp_next_value3 <= 1'd1;
				tx_fsm_change_disp_next_value_ce3 <= 1'd1;
			end else begin
				tx_next_state <= 1'd0;
			end
		end
	endcase
end
assign receiver_top_writable = receiver_top_fifo_syncfifo_writable;
assign receiver_top_readable = receiver_top_fifo_readable;
assign receiver_top_fifo_syncfifo_din = receiver_top_din;
assign receiver_top_fifo_re = receiver_top_tx_transmitter_re;
assign receiver_top_tx_transmitter_data_in = receiver_top_fifo_syncfifo_dout;
assign receiver_top_tx_serial = receiver_top_tx_transmitter_tx_serial0;
assign receiver_top_tx_transmitter_trans_en = receiver_top_trans_en;
assign receiver_top_tx_transmitter_fifoEmpty = (~receiver_top_fifo_readable);
assign receiver_top_tx_40done = receiver_top_tx_transmitter_tx_40bdone;
assign receiver_top_tx_transmitter_tx_serial0 = receiver_top_tx_transmitter_tx_serial1;
always @(*) begin
	receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0 <= 1'd0;
	receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0 <= 1'd0;
	receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value1 <= 4'd0;
	receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value_ce1 <= 1'd0;
	receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= 8'd0;
	receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd0;
	receiver_top_tx_transmitter_tx_40bdone_fsm_next_value0 <= 1'd0;
	receiver_top_tx_transmitter_tx_40bdone_fsm_next_value_ce0 <= 1'd0;
	receiver_top_fsm_next_state <= 2'd0;
	receiver_top_tx_transmitter_aux_fsm_next_value1 <= 2'd0;
	receiver_top_tx_transmitter_aux_fsm_next_value_ce1 <= 1'd0;
	receiver_top_tx_transmitter_re_fsm_t_next_value0 <= 1'd0;
	receiver_top_tx_transmitter_re_fsm_t_next_value_ce0 <= 1'd0;
	receiver_top_fsm_next_state <= receiver_top_fsm_state;
	case (receiver_top_fsm_state)
		1'd1: begin
			receiver_top_tx_transmitter_re_fsm_t_next_value0 <= 1'd0;
			receiver_top_tx_transmitter_re_fsm_t_next_value_ce0 <= 1'd1;
			receiver_top_tx_transmitter_aux_fsm_next_value1 <= (receiver_top_tx_transmitter_aux + 1'd1);
			receiver_top_tx_transmitter_aux_fsm_next_value_ce1 <= 1'd1;
			if ((receiver_top_tx_transmitter_aux == 2'd2)) begin
				receiver_top_fsm_next_state <= 2'd2;
				receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0 <= 1'd1;
				receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0 <= 1'd1;
				receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[7:0];
				receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
			receiver_top_tx_transmitter_re_fsm_t_next_value0 <= 1'd0;
			receiver_top_tx_transmitter_re_fsm_t_next_value_ce0 <= 1'd1;
			if (receiver_top_tx_transmitter_tx_done) begin
				receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value1 <= (receiver_top_tx_transmitter_byte_cnt + 1'd1);
				receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value_ce1 <= 1'd1;
				if ((receiver_top_tx_transmitter_byte_cnt < 3'd7)) begin
					receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0 <= 1'd1;
					receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0 <= 1'd1;
					receiver_top_fsm_next_state <= 2'd3;
				end else begin
					receiver_top_fsm_next_state <= 1'd0;
					receiver_top_tx_transmitter_tx_40bdone_fsm_next_value0 <= 1'd1;
					receiver_top_tx_transmitter_tx_40bdone_fsm_next_value_ce0 <= 1'd1;
					receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0 <= 1'd0;
					receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0 <= 1'd1;
					receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value1 <= 1'd0;
					receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value_ce1 <= 1'd1;
				end
			end
		end
		2'd3: begin
			case (receiver_top_tx_transmitter_byte_cnt)
				1'd1: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[9:5];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
				2'd2: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[14:10];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
				2'd3: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[19:15];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
				3'd4: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[24:20];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
				3'd5: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[29:25];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
				3'd6: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[34:30];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
				3'd7: begin
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= receiver_top_tx_transmitter_data_in[39:35];
					receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
				end
			endcase
			if ((~receiver_top_tx_transmitter_tx_done)) begin
				receiver_top_fsm_next_state <= 2'd2;
			end
		end
		default: begin
			if (((receiver_top_tx_transmitter_trans_en & (~receiver_top_tx_transmitter_tx_done)) & (~receiver_top_tx_transmitter_fifoEmpty))) begin
				receiver_top_fsm_next_state <= 1'd1;
				receiver_top_tx_transmitter_re_fsm_t_next_value0 <= 1'd1;
				receiver_top_tx_transmitter_re_fsm_t_next_value_ce0 <= 1'd1;
			end else begin
				receiver_top_fsm_next_state <= 1'd0;
				receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0 <= 1'd0;
				receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0 <= 1'd1;
				receiver_top_tx_transmitter_re_fsm_t_next_value0 <= 1'd0;
				receiver_top_tx_transmitter_re_fsm_t_next_value_ce0 <= 1'd1;
				receiver_top_tx_transmitter_tx_data_fsm_f_next_value1 <= 1'd0;
				receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1 <= 1'd1;
			end
			receiver_top_tx_transmitter_tx_40bdone_fsm_next_value0 <= 1'd0;
			receiver_top_tx_transmitter_tx_40bdone_fsm_next_value_ce0 <= 1'd1;
		end
	endcase
end
assign receiver_top_tx_transmitter_tx_strobe = (receiver_top_tx_transmitter_tx_counter == 1'd0);
always @(*) begin
	receiver_top_tx_transmitter_tx_bitn_tx_t_next_value_ce2 <= 1'd0;
	receiver_top_tx_next_state <= 2'd0;
	receiver_top_tx_transmitter_tx_latch_tx_t_next_value0 <= 8'd0;
	receiver_top_tx_transmitter_tx_done_tx_t_next_value3 <= 1'd0;
	receiver_top_tx_transmitter_tx_latch_tx_t_next_value_ce0 <= 1'd0;
	receiver_top_tx_transmitter_tx_done_tx_t_next_value_ce3 <= 1'd0;
	receiver_top_tx_transmitter_tx_counter_tx_t_next_value1 <= 2'd0;
	receiver_top_tx_transmitter_tx_counter_tx_t_next_value_ce1 <= 1'd0;
	receiver_top_tx_transmitter_tx_serial1_tx_f_next_value <= 1'd0;
	receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce <= 1'd0;
	receiver_top_tx_transmitter_tx_bitn_tx_t_next_value2 <= 3'd0;
	receiver_top_tx_next_state <= receiver_top_tx_state;
	case (receiver_top_tx_state)
		1'd1: begin
			if (receiver_top_tx_transmitter_tx_strobe) begin
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value <= 1'd0;
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce <= 1'd1;
				receiver_top_tx_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (receiver_top_tx_transmitter_tx_strobe) begin
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value <= receiver_top_tx_transmitter_tx_latch[0];
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce <= 1'd1;
				receiver_top_tx_transmitter_tx_latch_tx_t_next_value0 <= {1'd0, receiver_top_tx_transmitter_tx_latch[7:1]};
				receiver_top_tx_transmitter_tx_latch_tx_t_next_value_ce0 <= 1'd1;
				receiver_top_tx_transmitter_tx_bitn_tx_t_next_value2 <= (receiver_top_tx_transmitter_tx_bitn + 1'd1);
				receiver_top_tx_transmitter_tx_bitn_tx_t_next_value_ce2 <= 1'd1;
				if ((receiver_top_tx_transmitter_tx_bitn == 3'd7)) begin
					receiver_top_tx_next_state <= 2'd3;
					receiver_top_tx_transmitter_tx_bitn_tx_t_next_value2 <= 1'd0;
					receiver_top_tx_transmitter_tx_bitn_tx_t_next_value_ce2 <= 1'd1;
					receiver_top_tx_transmitter_tx_done_tx_t_next_value3 <= 1'd1;
					receiver_top_tx_transmitter_tx_done_tx_t_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd3: begin
			if (receiver_top_tx_transmitter_tx_strobe) begin
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value <= 1'd1;
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce <= 1'd1;
				receiver_top_tx_transmitter_tx_done_tx_t_next_value3 <= 1'd0;
				receiver_top_tx_transmitter_tx_done_tx_t_next_value_ce3 <= 1'd1;
				receiver_top_tx_next_state <= 1'd0;
			end
		end
		default: begin
			if (receiver_top_tx_transmitter_tx_ready) begin
				receiver_top_tx_transmitter_tx_latch_tx_t_next_value0 <= receiver_top_tx_transmitter_tx_data;
				receiver_top_tx_transmitter_tx_latch_tx_t_next_value_ce0 <= 1'd1;
				receiver_top_tx_transmitter_tx_counter_tx_t_next_value1 <= 2'd2;
				receiver_top_tx_transmitter_tx_counter_tx_t_next_value_ce1 <= 1'd1;
				receiver_top_tx_next_state <= 1'd1;
			end else begin
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value <= 1'd1;
				receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce <= 1'd1;
			end
		end
	endcase
end
assign receiver_top_fifo_syncfifo_re = (receiver_top_fifo_syncfifo_readable & ((~receiver_top_fifo_readable) | receiver_top_fifo_re));
assign receiver_top_fifo_level1 = (receiver_top_fifo_level0 + receiver_top_fifo_readable);
always @(*) begin
	receiver_top_fifo_wrport_adr <= 4'd0;
	if (receiver_top_fifo_replace) begin
		receiver_top_fifo_wrport_adr <= (receiver_top_fifo_produce - 1'd1);
	end else begin
		receiver_top_fifo_wrport_adr <= receiver_top_fifo_produce;
	end
end
assign receiver_top_fifo_wrport_dat_w = receiver_top_fifo_syncfifo_din;
assign receiver_top_fifo_wrport_we = (receiver_top_fifo_syncfifo_we & (receiver_top_fifo_syncfifo_writable | receiver_top_fifo_replace));
assign receiver_top_fifo_do_read = (receiver_top_fifo_syncfifo_readable & receiver_top_fifo_syncfifo_re);
assign receiver_top_fifo_rdport_adr = receiver_top_fifo_consume;
assign receiver_top_fifo_syncfifo_dout = receiver_top_fifo_rdport_dat_r;
assign receiver_top_fifo_rdport_re = receiver_top_fifo_do_read;
assign receiver_top_fifo_syncfifo_writable = (receiver_top_fifo_level0 != 4'd10);
assign receiver_top_fifo_syncfifo_readable = (receiver_top_fifo_level0 != 1'd0);
always @(*) begin
	receiver_top_next_state <= 2'd0;
	receiver_top_fifo_syncfifo_we <= 1'd0;
	receiver_top_next_state <= receiver_top_state;
	case (receiver_top_state)
		1'd1: begin
			if (((receiver_top_din[9:0] == 10'd774) | (receiver_top_din[9:0] == 8'd249))) begin
				receiver_top_fifo_syncfifo_we <= 1'd1;
				receiver_top_next_state <= 2'd2;
			end
		end
		2'd2: begin
			receiver_top_fifo_syncfifo_we <= 1'd1;
			if (((receiver_top_din[9:0] == 8'd246) | (receiver_top_din[9:0] == 10'd777))) begin
				receiver_top_next_state <= 1'd1;
			end
		end
		default: begin
			if ((receiver_top_tx_init_done & receiver_top_pll_lock)) begin
				receiver_top_next_state <= 1'd1;
			end
		end
	endcase
end
assign sys_clk = clk12;
assign por_clk = clk12;
assign sys_rst = int_rst;
always @(*) begin
	f_array_muxed0 <= 6'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			f_array_muxed0 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed0 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed0 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed0 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed0 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed0 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed0 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed0 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed0 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed0 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed0 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed0 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed0 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed0 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed0 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed0 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed0 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed0 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed0 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed0 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed0 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed0 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed0 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed0 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed0 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed0 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed0 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed0 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed0 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed0 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed0 <= 6'd33;
		end
		default: begin
			f_array_muxed0 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed1 <= 1'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			f_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed1 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed1 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed1 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed1 <= 1'd1;
		end
		default: begin
			f_array_muxed1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed2 <= 1'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			f_array_muxed2 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed2 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed2 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed2 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed2 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed2 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed2 <= 1'd1;
		end
		default: begin
			f_array_muxed2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed0 <= 4'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed0 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed0 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed0 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed0 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed0 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed0 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed0 <= 3'd6;
		end
		default: begin
			rhs_array_muxed0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed1 <= 1'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed1 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed1 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed1 <= 1'd0;
		end
		default: begin
			rhs_array_muxed1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed3 <= 1'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			f_array_muxed3 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed3 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed3 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed3 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed3 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed3 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed3 <= 1'd0;
		end
		default: begin
			f_array_muxed3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed4 <= 6'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			f_array_muxed4 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed4 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed4 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed4 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed4 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed4 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed4 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed4 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed4 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed4 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed4 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed4 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed4 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed4 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed4 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed4 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed4 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed4 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed4 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed4 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed4 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed4 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed4 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed4 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed4 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed4 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed4 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed4 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed4 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed4 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed4 <= 6'd33;
		end
		default: begin
			f_array_muxed4 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed5 <= 1'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			f_array_muxed5 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed5 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed5 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed5 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed5 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed5 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed5 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed5 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed5 <= 1'd1;
		end
		default: begin
			f_array_muxed5 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed6 <= 1'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			f_array_muxed6 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed6 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed6 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed6 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed6 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed6 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed6 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed6 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed6 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed6 <= 1'd1;
		end
		default: begin
			f_array_muxed6 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed2 <= 4'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed2 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed2 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed2 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed2 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed2 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed2 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed2 <= 3'd6;
		end
		default: begin
			rhs_array_muxed2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed3 <= 1'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed3 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed3 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed3 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed3 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed3 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed3 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed3 <= 1'd0;
		end
		default: begin
			rhs_array_muxed3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed7 <= 1'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			f_array_muxed7 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed7 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed7 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed7 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed7 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed7 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed7 <= 1'd0;
		end
		default: begin
			f_array_muxed7 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed8 <= 6'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			f_array_muxed8 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed8 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed8 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed8 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed8 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed8 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed8 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed8 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed8 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed8 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed8 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed8 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed8 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed8 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed8 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed8 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed8 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed8 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed8 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed8 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed8 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed8 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed8 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed8 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed8 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed8 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed8 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed8 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed8 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed8 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed8 <= 6'd33;
		end
		default: begin
			f_array_muxed8 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed9 <= 1'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			f_array_muxed9 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed9 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed9 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed9 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed9 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed9 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed9 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed9 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed9 <= 1'd1;
		end
		default: begin
			f_array_muxed9 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed10 <= 1'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			f_array_muxed10 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed10 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed10 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed10 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed10 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed10 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed10 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed10 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed10 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed10 <= 1'd1;
		end
		default: begin
			f_array_muxed10 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed4 <= 4'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed4 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed4 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed4 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed4 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed4 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed4 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed4 <= 3'd6;
		end
		default: begin
			rhs_array_muxed4 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed5 <= 1'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed5 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed5 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed5 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed5 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed5 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed5 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed5 <= 1'd0;
		end
		default: begin
			rhs_array_muxed5 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed11 <= 1'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			f_array_muxed11 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed11 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed11 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed11 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed11 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed11 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed11 <= 1'd0;
		end
		default: begin
			f_array_muxed11 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed12 <= 6'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			f_array_muxed12 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed12 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed12 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed12 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed12 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed12 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed12 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed12 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed12 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed12 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed12 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed12 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed12 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed12 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed12 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed12 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed12 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed12 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed12 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed12 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed12 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed12 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed12 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed12 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed12 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed12 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed12 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed12 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed12 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed12 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed12 <= 6'd33;
		end
		default: begin
			f_array_muxed12 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed13 <= 1'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			f_array_muxed13 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed13 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed13 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed13 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed13 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed13 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed13 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed13 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed13 <= 1'd1;
		end
		default: begin
			f_array_muxed13 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed14 <= 1'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			f_array_muxed14 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed14 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed14 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed14 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed14 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed14 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed14 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed14 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed14 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed14 <= 1'd1;
		end
		default: begin
			f_array_muxed14 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed6 <= 4'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed6 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed6 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed6 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed6 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed6 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed6 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed6 <= 3'd6;
		end
		default: begin
			rhs_array_muxed6 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed7 <= 1'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed7 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed7 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed7 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed7 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed7 <= 1'd0;
		end
		default: begin
			rhs_array_muxed7 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed15 <= 1'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			f_array_muxed15 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed15 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed15 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed15 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed15 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed15 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed15 <= 1'd0;
		end
		default: begin
			f_array_muxed15 <= 1'd1;
		end
	endcase
end

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	if (tx_fifo_re) begin
		memoria_index <= (memoria_index + 1'd1);
	end
	if (user_btn) begin
		if ((counter < 4'd9)) begin
			counter <= (counter + 1'd1);
			tx_fifo_empty <= 1'd0;
		end else begin
			tx_fifo_empty <= 1'd1;
		end
	end else begin
		tx_fifo_empty <= 1'd1;
		counter <= 1'd0;
	end
	if (tx_fsm_fifo_ready) begin
		tx_d0 <= tx_data_in[7:0];
		tx_d1 <= tx_data_in[15:8];
		tx_d2 <= tx_data_in[23:16];
		tx_d3 <= tx_data_in[31:24];
	end
	if (tx_fsm_sop) begin
		tx_d0 <= 6'd60;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_fsm_idle) begin
		tx_d0 <= 8'd188;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_fsm_eop) begin
		tx_d0 <= 8'd220;
		tx_k0 <= 1'd1;
		tx_d1 <= tx_crc_encoder_o_crc[7:0];
		tx_d2 <= tx_crc_encoder_o_crc[15:8];
		tx_d3 <= tx_crc_encoder_o_crc[19:16];
	end
	tx_k1 <= 1'd0;
	tx_k2 <= 1'd0;
	tx_k3 <= 1'd0;
	tx_singleencoder0_disp_in <= tx_singleencoder3_disp_out;
	tx_output0 <= tx_singleencoder0_output;
	tx_disparity0 <= tx_singleencoder0_disp_out;
	tx_output1 <= tx_singleencoder1_output;
	tx_disparity1 <= tx_singleencoder1_disp_out;
	tx_output2 <= tx_singleencoder2_output;
	tx_disparity2 <= tx_singleencoder2_disp_out;
	tx_output3 <= tx_singleencoder3_output;
	tx_disparity3 <= tx_singleencoder3_disp_out;
	if ((tx_singleencoder0_k & (tx_singleencoder0_d[4:0] == 5'd28))) begin
		tx_singleencoder0_code6b <= 6'd48;
		tx_singleencoder0_code6b_unbalanced <= 1'd1;
		tx_singleencoder0_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder0_code6b <= f_array_muxed0;
		tx_singleencoder0_code6b_unbalanced <= f_array_muxed1;
		tx_singleencoder0_code6b_flip <= f_array_muxed2;
	end
	tx_singleencoder0_code4b <= rhs_array_muxed0;
	tx_singleencoder0_code4b_unbalanced <= rhs_array_muxed1;
	if (tx_singleencoder0_k) begin
		tx_singleencoder0_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder0_code4b_flip <= f_array_muxed3;
	end
	tx_singleencoder0_alt7_rd0 <= 1'd0;
	tx_singleencoder0_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder0_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder0_d[4:0] == 5'd17) | (tx_singleencoder0_d[4:0] == 5'd18)) | (tx_singleencoder0_d[4:0] == 5'd20))) begin
			tx_singleencoder0_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder0_d[4:0] == 4'd11) | (tx_singleencoder0_d[4:0] == 4'd13)) | (tx_singleencoder0_d[4:0] == 4'd14))) begin
			tx_singleencoder0_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder0_k) begin
			tx_singleencoder0_alt7_rd0 <= 1'd1;
			tx_singleencoder0_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder1_k & (tx_singleencoder1_d[4:0] == 5'd28))) begin
		tx_singleencoder1_code6b <= 6'd48;
		tx_singleencoder1_code6b_unbalanced <= 1'd1;
		tx_singleencoder1_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder1_code6b <= f_array_muxed4;
		tx_singleencoder1_code6b_unbalanced <= f_array_muxed5;
		tx_singleencoder1_code6b_flip <= f_array_muxed6;
	end
	tx_singleencoder1_code4b <= rhs_array_muxed2;
	tx_singleencoder1_code4b_unbalanced <= rhs_array_muxed3;
	if (tx_singleencoder1_k) begin
		tx_singleencoder1_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder1_code4b_flip <= f_array_muxed7;
	end
	tx_singleencoder1_alt7_rd0 <= 1'd0;
	tx_singleencoder1_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder1_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder1_d[4:0] == 5'd17) | (tx_singleencoder1_d[4:0] == 5'd18)) | (tx_singleencoder1_d[4:0] == 5'd20))) begin
			tx_singleencoder1_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder1_d[4:0] == 4'd11) | (tx_singleencoder1_d[4:0] == 4'd13)) | (tx_singleencoder1_d[4:0] == 4'd14))) begin
			tx_singleencoder1_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder1_k) begin
			tx_singleencoder1_alt7_rd0 <= 1'd1;
			tx_singleencoder1_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder2_k & (tx_singleencoder2_d[4:0] == 5'd28))) begin
		tx_singleencoder2_code6b <= 6'd48;
		tx_singleencoder2_code6b_unbalanced <= 1'd1;
		tx_singleencoder2_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder2_code6b <= f_array_muxed8;
		tx_singleencoder2_code6b_unbalanced <= f_array_muxed9;
		tx_singleencoder2_code6b_flip <= f_array_muxed10;
	end
	tx_singleencoder2_code4b <= rhs_array_muxed4;
	tx_singleencoder2_code4b_unbalanced <= rhs_array_muxed5;
	if (tx_singleencoder2_k) begin
		tx_singleencoder2_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder2_code4b_flip <= f_array_muxed11;
	end
	tx_singleencoder2_alt7_rd0 <= 1'd0;
	tx_singleencoder2_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder2_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder2_d[4:0] == 5'd17) | (tx_singleencoder2_d[4:0] == 5'd18)) | (tx_singleencoder2_d[4:0] == 5'd20))) begin
			tx_singleencoder2_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder2_d[4:0] == 4'd11) | (tx_singleencoder2_d[4:0] == 4'd13)) | (tx_singleencoder2_d[4:0] == 4'd14))) begin
			tx_singleencoder2_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder2_k) begin
			tx_singleencoder2_alt7_rd0 <= 1'd1;
			tx_singleencoder2_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder3_k & (tx_singleencoder3_d[4:0] == 5'd28))) begin
		tx_singleencoder3_code6b <= 6'd48;
		tx_singleencoder3_code6b_unbalanced <= 1'd1;
		tx_singleencoder3_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder3_code6b <= f_array_muxed12;
		tx_singleencoder3_code6b_unbalanced <= f_array_muxed13;
		tx_singleencoder3_code6b_flip <= f_array_muxed14;
	end
	tx_singleencoder3_code4b <= rhs_array_muxed6;
	tx_singleencoder3_code4b_unbalanced <= rhs_array_muxed7;
	if (tx_singleencoder3_k) begin
		tx_singleencoder3_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder3_code4b_flip <= f_array_muxed15;
	end
	tx_singleencoder3_alt7_rd0 <= 1'd0;
	tx_singleencoder3_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder3_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder3_d[4:0] == 5'd17) | (tx_singleencoder3_d[4:0] == 5'd18)) | (tx_singleencoder3_d[4:0] == 5'd20))) begin
			tx_singleencoder3_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder3_d[4:0] == 4'd11) | (tx_singleencoder3_d[4:0] == 4'd13)) | (tx_singleencoder3_d[4:0] == 4'd14))) begin
			tx_singleencoder3_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder3_k) begin
			tx_singleencoder3_alt7_rd0 <= 1'd1;
			tx_singleencoder3_alt7_rd1 <= 1'd1;
		end
	end
	if (tx_crc_encoder_i_data_strobe) begin
		tx_crc_encoder_crc_cur <= tx_crc_encoder_crc_next;
	end
	if (tx_crc_encoder_reset) begin
		tx_crc_encoder_crc_cur <= 20'd1048575;
	end
	tx_state <= tx_next_state;
	if (tx_fsm_fifo_re_next_value_ce0) begin
		tx_fsm_fifo_re <= tx_fsm_fifo_re_next_value0;
	end
	if (tx_fsm_sop_next_value_ce1) begin
		tx_fsm_sop <= tx_fsm_sop_next_value1;
	end
	if (tx_fsm_idle_next_value_ce2) begin
		tx_fsm_idle <= tx_fsm_idle_next_value2;
	end
	if (tx_fsm_change_disp_next_value_ce3) begin
		tx_fsm_change_disp <= tx_fsm_change_disp_next_value3;
	end
	if (tx_fsm_counter_idle_next_value_ce4) begin
		tx_fsm_counter_idle <= tx_fsm_counter_idle_next_value4;
	end
	if (tx_fsm_encoder_ready_next_value_ce5) begin
		tx_fsm_encoder_ready <= tx_fsm_encoder_ready_next_value5;
	end
	if (tx_fsm_fifo_ready_next_value_ce6) begin
		tx_fsm_fifo_ready <= tx_fsm_fifo_ready_next_value6;
	end
	if (tx_fsm_strobe_crc_next_value_ce7) begin
		tx_fsm_strobe_crc <= tx_fsm_strobe_crc_next_value7;
	end
	if (tx_fsm_eop_next_value_ce8) begin
		tx_fsm_eop <= tx_fsm_eop_next_value8;
	end
	if (tx_fsm_reset_crc_next_value_ce9) begin
		tx_fsm_reset_crc <= tx_fsm_reset_crc_next_value9;
	end
	if (tx_fsm_reset1) begin
		tx_fsm_sop <= 1'd0;
		tx_fsm_eop <= 1'd0;
		tx_fsm_idle <= 1'd0;
		tx_fsm_fifo_ready <= 1'd0;
		tx_fsm_encoder_ready <= 1'd0;
		tx_fsm_change_disp <= 1'd0;
		tx_fsm_fifo_re <= 1'd0;
		tx_fsm_strobe_crc <= 1'd0;
		tx_fsm_reset_crc <= 1'd0;
		tx_fsm_counter_idle <= 2'd0;
		tx_state <= 3'd0;
	end
	memoria_wrport1_adr <= memoria_index;
	memoria_wrport2_adr <= memoria_index;
	memoria_data_out <= memoria_wrport1_dat_r;
	memoria_type_out <= memoria_wrport2_dat_r;
	receiver_top_fsm_state <= receiver_top_fsm_next_state;
	if (receiver_top_tx_transmitter_re_fsm_t_next_value_ce0) begin
		receiver_top_tx_transmitter_re <= receiver_top_tx_transmitter_re_fsm_t_next_value0;
	end
	if (receiver_top_tx_transmitter_tx_ready_fsm_f_next_value_ce0) begin
		receiver_top_tx_transmitter_tx_ready <= receiver_top_tx_transmitter_tx_ready_fsm_f_next_value0;
	end
	if (receiver_top_tx_transmitter_tx_data_fsm_f_next_value_ce1) begin
		receiver_top_tx_transmitter_tx_data <= receiver_top_tx_transmitter_tx_data_fsm_f_next_value1;
	end
	if (receiver_top_tx_transmitter_tx_40bdone_fsm_next_value_ce0) begin
		receiver_top_tx_transmitter_tx_40bdone <= receiver_top_tx_transmitter_tx_40bdone_fsm_next_value0;
	end
	if (receiver_top_tx_transmitter_aux_fsm_next_value_ce1) begin
		receiver_top_tx_transmitter_aux <= receiver_top_tx_transmitter_aux_fsm_next_value1;
	end
	if (receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value_ce1) begin
		receiver_top_tx_transmitter_byte_cnt <= receiver_top_tx_transmitter_byte_cnt_fsm_t_next_value1;
	end
	if ((receiver_top_tx_transmitter_tx_counter == 1'd0)) begin
		receiver_top_tx_transmitter_tx_counter <= 2'd2;
	end else begin
		receiver_top_tx_transmitter_tx_counter <= (receiver_top_tx_transmitter_tx_counter - 1'd1);
	end
	receiver_top_tx_state <= receiver_top_tx_next_state;
	if (receiver_top_tx_transmitter_tx_latch_tx_t_next_value_ce0) begin
		receiver_top_tx_transmitter_tx_latch <= receiver_top_tx_transmitter_tx_latch_tx_t_next_value0;
	end
	if (receiver_top_tx_transmitter_tx_counter_tx_t_next_value_ce1) begin
		receiver_top_tx_transmitter_tx_counter <= receiver_top_tx_transmitter_tx_counter_tx_t_next_value1;
	end
	if (receiver_top_tx_transmitter_tx_serial1_tx_f_next_value_ce) begin
		receiver_top_tx_transmitter_tx_serial1 <= receiver_top_tx_transmitter_tx_serial1_tx_f_next_value;
	end
	if (receiver_top_tx_transmitter_tx_bitn_tx_t_next_value_ce2) begin
		receiver_top_tx_transmitter_tx_bitn <= receiver_top_tx_transmitter_tx_bitn_tx_t_next_value2;
	end
	if (receiver_top_tx_transmitter_tx_done_tx_t_next_value_ce3) begin
		receiver_top_tx_transmitter_tx_done <= receiver_top_tx_transmitter_tx_done_tx_t_next_value3;
	end
	if (receiver_top_fifo_syncfifo_re) begin
		receiver_top_fifo_readable <= 1'd1;
	end else begin
		if (receiver_top_fifo_re) begin
			receiver_top_fifo_readable <= 1'd0;
		end
	end
	if (((receiver_top_fifo_syncfifo_we & receiver_top_fifo_syncfifo_writable) & (~receiver_top_fifo_replace))) begin
		if ((receiver_top_fifo_produce == 4'd9)) begin
			receiver_top_fifo_produce <= 1'd0;
		end else begin
			receiver_top_fifo_produce <= (receiver_top_fifo_produce + 1'd1);
		end
	end
	if (receiver_top_fifo_do_read) begin
		if ((receiver_top_fifo_consume == 4'd9)) begin
			receiver_top_fifo_consume <= 1'd0;
		end else begin
			receiver_top_fifo_consume <= (receiver_top_fifo_consume + 1'd1);
		end
	end
	if (((receiver_top_fifo_syncfifo_we & receiver_top_fifo_syncfifo_writable) & (~receiver_top_fifo_replace))) begin
		if ((~receiver_top_fifo_do_read)) begin
			receiver_top_fifo_level0 <= (receiver_top_fifo_level0 + 1'd1);
		end
	end else begin
		if (receiver_top_fifo_do_read) begin
			receiver_top_fifo_level0 <= (receiver_top_fifo_level0 - 1'd1);
		end
	end
	receiver_top_state <= receiver_top_next_state;
	if (sys_rst) begin
		counter <= 4'd0;
		tx_fifo_empty <= 1'd1;
		tx_d0 <= 8'd0;
		tx_d1 <= 8'd0;
		tx_d2 <= 8'd0;
		tx_d3 <= 8'd0;
		tx_k0 <= 1'd0;
		tx_k1 <= 1'd0;
		tx_k2 <= 1'd0;
		tx_k3 <= 1'd0;
		tx_output0 <= 10'd0;
		tx_output1 <= 10'd0;
		tx_output2 <= 10'd0;
		tx_output3 <= 10'd0;
		tx_disparity0 <= 1'd0;
		tx_disparity1 <= 1'd0;
		tx_disparity2 <= 1'd0;
		tx_disparity3 <= 1'd0;
		tx_singleencoder0_disp_in <= 1'd0;
		tx_singleencoder0_code6b <= 6'd0;
		tx_singleencoder0_code6b_unbalanced <= 1'd0;
		tx_singleencoder0_code6b_flip <= 1'd0;
		tx_singleencoder0_code4b <= 4'd0;
		tx_singleencoder0_code4b_unbalanced <= 1'd0;
		tx_singleencoder0_code4b_flip <= 1'd0;
		tx_singleencoder0_alt7_rd0 <= 1'd0;
		tx_singleencoder0_alt7_rd1 <= 1'd0;
		tx_singleencoder1_code6b <= 6'd0;
		tx_singleencoder1_code6b_unbalanced <= 1'd0;
		tx_singleencoder1_code6b_flip <= 1'd0;
		tx_singleencoder1_code4b <= 4'd0;
		tx_singleencoder1_code4b_unbalanced <= 1'd0;
		tx_singleencoder1_code4b_flip <= 1'd0;
		tx_singleencoder1_alt7_rd0 <= 1'd0;
		tx_singleencoder1_alt7_rd1 <= 1'd0;
		tx_singleencoder2_code6b <= 6'd0;
		tx_singleencoder2_code6b_unbalanced <= 1'd0;
		tx_singleencoder2_code6b_flip <= 1'd0;
		tx_singleencoder2_code4b <= 4'd0;
		tx_singleencoder2_code4b_unbalanced <= 1'd0;
		tx_singleencoder2_code4b_flip <= 1'd0;
		tx_singleencoder2_alt7_rd0 <= 1'd0;
		tx_singleencoder2_alt7_rd1 <= 1'd0;
		tx_singleencoder3_code6b <= 6'd0;
		tx_singleencoder3_code6b_unbalanced <= 1'd0;
		tx_singleencoder3_code6b_flip <= 1'd0;
		tx_singleencoder3_code4b <= 4'd0;
		tx_singleencoder3_code4b_unbalanced <= 1'd0;
		tx_singleencoder3_code4b_flip <= 1'd0;
		tx_singleencoder3_alt7_rd0 <= 1'd0;
		tx_singleencoder3_alt7_rd1 <= 1'd0;
		tx_crc_encoder_crc_cur <= 20'd1048575;
		tx_fsm_sop <= 1'd0;
		tx_fsm_eop <= 1'd0;
		tx_fsm_idle <= 1'd0;
		tx_fsm_fifo_ready <= 1'd0;
		tx_fsm_encoder_ready <= 1'd0;
		tx_fsm_change_disp <= 1'd0;
		tx_fsm_fifo_re <= 1'd0;
		tx_fsm_strobe_crc <= 1'd0;
		tx_fsm_reset_crc <= 1'd0;
		tx_fsm_counter_idle <= 2'd0;
		memoria_index <= 5'd0;
		memoria_data_out <= 32'd0;
		memoria_type_out <= 2'd0;
		memoria_wrport1_adr <= 3'd0;
		memoria_wrport2_adr <= 3'd0;
		receiver_top_tx_transmitter_tx_40bdone <= 1'd0;
		receiver_top_tx_transmitter_re <= 1'd0;
		receiver_top_tx_transmitter_tx_counter <= 2'd0;
		receiver_top_tx_transmitter_tx_serial1 <= 1'd1;
		receiver_top_tx_transmitter_tx_data <= 8'd0;
		receiver_top_tx_transmitter_tx_bitn <= 3'd0;
		receiver_top_tx_transmitter_tx_ready <= 1'd0;
		receiver_top_tx_transmitter_tx_latch <= 8'd0;
		receiver_top_tx_transmitter_tx_done <= 1'd0;
		receiver_top_tx_transmitter_byte_cnt <= 4'd0;
		receiver_top_tx_transmitter_aux <= 2'd0;
		receiver_top_fifo_readable <= 1'd0;
		receiver_top_fifo_level0 <= 4'd0;
		receiver_top_fifo_produce <= 4'd0;
		receiver_top_fifo_consume <= 4'd0;
		tx_state <= 3'd0;
		receiver_top_fsm_state <= 2'd0;
		receiver_top_tx_state <= 2'd0;
		receiver_top_state <= 2'd0;
	end
end

reg [31:0] INPUT[0:5];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	if (memoria_wrport1_we)
		INPUT[memoria_wrport1_adr] <= memoria_wrport1_dat_w;
	memdat <= INPUT[memoria_wrport1_adr];
end

assign memoria_wrport1_dat_r = memdat;

initial begin
	$readmemh("INPUT.init", INPUT);
end

reg [1:0] TYPE[0:5];
reg [1:0] memdat_1;
always @(posedge sys_clk) begin
	if (memoria_wrport2_we)
		TYPE[memoria_wrport2_adr] <= memoria_wrport2_dat_w;
	memdat_1 <= TYPE[memoria_wrport2_adr];
end

assign memoria_wrport2_dat_r = memdat_1;

initial begin
	$readmemh("TYPE.init", TYPE);
end

reg [39:0] storage[0:9];
reg [39:0] memdat_2;
reg [39:0] memdat_3;
always @(posedge sys_clk) begin
	if (receiver_top_fifo_wrport_we)
		storage[receiver_top_fifo_wrport_adr] <= receiver_top_fifo_wrport_dat_w;
	memdat_2 <= storage[receiver_top_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (receiver_top_fifo_rdport_re)
		memdat_3 <= storage[receiver_top_fifo_rdport_adr];
end

assign receiver_top_fifo_wrport_dat_r = memdat_2;
assign receiver_top_fifo_rdport_dat_r = memdat_3;

endmodule
