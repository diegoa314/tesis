//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-04-07 14:55:48
//--------------------------------------------------------------------------------
module top(
	input write_clk_p,
	input write_clk_n,
	input din_a,
	input din_b,
	input din_c,
	input din_d,
	output writable,
	output readable,
	input we,
	input re
);

wire write_clk;
wire read_clk;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
wire write_clk100;
wire pll_fb;
wire asyncfifo_we;
wire asyncfifo_writable;
wire asyncfifo_re;
wire asyncfifo_readable;
wire [7:0] asyncfifo_din;
wire [7:0] asyncfifo_dout;
wire graycounter0_ce;
(* register_balancing = "no" *) reg [3:0] graycounter0_q = 4'd0;
wire [3:0] graycounter0_q_next;
reg [3:0] graycounter0_q_binary = 4'd0;
reg [3:0] graycounter0_q_next_binary = 4'd0;
wire graycounter1_ce;
(* register_balancing = "no" *) reg [3:0] graycounter1_q = 4'd0;
wire [3:0] graycounter1_q_next;
reg [3:0] graycounter1_q_binary = 4'd0;
reg [3:0] graycounter1_q_next_binary = 4'd0;
wire [3:0] produce_rdomain;
wire [3:0] consume_wdomain;
wire [2:0] wrport_adr;
wire [7:0] wrport_dat_r;
wire wrport_we;
wire [7:0] wrport_dat_w;
wire [2:0] rdport_adr;
wire [7:0] rdport_dat_r;
wire user_domain_clk;
wire user_domain_rst;
wire read_por_clk;
reg int_read_rst = 1'd1;
(* register_balancing = "no", shreg_extract = "no" *) reg [3:0] xilinxmultiregimpl0_regs0 = 4'd0;
(* register_balancing = "no", shreg_extract = "no" *) reg [3:0] xilinxmultiregimpl0_regs1 = 4'd0;
(* register_balancing = "no", shreg_extract = "no" *) reg [3:0] xilinxmultiregimpl1_regs0 = 4'd0;
(* register_balancing = "no", shreg_extract = "no" *) reg [3:0] xilinxmultiregimpl1_regs1 = 4'd0;

assign user_domain_clk = read_clk;
assign user_domain_rst = int_read_rst;
assign read_por_clk = read_clk;
assign asyncfifo_din = {din_d, din_c, din_b, din_a};
assign readable = asyncfifo_readable;
assign writable = asyncfifo_writable;
assign asyncfifo_re = re;
assign asyncfifo_we = we;
assign sys_clk = write_clk;
assign por_clk = write_clk;
assign sys_rst = int_rst;
assign graycounter0_ce = (asyncfifo_writable & asyncfifo_we);
assign graycounter1_ce = (asyncfifo_readable & asyncfifo_re);
assign asyncfifo_writable = (((graycounter0_q[3] == consume_wdomain[3]) | (graycounter0_q[2] == consume_wdomain[2])) | (graycounter0_q[1:0] != consume_wdomain[1:0]));
assign asyncfifo_readable = (graycounter1_q != produce_rdomain);
assign wrport_adr = graycounter0_q_binary[2:0];
assign wrport_dat_w = asyncfifo_din;
assign wrport_we = graycounter0_ce;
assign rdport_adr = graycounter1_q_next_binary[2:0];
assign asyncfifo_dout = rdport_dat_r;
always @(*) begin
	graycounter0_q_next_binary <= 4'd0;
	if (graycounter0_ce) begin
		graycounter0_q_next_binary <= (graycounter0_q_binary + 1'd1);
	end else begin
		graycounter0_q_next_binary <= graycounter0_q_binary;
	end
end
assign graycounter0_q_next = (graycounter0_q_next_binary ^ graycounter0_q_next_binary[3:1]);
always @(*) begin
	graycounter1_q_next_binary <= 4'd0;
	if (graycounter1_ce) begin
		graycounter1_q_next_binary <= (graycounter1_q_binary + 1'd1);
	end else begin
		graycounter1_q_next_binary <= graycounter1_q_binary;
	end
end
assign graycounter1_q_next = (graycounter1_q_next_binary ^ graycounter1_q_next_binary[3:1]);
assign produce_rdomain = xilinxmultiregimpl0_regs1;
assign consume_wdomain = xilinxmultiregimpl1_regs1;

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge read_por_clk) begin
	int_read_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	graycounter0_q_binary <= graycounter0_q_next_binary;
	graycounter0_q <= graycounter0_q_next;
	if (sys_rst) begin
		graycounter0_q <= 4'd0;
		graycounter0_q_binary <= 4'd0;
	end
	xilinxmultiregimpl1_regs0 <= graycounter1_q;
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
end

always @(posedge user_domain_clk) begin
	graycounter1_q_binary <= graycounter1_q_next_binary;
	graycounter1_q <= graycounter1_q_next;
	if (user_domain_rst) begin
		graycounter1_q <= 4'd0;
		graycounter1_q_binary <= 4'd0;
	end
	xilinxmultiregimpl0_regs0 <= graycounter0_q;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
end

IBUFDS_GTE2 IBUFDS_GTE2(
	.CEB(1'd0),
	.I(write_clk_p),
	.IB(write_clk_n),
	.O(write_clk100)
);

BUFG BUFG(
	.I(write_clk100),
	.O(write_clk)
);

PLLE2_BASE #(
	.CLKFBOUT_MULT(4'd10),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE(3'd5),
	.CLKOUT0_PHASE(0.0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_BASE (
	.CLKFBIN(pll_fb),
	.CLKIN1(write_clk),
	.CLKFBOUT(pll_fb),
	.CLKOUT0(read_clk)
);

reg [7:0] storage[0:7];
reg [2:0] memadr;
reg [2:0] memadr_1;
always @(posedge sys_clk) begin
	if (wrport_we)
		storage[wrport_adr] <= wrport_dat_w;
	memadr <= wrport_adr;
end

always @(posedge user_domain_clk) begin
	memadr_1 <= rdport_adr;
end

assign wrport_dat_r = storage[memadr];
assign rdport_dat_r = storage[memadr_1];

endmodule
