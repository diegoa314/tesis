//--------------------------------------------------------------------------------
// Auto-generated by Migen (f4fcd10) & LiteX (c120f6d4) on 2019-10-25 08:43:58
//--------------------------------------------------------------------------------
module top(
	output reg serial_tx,
	input serial_rx,
	input user_led,
	input user_led_1,
	input user_led_2,
	input user_led_3,
	input user_led_4,
	input user_led_5,
	input user_led_6,
	input user_led_7,
	input clk100
);

reg [7:0] loopbacktest_rx_data = 8'd0;
reg loopbacktest_rx_ready = 1'd0;
wire loopbacktest_rx_ack;
reg loopbacktest_rx_error = 1'd0;
wire [7:0] loopbacktest_tx_data;
wire loopbacktest_tx_ready;
reg loopbacktest_tx_ack = 1'd0;
reg [10:0] loopbacktest_rx_counter = 11'd0;
wire loopbacktest_rx_strobe0;
reg [2:0] loopbacktest_rx_bitno = 3'd0;
reg [10:0] loopbacktest_tx_counter = 11'd0;
wire loopbacktest_tx_strobe0;
reg [2:0] loopbacktest_tx_bitno = 3'd0;
reg [7:0] loopbacktest_tx_latch = 8'd0;
reg loopbacktest_empty = 1'd1;
reg [7:0] loopbacktest_data = 8'd0;
wire loopbacktest_rx_strobe1;
wire loopbacktest_tx_strobe1;
reg [2:0] platform_fsm0_state = 3'd0;
reg [2:0] platform_fsm0_next_state = 3'd0;
reg [10:0] loopbacktest_rx_counter_next_value0 = 11'd0;
reg loopbacktest_rx_counter_next_value_ce0 = 1'd0;
reg [7:0] loopbacktest_rx_data_next_value1 = 8'd0;
reg loopbacktest_rx_data_next_value_ce1 = 1'd0;
reg [2:0] loopbacktest_rx_bitno_next_value2 = 3'd0;
reg loopbacktest_rx_bitno_next_value_ce2 = 1'd0;
reg [1:0] platform_fsm1_state = 2'd0;
reg [1:0] platform_fsm1_next_state = 2'd0;
reg [10:0] loopbacktest_tx_counter_t_next_value0 = 11'd0;
reg loopbacktest_tx_counter_t_next_value_ce0 = 1'd0;
reg [7:0] loopbacktest_tx_latch_t_next_value1 = 8'd0;
reg loopbacktest_tx_latch_t_next_value_ce1 = 1'd0;
reg loopbacktest_serial_tx_f_next_value = 1'd0;
reg loopbacktest_serial_tx_f_next_value_ce = 1'd0;
reg [2:0] loopbacktest_tx_bitno_t_next_value2 = 3'd0;
reg loopbacktest_tx_bitno_t_next_value_ce2 = 1'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg platform_int_rst = 1'd1;

assign loopbacktest_rx_strobe1 = (loopbacktest_rx_ready & loopbacktest_empty);
assign loopbacktest_tx_strobe1 = (loopbacktest_tx_ack & (~loopbacktest_empty));
assign loopbacktest_rx_ack = loopbacktest_rx_strobe1;
assign loopbacktest_tx_data = loopbacktest_data;
assign loopbacktest_tx_ready = loopbacktest_tx_strobe1;
assign loopbacktest_rx_strobe0 = (loopbacktest_rx_counter == 1'd0);
assign loopbacktest_tx_strobe0 = (loopbacktest_tx_counter == 1'd0);
always @(*) begin
	platform_fsm0_next_state <= 3'd0;
	loopbacktest_rx_counter_next_value0 <= 11'd0;
	loopbacktest_rx_counter_next_value_ce0 <= 1'd0;
	loopbacktest_rx_data_next_value1 <= 8'd0;
	loopbacktest_rx_data_next_value_ce1 <= 1'd0;
	loopbacktest_rx_bitno_next_value2 <= 3'd0;
	loopbacktest_rx_bitno_next_value_ce2 <= 1'd0;
	loopbacktest_rx_ready <= 1'd0;
	loopbacktest_rx_error <= 1'd0;
	platform_fsm0_next_state <= platform_fsm0_state;
	case (platform_fsm0_state)
		1'd1: begin
			if (loopbacktest_rx_strobe0) begin
				platform_fsm0_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (loopbacktest_rx_strobe0) begin
				loopbacktest_rx_data_next_value1 <= {serial_rx, loopbacktest_rx_data[7:1]};
				loopbacktest_rx_data_next_value_ce1 <= 1'd1;
				loopbacktest_rx_bitno_next_value2 <= (loopbacktest_rx_bitno + 1'd1);
				loopbacktest_rx_bitno_next_value_ce2 <= 1'd1;
				if ((loopbacktest_rx_bitno == 3'd7)) begin
					platform_fsm0_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			if (loopbacktest_rx_strobe0) begin
				if ((~serial_rx)) begin
					platform_fsm0_next_state <= 3'd5;
				end else begin
					platform_fsm0_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			loopbacktest_rx_ready <= 1'd1;
			if (loopbacktest_rx_ack) begin
				platform_fsm0_next_state <= 1'd0;
			end else begin
				if ((~serial_rx)) begin
					platform_fsm0_next_state <= 3'd5;
				end
			end
		end
		3'd5: begin
			loopbacktest_rx_error <= 1'd1;
		end
		default: begin
			if ((~serial_rx)) begin
				loopbacktest_rx_counter_next_value0 <= 10'd625;
				loopbacktest_rx_counter_next_value_ce0 <= 1'd1;
				platform_fsm0_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	loopbacktest_tx_ack <= 1'd0;
	loopbacktest_tx_bitno_t_next_value2 <= 3'd0;
	loopbacktest_tx_bitno_t_next_value_ce2 <= 1'd0;
	platform_fsm1_next_state <= 2'd0;
	loopbacktest_tx_counter_t_next_value0 <= 11'd0;
	loopbacktest_tx_counter_t_next_value_ce0 <= 1'd0;
	loopbacktest_tx_latch_t_next_value1 <= 8'd0;
	loopbacktest_tx_latch_t_next_value_ce1 <= 1'd0;
	loopbacktest_serial_tx_f_next_value <= 1'd0;
	loopbacktest_serial_tx_f_next_value_ce <= 1'd0;
	platform_fsm1_next_state <= platform_fsm1_state;
	case (platform_fsm1_state)
		1'd1: begin
			if (loopbacktest_tx_strobe0) begin
				loopbacktest_serial_tx_f_next_value <= 1'd0;
				loopbacktest_serial_tx_f_next_value_ce <= 1'd1;
				platform_fsm1_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (loopbacktest_tx_strobe0) begin
				loopbacktest_serial_tx_f_next_value <= loopbacktest_tx_latch[0];
				loopbacktest_serial_tx_f_next_value_ce <= 1'd1;
				loopbacktest_tx_latch_t_next_value1 <= {1'd0, loopbacktest_tx_latch[7:1]};
				loopbacktest_tx_latch_t_next_value_ce1 <= 1'd1;
				loopbacktest_tx_bitno_t_next_value2 <= (loopbacktest_tx_bitno + 1'd1);
				loopbacktest_tx_bitno_t_next_value_ce2 <= 1'd1;
				if ((loopbacktest_tx_bitno == 3'd7)) begin
					platform_fsm1_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			if (loopbacktest_tx_strobe0) begin
				loopbacktest_serial_tx_f_next_value <= 1'd1;
				loopbacktest_serial_tx_f_next_value_ce <= 1'd1;
				platform_fsm1_next_state <= 1'd0;
			end
		end
		default: begin
			loopbacktest_tx_ack <= 1'd1;
			if (loopbacktest_tx_ready) begin
				loopbacktest_tx_counter_t_next_value0 <= 11'd1249;
				loopbacktest_tx_counter_t_next_value_ce0 <= 1'd1;
				loopbacktest_tx_latch_t_next_value1 <= loopbacktest_tx_data;
				loopbacktest_tx_latch_t_next_value_ce1 <= 1'd1;
				platform_fsm1_next_state <= 1'd1;
			end else begin
				loopbacktest_serial_tx_f_next_value <= 1'd1;
				loopbacktest_serial_tx_f_next_value_ce <= 1'd1;
			end
		end
	endcase
end
assign sys_clk = clk100;
assign por_clk = clk100;
assign sys_rst = platform_int_rst;

always @(posedge por_clk) begin
	platform_int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	if (loopbacktest_rx_strobe1) begin
		loopbacktest_data <= loopbacktest_rx_data;
		loopbacktest_empty <= 1'd0;
	end
	if (loopbacktest_tx_strobe1) begin
		loopbacktest_empty <= 1'd1;
	end
	if ((loopbacktest_rx_counter == 1'd0)) begin
		loopbacktest_rx_counter <= 11'd1249;
	end else begin
		loopbacktest_rx_counter <= (loopbacktest_rx_counter - 1'd1);
	end
	if ((loopbacktest_tx_counter == 1'd0)) begin
		loopbacktest_tx_counter <= 11'd1249;
	end else begin
		loopbacktest_tx_counter <= (loopbacktest_tx_counter - 1'd1);
	end
	platform_fsm0_state <= platform_fsm0_next_state;
	if (loopbacktest_rx_counter_next_value_ce0) begin
		loopbacktest_rx_counter <= loopbacktest_rx_counter_next_value0;
	end
	if (loopbacktest_rx_data_next_value_ce1) begin
		loopbacktest_rx_data <= loopbacktest_rx_data_next_value1;
	end
	if (loopbacktest_rx_bitno_next_value_ce2) begin
		loopbacktest_rx_bitno <= loopbacktest_rx_bitno_next_value2;
	end
	platform_fsm1_state <= platform_fsm1_next_state;
	if (loopbacktest_tx_counter_t_next_value_ce0) begin
		loopbacktest_tx_counter <= loopbacktest_tx_counter_t_next_value0;
	end
	if (loopbacktest_tx_latch_t_next_value_ce1) begin
		loopbacktest_tx_latch <= loopbacktest_tx_latch_t_next_value1;
	end
	if (loopbacktest_serial_tx_f_next_value_ce) begin
		serial_tx <= loopbacktest_serial_tx_f_next_value;
	end
	if (loopbacktest_tx_bitno_t_next_value_ce2) begin
		loopbacktest_tx_bitno <= loopbacktest_tx_bitno_t_next_value2;
	end
	if (sys_rst) begin
		serial_tx <= 1'd0;
		loopbacktest_rx_data <= 8'd0;
		loopbacktest_rx_counter <= 11'd0;
		loopbacktest_rx_bitno <= 3'd0;
		loopbacktest_tx_counter <= 11'd0;
		loopbacktest_tx_bitno <= 3'd0;
		loopbacktest_tx_latch <= 8'd0;
		loopbacktest_empty <= 1'd1;
		loopbacktest_data <= 8'd0;
		platform_fsm0_state <= 3'd0;
		platform_fsm1_state <= 2'd0;
	end
end

endmodule
