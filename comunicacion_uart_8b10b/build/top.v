//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-01-04 15:21:10
//--------------------------------------------------------------------------------
module top(
	output serial_tx,
	input serial_rx,
	(* dont_touch = "true" *)	input clk12
);

reg [7:0] transmitter_input = 8'd0;
reg transmitter_tx_ready = 1'd0;
reg transmitter_fifo_we = 1'd0;
reg transmitter_fifo_re = 1'd0;
wire transmitter_tx_done;
reg [1:0] counter_disp = 2'd0;
reg [7:0] data_in = 8'd0;
reg disp_in = 1'd0;
reg k = 1'd0;
wire [9:0] output_1;
reg disp_out = 1'd0;
reg [5:0] code6b = 6'd0;
reg code6b_unbalanced = 1'd0;
reg [3:0] code4b = 4'd0;
reg code4b_unbalanced = 1'd0;
reg alt7_rd0 = 1'd0;
reg alt7_rd1 = 1'd0;
reg [5:0] output_6b = 6'd0;
wire flip_6b;
wire disp_in_3b4b;
reg [3:0] output_4b = 4'd0;
reg flip_4b = 1'd0;
wire [9:0] output_msb_first;
reg [3:0] tx_counter = 4'd0;
reg tx_serial = 1'd1;
reg [9:0] tx_data = 10'd0;
wire tx_strobe;
reg [3:0] tx_bitn = 4'd0;
wire tx_ready;
reg [9:0] tx_latch = 10'd0;
reg tx_done = 1'd0;
wire re;
reg readable = 1'd0;
wire syncfifo_we;
wire syncfifo_writable;
wire syncfifo_re;
wire syncfifo_readable;
wire [7:0] syncfifo_din;
wire [7:0] syncfifo_dout;
reg [5:0] level0 = 6'd0;
reg replace = 1'd0;
reg [4:0] produce = 5'd0;
reg [4:0] consume = 5'd0;
reg [4:0] wrport_adr = 5'd0;
wire [7:0] wrport_dat_r;
wire wrport_we;
wire [7:0] wrport_dat_w;
wire do_read;
wire [4:0] rdport_adr;
wire [7:0] rdport_dat_r;
wire rdport_re;
wire [5:0] level1;
reg [1:0] state = 2'd0;
reg [1:0] next_state = 2'd0;
reg [9:0] tx_latch_t_next_value0 = 10'd0;
reg tx_latch_t_next_value_ce0 = 1'd0;
reg [3:0] tx_counter_t_next_value1 = 4'd0;
reg tx_counter_t_next_value_ce1 = 1'd0;
reg tx_serial_f_next_value = 1'd0;
reg tx_serial_f_next_value_ce = 1'd0;
reg [3:0] tx_bitn_t_next_value2 = 4'd0;
reg tx_bitn_t_next_value_ce2 = 1'd0;
reg tx_done_t_next_value3 = 1'd0;
reg tx_done_t_next_value_ce3 = 1'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
reg [5:0] f_array_muxed0 = 6'd0;
reg f_array_muxed1 = 1'd0;
reg [3:0] rhs_array_muxed0 = 4'd0;
reg rhs_array_muxed1 = 1'd0;

assign syncfifo_din = transmitter_input;
assign syncfifo_we = transmitter_fifo_we;
assign re = transmitter_fifo_re;
assign transmitter_tx_done = tx_done;
assign tx_ready = transmitter_tx_ready;
assign serial_tx = tx_serial;
assign disp_in_3b4b = (disp_in ^ code6b_unbalanced);
assign flip_6b = ((~disp_in) & code6b_unbalanced);
always @(*) begin
	output_6b <= 6'd0;
	if (flip_6b) begin
		output_6b <= (~code6b);
	end else begin
		output_6b <= code6b;
	end
end
always @(*) begin
	disp_out <= 1'd0;
	output_4b <= 4'd0;
	flip_4b <= 1'd0;
	if (((~disp_in_3b4b) & alt7_rd0)) begin
		output_4b <= 3'd7;
		disp_out <= (~disp_in_3b4b);
	end else begin
		if ((disp_in_3b4b & alt7_rd1)) begin
			output_4b <= 4'd8;
			disp_out <= (~disp_in_3b4b);
		end else begin
			flip_4b <= ((~disp_in_3b4b) & code4b_unbalanced);
			disp_out <= (disp_in_3b4b ^ code4b_unbalanced);
			if (flip_4b) begin
				output_4b <= (~code4b);
			end else begin
				output_4b <= code4b;
			end
		end
	end
end
assign output_msb_first = {output_6b, output_4b};
assign output_1 = output_msb_first;
assign tx_strobe = (tx_counter == 1'd0);
always @(*) begin
	tx_counter_t_next_value1 <= 4'd0;
	tx_counter_t_next_value_ce1 <= 1'd0;
	tx_done_t_next_value_ce3 <= 1'd0;
	tx_serial_f_next_value <= 1'd0;
	tx_serial_f_next_value_ce <= 1'd0;
	tx_bitn_t_next_value2 <= 4'd0;
	tx_bitn_t_next_value_ce2 <= 1'd0;
	next_state <= 2'd0;
	tx_done_t_next_value3 <= 1'd0;
	tx_latch_t_next_value0 <= 10'd0;
	tx_latch_t_next_value_ce0 <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			if (tx_strobe) begin
				tx_serial_f_next_value <= 1'd0;
				tx_serial_f_next_value_ce <= 1'd1;
				next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (tx_strobe) begin
				tx_serial_f_next_value <= tx_latch[0];
				tx_serial_f_next_value_ce <= 1'd1;
				tx_latch_t_next_value0 <= {1'd0, tx_latch[9:1]};
				tx_latch_t_next_value_ce0 <= 1'd1;
				tx_bitn_t_next_value2 <= (tx_bitn + 1'd1);
				tx_bitn_t_next_value_ce2 <= 1'd1;
				if ((tx_bitn == 4'd9)) begin
					next_state <= 2'd3;
					tx_bitn_t_next_value2 <= 1'd0;
					tx_bitn_t_next_value_ce2 <= 1'd1;
					tx_done_t_next_value3 <= 1'd1;
					tx_done_t_next_value_ce3 <= 1'd1;
				end
			end
		end
		2'd3: begin
			if (tx_strobe) begin
				tx_serial_f_next_value <= 1'd1;
				tx_serial_f_next_value_ce <= 1'd1;
				tx_done_t_next_value3 <= 1'd0;
				tx_done_t_next_value_ce3 <= 1'd1;
				next_state <= 1'd0;
			end
		end
		default: begin
			if (tx_ready) begin
				tx_latch_t_next_value0 <= tx_data;
				tx_latch_t_next_value_ce0 <= 1'd1;
				tx_counter_t_next_value1 <= 4'd11;
				tx_counter_t_next_value_ce1 <= 1'd1;
				next_state <= 1'd1;
			end else begin
				tx_serial_f_next_value <= 1'd1;
				tx_serial_f_next_value_ce <= 1'd1;
			end
		end
	endcase
end
assign syncfifo_re = (syncfifo_readable & ((~readable) | re));
assign level1 = (level0 + readable);
always @(*) begin
	wrport_adr <= 5'd0;
	if (replace) begin
		wrport_adr <= (produce - 1'd1);
	end else begin
		wrport_adr <= produce;
	end
end
assign wrport_dat_w = syncfifo_din;
assign wrport_we = (syncfifo_we & (syncfifo_writable | replace));
assign do_read = (syncfifo_readable & syncfifo_re);
assign rdport_adr = consume;
assign syncfifo_dout = rdport_dat_r;
assign rdport_re = do_read;
assign syncfifo_writable = (level0 != 6'd32);
assign syncfifo_readable = (level0 != 1'd0);
assign sys_clk = clk12;
assign por_clk = clk12;
assign sys_rst = int_rst;
always @(*) begin
	f_array_muxed0 <= 6'd0;
	case (data_in[4:0])
		1'd0: begin
			f_array_muxed0 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed0 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed0 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed0 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed0 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed0 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed0 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed0 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed0 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed0 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed0 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed0 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed0 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed0 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed0 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed0 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed0 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed0 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed0 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed0 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed0 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed0 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed0 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed0 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed0 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed0 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed0 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed0 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed0 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed0 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed0 <= 6'd33;
		end
		default: begin
			f_array_muxed0 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed1 <= 1'd0;
	case (data_in[4:0])
		1'd0: begin
			f_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed1 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed1 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed1 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed1 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed1 <= 1'd1;
		end
		default: begin
			f_array_muxed1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed0 <= 4'd0;
	case (data_in[7:5])
		1'd0: begin
			rhs_array_muxed0 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed0 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed0 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed0 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed0 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed0 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed0 <= 3'd6;
		end
		default: begin
			rhs_array_muxed0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed1 <= 1'd0;
	case (data_in[7:5])
		1'd0: begin
			rhs_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed1 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed1 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed1 <= 1'd0;
		end
		default: begin
			rhs_array_muxed1 <= 1'd1;
		end
	endcase
end

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	data_in <= syncfifo_dout;
	k <= 1'd0;
	tx_data <= output_1;
	if ((tx_done & (counter_disp < 2'd2))) begin
		counter_disp <= (counter_disp + 1'd1);
	end
	if ((counter_disp == 2'd2)) begin
		disp_in <= disp_out;
		counter_disp <= (counter_disp + 1'd1);
	end
	if ((~tx_done)) begin
		counter_disp <= 1'd0;
	end
	if ((k & (data_in[4:0] == 5'd28))) begin
		code6b <= 6'd48;
		code6b_unbalanced <= 1'd1;
	end else begin
		code6b <= f_array_muxed0;
		code6b_unbalanced <= f_array_muxed1;
	end
	code4b <= rhs_array_muxed0;
	code4b_unbalanced <= rhs_array_muxed1;
	alt7_rd0 <= 1'd0;
	alt7_rd1 <= 1'd0;
	if ((code4b == 3'd7)) begin
		if ((((data_in[4:0] == 5'd17) | (data_in[4:0] == 5'd18)) | (data_in[4:0] == 5'd20))) begin
			alt7_rd0 <= 1'd1;
		end
		if ((((data_in[4:0] == 4'd11) | (data_in[4:0] == 4'd13)) | (data_in[4:0] == 4'd14))) begin
			alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_counter == 1'd0)) begin
		tx_counter <= 4'd11;
	end else begin
		tx_counter <= (tx_counter - 1'd1);
	end
	state <= next_state;
	if (tx_latch_t_next_value_ce0) begin
		tx_latch <= tx_latch_t_next_value0;
	end
	if (tx_counter_t_next_value_ce1) begin
		tx_counter <= tx_counter_t_next_value1;
	end
	if (tx_serial_f_next_value_ce) begin
		tx_serial <= tx_serial_f_next_value;
	end
	if (tx_bitn_t_next_value_ce2) begin
		tx_bitn <= tx_bitn_t_next_value2;
	end
	if (tx_done_t_next_value_ce3) begin
		tx_done <= tx_done_t_next_value3;
	end
	if (syncfifo_re) begin
		readable <= 1'd1;
	end else begin
		if (re) begin
			readable <= 1'd0;
		end
	end
	if (((syncfifo_we & syncfifo_writable) & (~replace))) begin
		produce <= (produce + 1'd1);
	end
	if (do_read) begin
		consume <= (consume + 1'd1);
	end
	if (((syncfifo_we & syncfifo_writable) & (~replace))) begin
		if ((~do_read)) begin
			level0 <= (level0 + 1'd1);
		end
	end else begin
		if (do_read) begin
			level0 <= (level0 - 1'd1);
		end
	end
	if (sys_rst) begin
		counter_disp <= 2'd0;
		data_in <= 8'd0;
		disp_in <= 1'd0;
		k <= 1'd0;
		code6b <= 6'd0;
		code6b_unbalanced <= 1'd0;
		code4b <= 4'd0;
		code4b_unbalanced <= 1'd0;
		alt7_rd0 <= 1'd0;
		alt7_rd1 <= 1'd0;
		tx_counter <= 4'd0;
		tx_serial <= 1'd1;
		tx_data <= 10'd0;
		tx_bitn <= 4'd0;
		tx_latch <= 10'd0;
		tx_done <= 1'd0;
		readable <= 1'd0;
		level0 <= 6'd0;
		produce <= 5'd0;
		consume <= 5'd0;
		state <= 2'd0;
	end
end

reg [7:0] storage[0:31];
reg [7:0] memdat;
reg [7:0] memdat_1;
always @(posedge sys_clk) begin
	if (wrport_we)
		storage[wrport_adr] <= wrport_dat_w;
	memdat <= storage[wrport_adr];
end

always @(posedge sys_clk) begin
	if (rdport_re)
		memdat_1 <= storage[rdport_adr];
end

assign wrport_dat_r = memdat;
assign rdport_dat_r = memdat_1;

endmodule
