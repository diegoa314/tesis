//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-05-07 16:46:10
//--------------------------------------------------------------------------------
module top(
	input clk0_clk_p,
	input clk0_clk_n,
	input clk62_5,
	output gtp_refclk_p,
	output gtp_refclk_n,
	output gtp_tx_p,
	output gtp_tx_n,
	input gtp_rx_p,
	input gtp_rx_n,
	input din_a,
	input din_b,
	input din_c,
	input din_d,
	input din_e,
	input din_f,
	input din_g,
	input din_h,
	input dtin_a,
	input dtin_b,
	input we,
	input link_ready
);

wire write_clk_1;
wire write_clk100;
wire write_clk;
reg write_rst = 1'd0;
wire sys_clk_1;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
wire refclk;
wire pll_fb;
wire qpll_clk;
wire qpll_refclk;
wire qpll_reset;
wire qpll_lock;
reg tx_polarity = 1'd0;
reg rx_polarity = 1'd0;
reg [2:0] loopback = 3'd0;
reg [4:0] txprecursor = 5'd0;
reg [4:0] txpostcursor = 5'd0;
reg [3:0] diffctrl = 4'd0;
wire [8:0] drpaddr;
wire drpen;
wire [15:0] drpdi;
wire drprdy;
wire [15:0] drpdo;
wire drpwe;
wire [7:0] din;
wire [1:0] dtin;
wire link_ready_1;
wire we_1;
reg re0 = 1'd0;
wire tx_link_ready0;
reg [31:0] tx_data_in = 32'd0;
reg [1:0] tx_data_type_in = 2'd0;
reg [31:0] tx_data_out = 32'd0;
wire tx_fifo_empty0;
wire tx_fifo_re0;
wire tx_tx_init_done;
wire tx_pll_lock;
reg tx_k = 1'd0;
reg [31:0] tx_i_data_payload = 32'd0;
wire tx_i_data_strobe;
wire [19:0] tx_o_crc;
wire [31:0] tx_crc_dat;
reg [19:0] tx_crc_cur = 20'd1048575;
reg [19:0] tx_crc_next = 20'd151419;
wire tx_link_ready1;
wire tx_fifo_empty1;
wire [1:0] tx_data_type;
reg tx_sop = 1'd0;
reg tx_eop = 1'd0;
reg tx_idle = 1'd0;
reg tx_fifo_ready = 1'd0;
reg tx_encoder_ready = 1'd0;
reg tx_change_disp = 1'd0;
reg tx_fifo_re1 = 1'd0;
reg tx_strobe_crc = 1'd0;
reg tx_reset0 = 1'd0;
wire tx_system_ready;
wire tx_reset1;
reg re1 = 1'd0;
reg readable = 1'd0;
reg [31:0] dout = 32'd0;
reg [1:0] dtout = 2'd0;
wire asyncfifo_we;
wire asyncfifo_writable;
wire asyncfifo_re;
wire asyncfifo_readable;
wire [31:0] asyncfifo_din;
wire [31:0] asyncfifo_dout;
wire [1:0] asyncfifo_dtin;
wire [1:0] asyncfifo_dtout;
wire graycounter0_ce;
(* dont_touch = "true" *) reg [5:0] graycounter0_q = 6'd0;
wire [5:0] graycounter0_q_next;
reg [5:0] graycounter0_q_binary = 6'd0;
reg [5:0] graycounter0_q_next_binary = 6'd0;
wire graycounter1_ce;
(* dont_touch = "true" *) reg [5:0] graycounter1_q = 6'd0;
wire [5:0] graycounter1_q_next;
reg [5:0] graycounter1_q_binary = 6'd0;
reg [5:0] graycounter1_q_next_binary = 6'd0;
wire [5:0] produce_rdomain;
wire [5:0] consume_wdomain;
wire [4:0] wrport_adr;
wire [31:0] wrport_dat_r;
wire wrport_we;
wire [31:0] wrport_dat_w;
wire [4:0] rdport_adr;
wire [31:0] rdport_dat_r;
wire [4:0] wrport1_adr;
wire [1:0] wrport1_dat_r;
wire wrport1_we;
wire [1:0] wrport1_dat_w;
wire [4:0] rdport1_adr;
wire [1:0] rdport1_dat_r;
reg tx_init_done = 1'd0;
reg tx_init_restart = 1'd0;
wire tx_init_plllock0;
reg tx_init_pllreset = 1'd0;
reg tx_init_gttxreset0 = 1'd0;
wire tx_init_txresetdone0;
reg tx_init_txdlysreset0 = 1'd0;
wire tx_init_txdlysresetdone0;
reg tx_init_txphinit0 = 1'd0;
wire tx_init_txphinitdone0;
reg tx_init_txphalign0 = 1'd0;
wire tx_init_txphaligndone0;
reg tx_init_txdlyen0 = 1'd0;
reg tx_init_txuserrdy0 = 1'd0;
wire tx_init_plllock1;
wire tx_init_txresetdone1;
wire tx_init_txdlysresetdone1;
wire tx_init_txphinitdone1;
wire tx_init_txphaligndone1;
reg tx_init_gttxreset1 = 1'd0;
reg tx_init_txdlysreset1 = 1'd0;
reg tx_init_txphinit1 = 1'd0;
reg tx_init_txphalign1 = 1'd0;
reg tx_init_txdlyen1 = 1'd0;
reg tx_init_txuserrdy1 = 1'd0;
reg tx_init_pll_reset_timer_wait = 1'd0;
wire tx_init_pll_reset_timer_done;
reg [5:0] tx_init_pll_reset_timer_count = 6'd32;
wire tx_init_reset;
wire tx_init_ready_timer_wait;
wire tx_init_ready_timer_done;
reg [15:0] tx_init_ready_timer_count = 16'd62500;
reg tx_init_txphaligndone_r = 1'd1;
wire tx_init_txphaligndone_rising;
reg gtprxinit_done = 1'd0;
reg gtprxinit_restart = 1'd0;
wire gtprxinit_plllock0;
reg gtprxinit_gtrxreset0 = 1'd0;
reg gtprxinit_gtrxpd0 = 1'd0;
wire gtprxinit_rxresetdone0;
reg gtprxinit_rxdlysreset0 = 1'd0;
wire gtprxinit_rxdlysresetdone0;
reg gtprxinit_rxphalign0 = 1'd0;
reg gtprxinit_rxdlyen0 = 1'd0;
reg gtprxinit_rxuserrdy0 = 1'd0;
wire gtprxinit_rxsyncdone0;
wire gtprxinit_rxpmaresetdone0;
wire [8:0] gtprxinit_drpaddr;
reg gtprxinit_drpen = 1'd0;
reg [15:0] gtprxinit_drpdi = 16'd0;
wire gtprxinit_drprdy;
wire [15:0] gtprxinit_drpdo;
reg gtprxinit_drpwe = 1'd0;
reg gtprxinit_drp_mux_sel = 1'd0;
reg [15:0] gtprxinit_drpvalue = 16'd0;
reg gtprxinit_drpmask = 1'd0;
wire gtprxinit_rxpmaresetdone1;
reg gtprxinit_rxpmaresetdone_r = 1'd0;
wire gtprxinit_plllock1;
wire gtprxinit_rxresetdone1;
wire gtprxinit_rxdlysresetdone1;
wire gtprxinit_rxsyncdone1;
reg gtprxinit_gtrxreset1 = 1'd0;
reg gtprxinit_gtrxpd1 = 1'd0;
reg gtprxinit_rxdlysreset1 = 1'd0;
reg gtprxinit_rxphalign1 = 1'd0;
reg gtprxinit_rxdlyen1 = 1'd0;
reg gtprxinit_rxuserrdy1 = 1'd0;
reg gtprxinit_pll_reset_timer_wait = 1'd0;
wire gtprxinit_pll_reset_timer_done;
reg [5:0] gtprxinit_pll_reset_timer_count = 6'd60;
wire gtprxinit_reset;
wire gtprxinit_ready_timer_wait;
wire gtprxinit_ready_timer_done;
reg [18:0] gtprxinit_ready_timer_count = 19'd480000;
reg gtprxinit_cdr_stable_timer_wait = 1'd0;
wire gtprxinit_cdr_stable_timer_done;
reg [10:0] gtprxinit_cdr_stable_timer_count = 11'd1024;
wire txoutclk0;
wire rxoutclk;
wire txusrclk0;
wire txusrclk20;
wire txusrclk1;
wire txusrclk21;
wire txoutclk1;
wire pll_fb2;
wire pll_lock;
wire rxphaligndone;
wire tx_clk;
reg tx_rst = 1'd0;
wire rx_clk;
reg [23:0] zeros = 24'd0;
reg [2:0] tx_state = 3'd0;
reg [2:0] tx_next_state = 3'd0;
reg tx_change_disp_clockdomainsrenamer0_next_value0 = 1'd0;
reg tx_change_disp_clockdomainsrenamer0_next_value_ce0 = 1'd0;
reg tx_fifo_re1_clockdomainsrenamer0_next_value1 = 1'd0;
reg tx_fifo_re1_clockdomainsrenamer0_next_value_ce1 = 1'd0;
reg tx_sop_clockdomainsrenamer0_next_value2 = 1'd0;
reg tx_sop_clockdomainsrenamer0_next_value_ce2 = 1'd0;
reg tx_idle_clockdomainsrenamer0_next_value3 = 1'd0;
reg tx_idle_clockdomainsrenamer0_next_value_ce3 = 1'd0;
reg tx_encoder_ready_clockdomainsrenamer0_next_value4 = 1'd0;
reg tx_encoder_ready_clockdomainsrenamer0_next_value_ce4 = 1'd0;
reg tx_fifo_ready_clockdomainsrenamer0_next_value5 = 1'd0;
reg tx_fifo_ready_clockdomainsrenamer0_next_value_ce5 = 1'd0;
reg tx_strobe_crc_clockdomainsrenamer0_next_value6 = 1'd0;
reg tx_strobe_crc_clockdomainsrenamer0_next_value_ce6 = 1'd0;
reg tx_eop_clockdomainsrenamer0_next_value7 = 1'd0;
reg tx_eop_clockdomainsrenamer0_next_value_ce7 = 1'd0;
reg [2:0] state = 3'd0;
reg [2:0] next_state = 3'd0;
reg [3:0] gtprxinit_state = 4'd0;
reg [3:0] gtprxinit_next_state = 4'd0;
reg [15:0] gtprxinit_drpvalue_clockdomainsrenamer1_next_value = 16'd0;
reg gtprxinit_drpvalue_clockdomainsrenamer1_next_value_ce = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl0_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl0_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl1_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl1_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl2_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl2_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl3_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl3_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl4_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl4_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl5_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl5_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl6_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl6_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl7_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl7_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl8_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl8_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl9_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl9_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl10_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl10_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl11_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl11_regs1 = 1'd0;

assign write_clk = write_clk_1;
assign gtp_refclk_p = refclk;
assign gtp_refclk_n = (~refclk);
assign we_1 = we;
assign link_ready_1 = link_ready;
assign din = {zeros, din_h, din_g, din_f, din_e, din_d, din_c, din_b, din_a};
assign dtin = {dtin_b, dtin_a};
assign sys_clk = sys_clk_1;
assign por_clk = sys_clk_1;
assign sys_rst = int_rst;
assign tx_init_plllock0 = qpll_lock;
assign gtprxinit_plllock0 = qpll_lock;
assign qpll_reset = tx_init_pllreset;
assign drpaddr = gtprxinit_drpaddr;
assign drpdi = gtprxinit_drpdi;
assign gtprxinit_drpdo = drpdo;
assign drpen = gtprxinit_drpen;
assign drpwe = gtprxinit_drpwe;
assign gtprxinit_drprdy = drprdy;
assign asyncfifo_din = din;
assign asyncfifo_dtin = dtin;
assign asyncfifo_we = we_1;
always @(*) begin
	re1 <= 1'd0;
	re1 <= re0;
	if ((~asyncfifo_readable)) begin
		re1 <= 1'd0;
	end else begin
		re1 <= tx_fifo_re0;
	end
end
assign tx_link_ready0 = link_ready_1;
assign tx_fifo_empty0 = (~asyncfifo_readable);
assign tx_tx_init_done = tx_init_done;
assign tx_pll_lock = pll_lock;
always @(*) begin
	tx_data_in <= 32'd0;
	if ((link_ready_1 & asyncfifo_readable)) begin
		tx_data_in <= asyncfifo_dout;
	end
end
always @(*) begin
	tx_data_type_in <= 2'd0;
	if ((link_ready_1 & asyncfifo_readable)) begin
		tx_data_type_in <= asyncfifo_dtout;
	end
end
assign asyncfifo_re = (re1 | (~readable));
assign graycounter0_ce = (asyncfifo_writable & asyncfifo_we);
assign graycounter1_ce = (asyncfifo_readable & asyncfifo_re);
assign asyncfifo_writable = (((graycounter0_q[5] == consume_wdomain[5]) | (graycounter0_q[4] == consume_wdomain[4])) | (graycounter0_q[3:0] != consume_wdomain[3:0]));
assign asyncfifo_readable = (graycounter1_q != produce_rdomain);
assign wrport_adr = graycounter0_q_binary[4:0];
assign wrport_dat_w = asyncfifo_din;
assign wrport_we = graycounter0_ce;
assign rdport_adr = graycounter1_q_next_binary[4:0];
assign asyncfifo_dout = rdport_dat_r;
assign wrport1_adr = graycounter0_q_binary[4:0];
assign wrport1_dat_w = asyncfifo_dtin;
assign wrport1_we = graycounter0_ce;
assign rdport1_adr = graycounter1_q_next_binary[4:0];
assign asyncfifo_dtout = rdport1_dat_r;
always @(*) begin
	graycounter0_q_next_binary <= 6'd0;
	if (graycounter0_ce) begin
		graycounter0_q_next_binary <= (graycounter0_q_binary + 1'd1);
	end else begin
		graycounter0_q_next_binary <= graycounter0_q_binary;
	end
end
assign graycounter0_q_next = (graycounter0_q_next_binary ^ graycounter0_q_next_binary[5:1]);
always @(*) begin
	graycounter1_q_next_binary <= 6'd0;
	if (graycounter1_ce) begin
		graycounter1_q_next_binary <= (graycounter1_q_binary + 1'd1);
	end else begin
		graycounter1_q_next_binary <= graycounter1_q_binary;
	end
end
assign graycounter1_q_next = (graycounter1_q_next_binary ^ graycounter1_q_next_binary[5:1]);
assign tx_link_ready1 = tx_link_ready0;
assign tx_fifo_empty1 = tx_fifo_empty0;
assign tx_data_type = tx_data_type_in;
assign tx_system_ready = (tx_tx_init_done & tx_pll_lock);
assign tx_fifo_re0 = tx_fifo_re1;
assign tx_i_data_strobe = tx_strobe_crc;
always @(*) begin
	tx_i_data_payload <= 32'd0;
	if (tx_encoder_ready) begin
		tx_i_data_payload <= tx_data_in;
	end
end
assign tx_crc_dat = tx_i_data_payload;
assign tx_o_crc = tx_crc_cur;
always @(*) begin
	tx_crc_next <= 20'd151419;
	tx_crc_next[0] <= ((((((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[1]) ^ tx_crc_dat[3]) ^ tx_crc_dat[4]) ^ tx_crc_dat[6]) ^ tx_crc_dat[7]) ^ tx_crc_dat[8]) ^ tx_crc_dat[12]) ^ tx_crc_dat[13]) ^ tx_crc_dat[15]) ^ tx_crc_dat[21]) ^ tx_crc_dat[22]) ^ tx_crc_dat[23]) ^ tx_crc_dat[24]) ^ tx_crc_dat[26]) ^ tx_crc_dat[28]) ^ tx_crc_dat[30]) ^ tx_crc_dat[31]) ^ tx_crc_cur[0]) ^ tx_crc_cur[1]) ^ tx_crc_cur[3]) ^ tx_crc_cur[9]) ^ tx_crc_cur[10]) ^ tx_crc_cur[11]) ^ tx_crc_cur[12]) ^ tx_crc_cur[14]) ^ tx_crc_cur[16]) ^ tx_crc_cur[18]) ^ tx_crc_cur[19]);
	tx_crc_next[1] <= (((((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[2]) ^ tx_crc_dat[3]) ^ tx_crc_dat[5]) ^ tx_crc_dat[6]) ^ tx_crc_dat[9]) ^ tx_crc_dat[12]) ^ tx_crc_dat[14]) ^ tx_crc_dat[15]) ^ tx_crc_dat[16]) ^ tx_crc_dat[21]) ^ tx_crc_dat[25]) ^ tx_crc_dat[26]) ^ tx_crc_dat[27]) ^ tx_crc_dat[28]) ^ tx_crc_dat[29]) ^ tx_crc_dat[30]) ^ tx_crc_cur[0]) ^ tx_crc_cur[2]) ^ tx_crc_cur[3]) ^ tx_crc_cur[4]) ^ tx_crc_cur[9]) ^ tx_crc_cur[13]) ^ tx_crc_cur[14]) ^ tx_crc_cur[15]) ^ tx_crc_cur[16]) ^ tx_crc_cur[17]) ^ tx_crc_cur[18]);
	tx_crc_next[2] <= ((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[8]) ^ tx_crc_dat[10]) ^ tx_crc_dat[12]) ^ tx_crc_dat[16]) ^ tx_crc_dat[17]) ^ tx_crc_dat[21]) ^ tx_crc_dat[23]) ^ tx_crc_dat[24]) ^ tx_crc_dat[27]) ^ tx_crc_dat[29]) ^ tx_crc_cur[0]) ^ tx_crc_cur[4]) ^ tx_crc_cur[5]) ^ tx_crc_cur[9]) ^ tx_crc_cur[11]) ^ tx_crc_cur[12]) ^ tx_crc_cur[15]) ^ tx_crc_cur[17]);
	tx_crc_next[3] <= (((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[3]) ^ tx_crc_dat[4]) ^ tx_crc_dat[6]) ^ tx_crc_dat[7]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[11]) ^ tx_crc_dat[12]) ^ tx_crc_dat[15]) ^ tx_crc_dat[17]) ^ tx_crc_dat[18]) ^ tx_crc_dat[21]) ^ tx_crc_dat[23]) ^ tx_crc_dat[25]) ^ tx_crc_dat[26]) ^ tx_crc_dat[31]) ^ tx_crc_cur[0]) ^ tx_crc_cur[3]) ^ tx_crc_cur[5]) ^ tx_crc_cur[6]) ^ tx_crc_cur[9]) ^ tx_crc_cur[11]) ^ tx_crc_cur[13]) ^ tx_crc_cur[14]) ^ tx_crc_cur[19]);
	tx_crc_next[4] <= ((((((((((((((((((((((((tx_crc_dat[1] ^ tx_crc_dat[4]) ^ tx_crc_dat[5]) ^ tx_crc_dat[7]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[12]) ^ tx_crc_dat[13]) ^ tx_crc_dat[16]) ^ tx_crc_dat[18]) ^ tx_crc_dat[19]) ^ tx_crc_dat[22]) ^ tx_crc_dat[24]) ^ tx_crc_dat[26]) ^ tx_crc_dat[27]) ^ tx_crc_cur[0]) ^ tx_crc_cur[1]) ^ tx_crc_cur[4]) ^ tx_crc_cur[6]) ^ tx_crc_cur[7]) ^ tx_crc_cur[10]) ^ tx_crc_cur[12]) ^ tx_crc_cur[14]) ^ tx_crc_cur[15]);
	tx_crc_next[5] <= ((((((((((((((((((((((((tx_crc_dat[2] ^ tx_crc_dat[5]) ^ tx_crc_dat[6]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[13]) ^ tx_crc_dat[14]) ^ tx_crc_dat[17]) ^ tx_crc_dat[19]) ^ tx_crc_dat[20]) ^ tx_crc_dat[23]) ^ tx_crc_dat[25]) ^ tx_crc_dat[27]) ^ tx_crc_dat[28]) ^ tx_crc_cur[1]) ^ tx_crc_cur[2]) ^ tx_crc_cur[5]) ^ tx_crc_cur[7]) ^ tx_crc_cur[8]) ^ tx_crc_cur[11]) ^ tx_crc_cur[13]) ^ tx_crc_cur[15]) ^ tx_crc_cur[16]);
	tx_crc_next[6] <= ((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[1]) ^ tx_crc_dat[4]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[13]) ^ tx_crc_dat[14]) ^ tx_crc_dat[18]) ^ tx_crc_dat[20]) ^ tx_crc_dat[22]) ^ tx_crc_dat[23]) ^ tx_crc_dat[29]) ^ tx_crc_dat[30]) ^ tx_crc_dat[31]) ^ tx_crc_cur[1]) ^ tx_crc_cur[2]) ^ tx_crc_cur[6]) ^ tx_crc_cur[8]) ^ tx_crc_cur[10]) ^ tx_crc_cur[11]) ^ tx_crc_cur[17]) ^ tx_crc_cur[18]) ^ tx_crc_cur[19]);
	tx_crc_next[7] <= ((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[2]) ^ tx_crc_dat[3]) ^ tx_crc_dat[4]) ^ tx_crc_dat[5]) ^ tx_crc_dat[6]) ^ tx_crc_dat[7]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[13]) ^ tx_crc_dat[14]) ^ tx_crc_dat[19]) ^ tx_crc_dat[22]) ^ tx_crc_dat[26]) ^ tx_crc_dat[28]) ^ tx_crc_cur[1]) ^ tx_crc_cur[2]) ^ tx_crc_cur[7]) ^ tx_crc_cur[10]) ^ tx_crc_cur[14]) ^ tx_crc_cur[16]);
	tx_crc_next[8] <= (((((((((((((((((((((((tx_crc_dat[1] ^ tx_crc_dat[3]) ^ tx_crc_dat[4]) ^ tx_crc_dat[5]) ^ tx_crc_dat[6]) ^ tx_crc_dat[7]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[12]) ^ tx_crc_dat[14]) ^ tx_crc_dat[15]) ^ tx_crc_dat[20]) ^ tx_crc_dat[23]) ^ tx_crc_dat[27]) ^ tx_crc_dat[29]) ^ tx_crc_cur[0]) ^ tx_crc_cur[2]) ^ tx_crc_cur[3]) ^ tx_crc_cur[8]) ^ tx_crc_cur[11]) ^ tx_crc_cur[15]) ^ tx_crc_cur[17]);
	tx_crc_next[9] <= (((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[1]) ^ tx_crc_dat[2]) ^ tx_crc_dat[3]) ^ tx_crc_dat[5]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[16]) ^ tx_crc_dat[22]) ^ tx_crc_dat[23]) ^ tx_crc_dat[26]) ^ tx_crc_dat[31]) ^ tx_crc_cur[4]) ^ tx_crc_cur[10]) ^ tx_crc_cur[11]) ^ tx_crc_cur[14]) ^ tx_crc_cur[19]);
	tx_crc_next[10] <= ((((((((((((((((tx_crc_dat[1] ^ tx_crc_dat[2]) ^ tx_crc_dat[3]) ^ tx_crc_dat[4]) ^ tx_crc_dat[6]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[12]) ^ tx_crc_dat[17]) ^ tx_crc_dat[23]) ^ tx_crc_dat[24]) ^ tx_crc_dat[27]) ^ tx_crc_cur[0]) ^ tx_crc_cur[5]) ^ tx_crc_cur[11]) ^ tx_crc_cur[12]) ^ tx_crc_cur[15]);
	tx_crc_next[11] <= ((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[1]) ^ tx_crc_dat[2]) ^ tx_crc_dat[5]) ^ tx_crc_dat[6]) ^ tx_crc_dat[8]) ^ tx_crc_dat[11]) ^ tx_crc_dat[15]) ^ tx_crc_dat[18]) ^ tx_crc_dat[21]) ^ tx_crc_dat[22]) ^ tx_crc_dat[23]) ^ tx_crc_dat[25]) ^ tx_crc_dat[26]) ^ tx_crc_dat[30]) ^ tx_crc_dat[31]) ^ tx_crc_cur[3]) ^ tx_crc_cur[6]) ^ tx_crc_cur[9]) ^ tx_crc_cur[10]) ^ tx_crc_cur[11]) ^ tx_crc_cur[13]) ^ tx_crc_cur[14]) ^ tx_crc_cur[18]) ^ tx_crc_cur[19]);
	tx_crc_next[12] <= ((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[2]) ^ tx_crc_dat[4]) ^ tx_crc_dat[8]) ^ tx_crc_dat[9]) ^ tx_crc_dat[13]) ^ tx_crc_dat[15]) ^ tx_crc_dat[16]) ^ tx_crc_dat[19]) ^ tx_crc_dat[21]) ^ tx_crc_dat[27]) ^ tx_crc_dat[28]) ^ tx_crc_dat[30]) ^ tx_crc_cur[1]) ^ tx_crc_cur[3]) ^ tx_crc_cur[4]) ^ tx_crc_cur[7]) ^ tx_crc_cur[9]) ^ tx_crc_cur[15]) ^ tx_crc_cur[16]) ^ tx_crc_cur[18]);
	tx_crc_next[13] <= ((((((((((((((((((((tx_crc_dat[1] ^ tx_crc_dat[3]) ^ tx_crc_dat[5]) ^ tx_crc_dat[9]) ^ tx_crc_dat[10]) ^ tx_crc_dat[14]) ^ tx_crc_dat[16]) ^ tx_crc_dat[17]) ^ tx_crc_dat[20]) ^ tx_crc_dat[22]) ^ tx_crc_dat[28]) ^ tx_crc_dat[29]) ^ tx_crc_dat[31]) ^ tx_crc_cur[2]) ^ tx_crc_cur[4]) ^ tx_crc_cur[5]) ^ tx_crc_cur[8]) ^ tx_crc_cur[10]) ^ tx_crc_cur[16]) ^ tx_crc_cur[17]) ^ tx_crc_cur[19]);
	tx_crc_next[14] <= ((((((((((((((((((tx_crc_dat[2] ^ tx_crc_dat[4]) ^ tx_crc_dat[6]) ^ tx_crc_dat[10]) ^ tx_crc_dat[11]) ^ tx_crc_dat[15]) ^ tx_crc_dat[17]) ^ tx_crc_dat[18]) ^ tx_crc_dat[21]) ^ tx_crc_dat[23]) ^ tx_crc_dat[29]) ^ tx_crc_dat[30]) ^ tx_crc_cur[3]) ^ tx_crc_cur[5]) ^ tx_crc_cur[6]) ^ tx_crc_cur[9]) ^ tx_crc_cur[11]) ^ tx_crc_cur[17]) ^ tx_crc_cur[18]);
	tx_crc_next[15] <= (((((((((((((((((((tx_crc_dat[3] ^ tx_crc_dat[5]) ^ tx_crc_dat[7]) ^ tx_crc_dat[11]) ^ tx_crc_dat[12]) ^ tx_crc_dat[16]) ^ tx_crc_dat[18]) ^ tx_crc_dat[19]) ^ tx_crc_dat[22]) ^ tx_crc_dat[24]) ^ tx_crc_dat[30]) ^ tx_crc_dat[31]) ^ tx_crc_cur[0]) ^ tx_crc_cur[4]) ^ tx_crc_cur[6]) ^ tx_crc_cur[7]) ^ tx_crc_cur[10]) ^ tx_crc_cur[12]) ^ tx_crc_cur[18]) ^ tx_crc_cur[19]);
	tx_crc_next[16] <= ((((((((((((((((((tx_crc_dat[4] ^ tx_crc_dat[6]) ^ tx_crc_dat[8]) ^ tx_crc_dat[12]) ^ tx_crc_dat[13]) ^ tx_crc_dat[17]) ^ tx_crc_dat[19]) ^ tx_crc_dat[20]) ^ tx_crc_dat[23]) ^ tx_crc_dat[25]) ^ tx_crc_dat[31]) ^ tx_crc_cur[0]) ^ tx_crc_cur[1]) ^ tx_crc_cur[5]) ^ tx_crc_cur[7]) ^ tx_crc_cur[8]) ^ tx_crc_cur[11]) ^ tx_crc_cur[13]) ^ tx_crc_cur[19]);
	tx_crc_next[17] <= ((((((((((((((((tx_crc_dat[5] ^ tx_crc_dat[7]) ^ tx_crc_dat[9]) ^ tx_crc_dat[13]) ^ tx_crc_dat[14]) ^ tx_crc_dat[18]) ^ tx_crc_dat[20]) ^ tx_crc_dat[21]) ^ tx_crc_dat[24]) ^ tx_crc_dat[26]) ^ tx_crc_cur[1]) ^ tx_crc_cur[2]) ^ tx_crc_cur[6]) ^ tx_crc_cur[8]) ^ tx_crc_cur[9]) ^ tx_crc_cur[12]) ^ tx_crc_cur[14]);
	tx_crc_next[18] <= (((((((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[1]) ^ tx_crc_dat[3]) ^ tx_crc_dat[4]) ^ tx_crc_dat[7]) ^ tx_crc_dat[10]) ^ tx_crc_dat[12]) ^ tx_crc_dat[13]) ^ tx_crc_dat[14]) ^ tx_crc_dat[19]) ^ tx_crc_dat[23]) ^ tx_crc_dat[24]) ^ tx_crc_dat[25]) ^ tx_crc_dat[26]) ^ tx_crc_dat[27]) ^ tx_crc_dat[28]) ^ tx_crc_dat[30]) ^ tx_crc_dat[31]) ^ tx_crc_cur[0]) ^ tx_crc_cur[1]) ^ tx_crc_cur[2]) ^ tx_crc_cur[7]) ^ tx_crc_cur[11]) ^ tx_crc_cur[12]) ^ tx_crc_cur[13]) ^ tx_crc_cur[14]) ^ tx_crc_cur[15]) ^ tx_crc_cur[16]) ^ tx_crc_cur[18]) ^ tx_crc_cur[19]);
	tx_crc_next[19] <= ((((((((((((((((((((((((((tx_crc_dat[0] ^ tx_crc_dat[2]) ^ tx_crc_dat[3]) ^ tx_crc_dat[5]) ^ tx_crc_dat[6]) ^ tx_crc_dat[7]) ^ tx_crc_dat[11]) ^ tx_crc_dat[12]) ^ tx_crc_dat[14]) ^ tx_crc_dat[20]) ^ tx_crc_dat[21]) ^ tx_crc_dat[22]) ^ tx_crc_dat[23]) ^ tx_crc_dat[25]) ^ tx_crc_dat[27]) ^ tx_crc_dat[29]) ^ tx_crc_dat[30]) ^ tx_crc_cur[0]) ^ tx_crc_cur[2]) ^ tx_crc_cur[8]) ^ tx_crc_cur[9]) ^ tx_crc_cur[10]) ^ tx_crc_cur[11]) ^ tx_crc_cur[13]) ^ tx_crc_cur[15]) ^ tx_crc_cur[17]) ^ tx_crc_cur[18]);
end
assign tx_reset1 = tx_reset0;
always @(*) begin
	tx_fifo_re1_clockdomainsrenamer0_next_value1 <= 1'd0;
	tx_fifo_re1_clockdomainsrenamer0_next_value_ce1 <= 1'd0;
	tx_sop_clockdomainsrenamer0_next_value2 <= 1'd0;
	tx_sop_clockdomainsrenamer0_next_value_ce2 <= 1'd0;
	tx_idle_clockdomainsrenamer0_next_value3 <= 1'd0;
	tx_idle_clockdomainsrenamer0_next_value_ce3 <= 1'd0;
	tx_encoder_ready_clockdomainsrenamer0_next_value4 <= 1'd0;
	tx_encoder_ready_clockdomainsrenamer0_next_value_ce4 <= 1'd0;
	tx_fifo_ready_clockdomainsrenamer0_next_value5 <= 1'd0;
	tx_fifo_ready_clockdomainsrenamer0_next_value_ce5 <= 1'd0;
	tx_strobe_crc_clockdomainsrenamer0_next_value6 <= 1'd0;
	tx_strobe_crc_clockdomainsrenamer0_next_value_ce6 <= 1'd0;
	tx_next_state <= 3'd0;
	tx_change_disp_clockdomainsrenamer0_next_value0 <= 1'd0;
	tx_eop_clockdomainsrenamer0_next_value7 <= 1'd0;
	tx_change_disp_clockdomainsrenamer0_next_value_ce0 <= 1'd0;
	tx_eop_clockdomainsrenamer0_next_value_ce7 <= 1'd0;
	tx_next_state <= tx_state;
	case (tx_state)
		1'd1: begin
			if (((~tx_fifo_empty1) & tx_link_ready1)) begin
				tx_next_state <= 2'd2;
				tx_fifo_re1_clockdomainsrenamer0_next_value1 <= 1'd1;
				tx_fifo_re1_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
				tx_sop_clockdomainsrenamer0_next_value2 <= 1'd1;
				tx_sop_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
				tx_change_disp_clockdomainsrenamer0_next_value0 <= 1'd1;
				tx_change_disp_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
				tx_idle_clockdomainsrenamer0_next_value3 <= 1'd0;
				tx_idle_clockdomainsrenamer0_next_value_ce3 <= 1'd1;
			end else begin
				tx_idle_clockdomainsrenamer0_next_value3 <= 1'd1;
				tx_idle_clockdomainsrenamer0_next_value_ce3 <= 1'd1;
			end
		end
		2'd2: begin
			tx_next_state <= 2'd3;
			tx_encoder_ready_clockdomainsrenamer0_next_value4 <= 1'd1;
			tx_encoder_ready_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
			tx_fifo_ready_clockdomainsrenamer0_next_value5 <= 1'd1;
			tx_fifo_ready_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
			tx_fifo_re1_clockdomainsrenamer0_next_value1 <= 1'd1;
			tx_fifo_re1_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
			tx_sop_clockdomainsrenamer0_next_value2 <= 1'd0;
			tx_sop_clockdomainsrenamer0_next_value_ce2 <= 1'd1;
			tx_strobe_crc_clockdomainsrenamer0_next_value6 <= 1'd1;
			tx_strobe_crc_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
		end
		2'd3: begin
			tx_encoder_ready_clockdomainsrenamer0_next_value4 <= 1'd1;
			tx_encoder_ready_clockdomainsrenamer0_next_value_ce4 <= 1'd1;
			tx_fifo_ready_clockdomainsrenamer0_next_value5 <= 1'd1;
			tx_fifo_ready_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
			tx_strobe_crc_clockdomainsrenamer0_next_value6 <= 1'd1;
			tx_strobe_crc_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
			if (tx_fifo_empty1) begin
				tx_next_state <= 1'd0;
			end else begin
				tx_fifo_re1_clockdomainsrenamer0_next_value1 <= 1'd1;
				tx_fifo_re1_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
			end
			if ((tx_data_type == 2'd2)) begin
				tx_eop_clockdomainsrenamer0_next_value7 <= 1'd1;
				tx_eop_clockdomainsrenamer0_next_value_ce7 <= 1'd1;
				tx_fifo_re1_clockdomainsrenamer0_next_value1 <= 1'd0;
				tx_fifo_re1_clockdomainsrenamer0_next_value_ce1 <= 1'd1;
				tx_next_state <= 3'd4;
				tx_strobe_crc_clockdomainsrenamer0_next_value6 <= 1'd0;
				tx_strobe_crc_clockdomainsrenamer0_next_value_ce6 <= 1'd1;
			end
		end
		3'd4: begin
			tx_next_state <= 3'd5;
			tx_eop_clockdomainsrenamer0_next_value7 <= 1'd0;
			tx_eop_clockdomainsrenamer0_next_value_ce7 <= 1'd1;
			tx_idle_clockdomainsrenamer0_next_value3 <= 1'd1;
			tx_idle_clockdomainsrenamer0_next_value_ce3 <= 1'd1;
		end
		3'd5: begin
			tx_fifo_ready_clockdomainsrenamer0_next_value5 <= 1'd0;
			tx_fifo_ready_clockdomainsrenamer0_next_value_ce5 <= 1'd1;
			tx_next_state <= 3'd6;
		end
		3'd6: begin
			tx_next_state <= 1'd1;
		end
		default: begin
			if ((tx_link_ready1 & tx_system_ready)) begin
				tx_next_state <= 1'd1;
				tx_change_disp_clockdomainsrenamer0_next_value0 <= 1'd1;
				tx_change_disp_clockdomainsrenamer0_next_value_ce0 <= 1'd1;
			end else begin
				tx_next_state <= 1'd0;
			end
		end
	endcase
end
assign tx_init_ready_timer_wait = ((~tx_init_done) & (~tx_init_reset));
assign tx_init_reset = (tx_init_restart | tx_init_ready_timer_done);
assign tx_init_txphaligndone_rising = (tx_init_txphaligndone1 & (~tx_init_txphaligndone_r));
assign tx_init_pll_reset_timer_done = (tx_init_pll_reset_timer_count == 1'd0);
always @(*) begin
	tx_init_pllreset <= 1'd0;
	tx_init_gttxreset1 <= 1'd0;
	tx_init_txdlysreset1 <= 1'd0;
	tx_init_txphinit1 <= 1'd0;
	tx_init_txphalign1 <= 1'd0;
	tx_init_txdlyen1 <= 1'd0;
	tx_init_txuserrdy1 <= 1'd0;
	tx_init_pll_reset_timer_wait <= 1'd0;
	next_state <= 3'd0;
	tx_init_done <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			tx_init_gttxreset1 <= 1'd1;
			if (tx_init_plllock1) begin
				next_state <= 2'd2;
			end
		end
		2'd2: begin
			tx_init_gttxreset1 <= 1'd0;
			tx_init_txuserrdy1 <= 1'd1;
			if (tx_init_txresetdone1) begin
				next_state <= 2'd3;
			end
		end
		2'd3: begin
			tx_init_txuserrdy1 <= 1'd1;
			tx_init_txdlysreset1 <= 1'd1;
			if (tx_init_txdlysresetdone1) begin
				next_state <= 3'd4;
			end
		end
		3'd4: begin
			tx_init_txuserrdy1 <= 1'd1;
			tx_init_txphinit1 <= 1'd1;
			if (tx_init_txphinitdone1) begin
				next_state <= 3'd5;
			end
		end
		3'd5: begin
			tx_init_txuserrdy1 <= 1'd1;
			tx_init_txphalign1 <= 1'd1;
			if (tx_init_txphaligndone_rising) begin
				next_state <= 3'd6;
			end
		end
		3'd6: begin
			tx_init_txuserrdy1 <= 1'd1;
			tx_init_txdlyen1 <= 1'd1;
			if (tx_init_txphaligndone_rising) begin
				next_state <= 3'd7;
			end
		end
		3'd7: begin
			tx_init_txuserrdy1 <= 1'd1;
			tx_init_done <= 1'd1;
			if (tx_init_restart) begin
				next_state <= 1'd0;
			end
		end
		default: begin
			tx_init_pll_reset_timer_wait <= 1'd1;
			if (tx_init_pll_reset_timer_done) begin
				tx_init_pllreset <= 1'd1;
				next_state <= 1'd1;
			end
		end
	endcase
end
assign tx_init_ready_timer_done = (tx_init_ready_timer_count == 1'd0);
assign gtprxinit_drpaddr = 5'd17;
always @(*) begin
	gtprxinit_drpdi <= 16'd0;
	if (gtprxinit_drpmask) begin
		gtprxinit_drpdi <= (gtprxinit_drpvalue & 16'd63487);
	end else begin
		gtprxinit_drpdi <= gtprxinit_drpvalue;
	end
end
assign gtprxinit_ready_timer_wait = ((~gtprxinit_done) & (~gtprxinit_reset));
assign gtprxinit_reset = (gtprxinit_restart | gtprxinit_ready_timer_done);
assign gtprxinit_pll_reset_timer_done = (gtprxinit_pll_reset_timer_count == 1'd0);
always @(*) begin
	gtprxinit_drpen <= 1'd0;
	gtprxinit_gtrxreset1 <= 1'd0;
	gtprxinit_done <= 1'd0;
	gtprxinit_gtrxpd1 <= 1'd0;
	gtprxinit_drpwe <= 1'd0;
	gtprxinit_rxdlysreset1 <= 1'd0;
	gtprxinit_drp_mux_sel <= 1'd0;
	gtprxinit_cdr_stable_timer_wait <= 1'd0;
	gtprxinit_drpmask <= 1'd0;
	gtprxinit_rxuserrdy1 <= 1'd0;
	gtprxinit_pll_reset_timer_wait <= 1'd0;
	gtprxinit_next_state <= 4'd0;
	gtprxinit_drpvalue_clockdomainsrenamer1_next_value <= 16'd0;
	gtprxinit_drpvalue_clockdomainsrenamer1_next_value_ce <= 1'd0;
	gtprxinit_next_state <= gtprxinit_state;
	case (gtprxinit_state)
		1'd1: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxreset1 <= 1'd1;
			if (gtprxinit_plllock1) begin
				gtprxinit_next_state <= 2'd2;
			end
		end
		2'd2: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxreset1 <= 1'd1;
			gtprxinit_drpen <= 1'd1;
			gtprxinit_next_state <= 2'd3;
		end
		2'd3: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxreset1 <= 1'd1;
			if (gtprxinit_drprdy) begin
				gtprxinit_drpvalue_clockdomainsrenamer1_next_value <= gtprxinit_drpdo;
				gtprxinit_drpvalue_clockdomainsrenamer1_next_value_ce <= 1'd1;
				gtprxinit_next_state <= 3'd4;
			end
		end
		3'd4: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxreset1 <= 1'd1;
			if ((~gtprxinit_drprdy)) begin
				gtprxinit_next_state <= 3'd5;
			end
		end
		3'd5: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxreset1 <= 1'd1;
			gtprxinit_drpmask <= 1'd1;
			gtprxinit_drpen <= 1'd1;
			gtprxinit_drpwe <= 1'd1;
			gtprxinit_next_state <= 3'd6;
		end
		3'd6: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxreset1 <= 1'd1;
			if (gtprxinit_drprdy) begin
				gtprxinit_gtrxreset1 <= 1'd0;
				gtprxinit_next_state <= 3'd7;
			end
		end
		3'd7: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_rxuserrdy1 <= 1'd1;
			if ((gtprxinit_rxpmaresetdone_r & (~gtprxinit_rxpmaresetdone1))) begin
				gtprxinit_next_state <= 4'd8;
			end
		end
		4'd8: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_rxuserrdy1 <= 1'd1;
			gtprxinit_drpen <= 1'd1;
			gtprxinit_drpwe <= 1'd1;
			gtprxinit_next_state <= 4'd9;
		end
		4'd9: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtprxinit_drprdy) begin
				gtprxinit_next_state <= 4'd10;
			end
		end
		4'd10: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_rxuserrdy1 <= 1'd1;
			gtprxinit_cdr_stable_timer_wait <= 1'd1;
			if ((gtprxinit_rxresetdone1 & gtprxinit_cdr_stable_timer_done)) begin
				gtprxinit_next_state <= 4'd11;
			end
		end
		4'd11: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_rxuserrdy1 <= 1'd1;
			gtprxinit_rxdlysreset1 <= 1'd1;
			if (gtprxinit_rxdlysresetdone1) begin
				gtprxinit_next_state <= 4'd12;
			end
		end
		4'd12: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtprxinit_rxsyncdone1) begin
				gtprxinit_next_state <= 4'd13;
			end
		end
		4'd13: begin
			gtprxinit_drp_mux_sel <= 1'd0;
			gtprxinit_rxuserrdy1 <= 1'd1;
			gtprxinit_done <= 1'd1;
			if (gtprxinit_restart) begin
				gtprxinit_next_state <= 1'd0;
			end
		end
		default: begin
			gtprxinit_drp_mux_sel <= 1'd1;
			gtprxinit_gtrxpd1 <= 1'd1;
			gtprxinit_pll_reset_timer_wait <= 1'd1;
			if (gtprxinit_pll_reset_timer_done) begin
				gtprxinit_next_state <= 1'd1;
			end
		end
	endcase
end
assign gtprxinit_ready_timer_done = (gtprxinit_ready_timer_count == 1'd0);
assign gtprxinit_cdr_stable_timer_done = (gtprxinit_cdr_stable_timer_count == 1'd0);
assign produce_rdomain = xilinxmultiregimpl0_regs1;
assign consume_wdomain = xilinxmultiregimpl1_regs1;
assign tx_init_plllock1 = xilinxmultiregimpl2_regs1;
assign tx_init_txresetdone1 = xilinxmultiregimpl3_regs1;
assign tx_init_txdlysresetdone1 = xilinxmultiregimpl4_regs1;
assign tx_init_txphinitdone1 = xilinxmultiregimpl5_regs1;
assign tx_init_txphaligndone1 = xilinxmultiregimpl6_regs1;
assign gtprxinit_rxpmaresetdone1 = xilinxmultiregimpl7_regs1;
assign gtprxinit_plllock1 = xilinxmultiregimpl8_regs1;
assign gtprxinit_rxresetdone1 = xilinxmultiregimpl9_regs1;
assign gtprxinit_rxdlysresetdone1 = xilinxmultiregimpl10_regs1;
assign gtprxinit_rxsyncdone1 = xilinxmultiregimpl11_regs1;

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	tx_init_gttxreset0 <= tx_init_gttxreset1;
	tx_init_txdlysreset0 <= tx_init_txdlysreset1;
	tx_init_txphinit0 <= tx_init_txphinit1;
	tx_init_txphalign0 <= tx_init_txphalign1;
	tx_init_txdlyen0 <= tx_init_txdlyen1;
	tx_init_txuserrdy0 <= tx_init_txuserrdy1;
	tx_init_txphaligndone_r <= tx_init_txphaligndone1;
	if (tx_init_pll_reset_timer_wait) begin
		if ((~tx_init_pll_reset_timer_done)) begin
			tx_init_pll_reset_timer_count <= (tx_init_pll_reset_timer_count - 1'd1);
		end
	end else begin
		tx_init_pll_reset_timer_count <= 6'd32;
	end
	state <= next_state;
	if (tx_init_reset) begin
		state <= 3'd0;
	end
	if (tx_init_ready_timer_wait) begin
		if ((~tx_init_ready_timer_done)) begin
			tx_init_ready_timer_count <= (tx_init_ready_timer_count - 1'd1);
		end
	end else begin
		tx_init_ready_timer_count <= 16'd62500;
	end
	if (sys_rst) begin
		tx_init_gttxreset0 <= 1'd0;
		tx_init_txdlysreset0 <= 1'd0;
		tx_init_txphinit0 <= 1'd0;
		tx_init_txphalign0 <= 1'd0;
		tx_init_txdlyen0 <= 1'd0;
		tx_init_txuserrdy0 <= 1'd0;
		tx_init_pll_reset_timer_count <= 6'd32;
		tx_init_ready_timer_count <= 16'd62500;
		tx_init_txphaligndone_r <= 1'd1;
		state <= 3'd0;
	end
	xilinxmultiregimpl2_regs0 <= tx_init_plllock0;
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
	xilinxmultiregimpl3_regs0 <= tx_init_txresetdone0;
	xilinxmultiregimpl3_regs1 <= xilinxmultiregimpl3_regs0;
	xilinxmultiregimpl4_regs0 <= tx_init_txdlysresetdone0;
	xilinxmultiregimpl4_regs1 <= xilinxmultiregimpl4_regs0;
	xilinxmultiregimpl5_regs0 <= tx_init_txphinitdone0;
	xilinxmultiregimpl5_regs1 <= xilinxmultiregimpl5_regs0;
	xilinxmultiregimpl6_regs0 <= tx_init_txphaligndone0;
	xilinxmultiregimpl6_regs1 <= xilinxmultiregimpl6_regs0;
end

always @(posedge tx_clk) begin
	if ((re1 | (~readable))) begin
		dout <= asyncfifo_dout;
		dtout <= asyncfifo_dtout;
		readable <= asyncfifo_readable;
	end
	graycounter1_q_binary <= graycounter1_q_next_binary;
	graycounter1_q <= graycounter1_q_next;
	if (tx_sop) begin
		tx_data_out <= 6'd60;
		tx_k <= 1'd1;
	end else begin
		if (tx_eop) begin
			tx_data_out <= {tx_o_crc, 8'd220};
			tx_k <= 1'd1;
		end else begin
			if (tx_idle) begin
				tx_data_out <= 8'd188;
				tx_k <= 1'd1;
			end else begin
				tx_data_out <= tx_data_in;
				tx_k <= 1'd0;
			end
		end
	end
	if (tx_i_data_strobe) begin
		tx_crc_cur <= tx_crc_next;
	end
	tx_state <= tx_next_state;
	if (tx_change_disp_clockdomainsrenamer0_next_value_ce0) begin
		tx_change_disp <= tx_change_disp_clockdomainsrenamer0_next_value0;
	end
	if (tx_fifo_re1_clockdomainsrenamer0_next_value_ce1) begin
		tx_fifo_re1 <= tx_fifo_re1_clockdomainsrenamer0_next_value1;
	end
	if (tx_sop_clockdomainsrenamer0_next_value_ce2) begin
		tx_sop <= tx_sop_clockdomainsrenamer0_next_value2;
	end
	if (tx_idle_clockdomainsrenamer0_next_value_ce3) begin
		tx_idle <= tx_idle_clockdomainsrenamer0_next_value3;
	end
	if (tx_encoder_ready_clockdomainsrenamer0_next_value_ce4) begin
		tx_encoder_ready <= tx_encoder_ready_clockdomainsrenamer0_next_value4;
	end
	if (tx_fifo_ready_clockdomainsrenamer0_next_value_ce5) begin
		tx_fifo_ready <= tx_fifo_ready_clockdomainsrenamer0_next_value5;
	end
	if (tx_strobe_crc_clockdomainsrenamer0_next_value_ce6) begin
		tx_strobe_crc <= tx_strobe_crc_clockdomainsrenamer0_next_value6;
	end
	if (tx_eop_clockdomainsrenamer0_next_value_ce7) begin
		tx_eop <= tx_eop_clockdomainsrenamer0_next_value7;
	end
	if (tx_reset1) begin
		tx_sop <= 1'd0;
		tx_eop <= 1'd0;
		tx_idle <= 1'd0;
		tx_fifo_ready <= 1'd0;
		tx_encoder_ready <= 1'd0;
		tx_change_disp <= 1'd0;
		tx_fifo_re1 <= 1'd0;
		tx_strobe_crc <= 1'd0;
		tx_state <= 3'd0;
	end
	gtprxinit_rxpmaresetdone_r <= gtprxinit_rxpmaresetdone1;
	gtprxinit_gtrxreset0 <= gtprxinit_gtrxreset1;
	gtprxinit_gtrxpd0 <= gtprxinit_gtrxpd1;
	gtprxinit_rxdlysreset0 <= gtprxinit_rxdlysreset1;
	gtprxinit_rxphalign0 <= gtprxinit_rxphalign1;
	gtprxinit_rxdlyen0 <= gtprxinit_rxdlyen1;
	gtprxinit_rxuserrdy0 <= gtprxinit_rxuserrdy1;
	if (gtprxinit_pll_reset_timer_wait) begin
		if ((~gtprxinit_pll_reset_timer_done)) begin
			gtprxinit_pll_reset_timer_count <= (gtprxinit_pll_reset_timer_count - 1'd1);
		end
	end else begin
		gtprxinit_pll_reset_timer_count <= 6'd60;
	end
	gtprxinit_state <= gtprxinit_next_state;
	if (gtprxinit_drpvalue_clockdomainsrenamer1_next_value_ce) begin
		gtprxinit_drpvalue <= gtprxinit_drpvalue_clockdomainsrenamer1_next_value;
	end
	if (gtprxinit_reset) begin
		gtprxinit_drpvalue <= 16'd0;
		gtprxinit_state <= 4'd0;
	end
	if (gtprxinit_ready_timer_wait) begin
		if ((~gtprxinit_ready_timer_done)) begin
			gtprxinit_ready_timer_count <= (gtprxinit_ready_timer_count - 1'd1);
		end
	end else begin
		gtprxinit_ready_timer_count <= 19'd480000;
	end
	if (gtprxinit_cdr_stable_timer_wait) begin
		if ((~gtprxinit_cdr_stable_timer_done)) begin
			gtprxinit_cdr_stable_timer_count <= (gtprxinit_cdr_stable_timer_count - 1'd1);
		end
	end else begin
		gtprxinit_cdr_stable_timer_count <= 11'd1024;
	end
	if (tx_rst) begin
		tx_data_out <= 32'd0;
		tx_k <= 1'd0;
		tx_crc_cur <= 20'd1048575;
		tx_sop <= 1'd0;
		tx_eop <= 1'd0;
		tx_idle <= 1'd0;
		tx_fifo_ready <= 1'd0;
		tx_encoder_ready <= 1'd0;
		tx_change_disp <= 1'd0;
		tx_fifo_re1 <= 1'd0;
		tx_strobe_crc <= 1'd0;
		readable <= 1'd0;
		graycounter1_q <= 6'd0;
		graycounter1_q_binary <= 6'd0;
		gtprxinit_gtrxreset0 <= 1'd0;
		gtprxinit_gtrxpd0 <= 1'd0;
		gtprxinit_rxdlysreset0 <= 1'd0;
		gtprxinit_rxphalign0 <= 1'd0;
		gtprxinit_rxdlyen0 <= 1'd0;
		gtprxinit_rxuserrdy0 <= 1'd0;
		gtprxinit_drpvalue <= 16'd0;
		gtprxinit_rxpmaresetdone_r <= 1'd0;
		gtprxinit_pll_reset_timer_count <= 6'd60;
		gtprxinit_ready_timer_count <= 19'd480000;
		gtprxinit_cdr_stable_timer_count <= 11'd1024;
		tx_state <= 3'd0;
		gtprxinit_state <= 4'd0;
	end
	xilinxmultiregimpl0_regs0 <= graycounter0_q;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl7_regs0 <= gtprxinit_rxpmaresetdone0;
	xilinxmultiregimpl7_regs1 <= xilinxmultiregimpl7_regs0;
	xilinxmultiregimpl8_regs0 <= gtprxinit_plllock0;
	xilinxmultiregimpl8_regs1 <= xilinxmultiregimpl8_regs0;
	xilinxmultiregimpl9_regs0 <= gtprxinit_rxresetdone0;
	xilinxmultiregimpl9_regs1 <= xilinxmultiregimpl9_regs0;
	xilinxmultiregimpl10_regs0 <= gtprxinit_rxdlysresetdone0;
	xilinxmultiregimpl10_regs1 <= xilinxmultiregimpl10_regs0;
	xilinxmultiregimpl11_regs0 <= gtprxinit_rxsyncdone0;
	xilinxmultiregimpl11_regs1 <= xilinxmultiregimpl11_regs0;
end

always @(posedge write_clk) begin
	graycounter0_q_binary <= graycounter0_q_next_binary;
	graycounter0_q <= graycounter0_q_next;
	if (write_rst) begin
		graycounter0_q <= 6'd0;
		graycounter0_q_binary <= 6'd0;
	end
	xilinxmultiregimpl1_regs0 <= graycounter1_q;
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
end

IBUFDS_GTE2 IBUFDS_GTE2(
	.CEB(1'd0),
	.I(clk0_clk_p),
	.IB(clk0_clk_n),
	.O(write_clk100)
);

BUFG BUFG(
	.I(write_clk100),
	.O(write_clk_1)
);

BUFG BUFG_1(
	.I(clk62_5),
	.O(sys_clk_1)
);

PLLE2_BASE #(
	.CLKFBOUT_MULT(5'd24),
	.CLKIN1_PERIOD(16.0),
	.CLKOUT0_DIVIDE(3'd5),
	.CLKOUT0_PHASE(0.0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_BASE (
	.CLKFBIN(pll_fb),
	.CLKIN1(sys_clk_1),
	.CLKFBOUT(pll_fb),
	.CLKOUT0(refclk)
);

GTPE2_COMMON #(
	.PLL0_FBDIV(2'd2),
	.PLL0_FBDIV_45(3'd4),
	.PLL0_REFCLK_DIV(1'd1)
) GTPE2_COMMON (
	.BGBYPASSB(1'd1),
	.BGMONITORENB(1'd1),
	.BGPDB(1'd1),
	.BGRCALOVRD(5'd31),
	.GTREFCLK0(refclk),
	.PLL0LOCKEN(1'd1),
	.PLL0PD(1'd0),
	.PLL0REFCLKSEL(1'd1),
	.PLL0RESET(qpll_reset),
	.PLL1PD(1'd1),
	.RCALENB(1'd1),
	.PLL0LOCK(qpll_lock),
	.PLL0OUTCLK(qpll_clk),
	.PLL0OUTREFCLK(qpll_refclk)
);

reg [31:0] storage[0:31];
reg [4:0] memadr;
reg [4:0] memadr_1;
always @(posedge write_clk) begin
	if (wrport_we)
		storage[wrport_adr] <= wrport_dat_w;
	memadr <= wrport_adr;
end

always @(posedge tx_clk) begin
	memadr_1 <= rdport_adr;
end

assign wrport_dat_r = storage[memadr];
assign rdport_dat_r = storage[memadr_1];

reg [1:0] storaget[0:31];
reg [4:0] memadr_2;
reg [4:0] memadr_3;
always @(posedge write_clk) begin
	if (wrport1_we)
		storaget[wrport1_adr] <= wrport1_dat_w;
	memadr_2 <= wrport1_adr;
end

always @(posedge tx_clk) begin
	memadr_3 <= rdport1_adr;
end

assign wrport1_dat_r = storaget[memadr_2];
assign rdport1_dat_r = storaget[memadr_3];

PLLE2_BASE #(
	.CLKFBOUT_MULT(3'd4),
	.CLKIN1_PERIOD(3.33333333),
	.CLKOUT0_DIVIDE(3'd5),
	.CLKOUT0_PHASE(0.0),
	.CLKOUT1_DIVIDE(4'd10),
	.CLKOUT1_PHASE(0.0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_BASE_1 (
	.CLKFBIN(pll_fb2),
	.CLKIN1(txoutclk1),
	.CLKFBOUT(pll_fb2),
	.CLKOUT0(txusrclk1),
	.CLKOUT1(txusrclk21),
	.LOCKED(pll_lock)
);

BUFG BUFG_2(
	.I(txoutclk0),
	.O(txoutclk1)
);

BUFG BUFG_3(
	.I(txusrclk21),
	.O(txusrclk20)
);

BUFG BUFG_4(
	.I(txusrclk1),
	.O(txusrclk0)
);

GTPE2_CHANNEL #(
	.CLK_CORRECT_USE("FALSE"),
	.PD_TRANS_TIME_FROM_P2(6'd60),
	.PD_TRANS_TIME_NONE_P2(6'd60),
	.PD_TRANS_TIME_TO_P2(7'd100),
	.PMA_RSV(10'd819),
	.PMA_RSV2(14'd8256),
	.PMA_RSV3(1'd0),
	.PMA_RSV4(1'd0),
	.RXBUF_EN("FALSE"),
	.RXCDR_CFG(65'd19022712657137635344),
	.RXDLY_CFG(5'd31),
	.RXDLY_LCFG(6'd48),
	.RXLPM_IPCM_CFG(1'd1),
	.RXOUT_DIV(1'd1),
	.RXPHDLY_CFG(20'd540704),
	.RXPH_CFG(24'd12582914),
	.RXPI_CFG1(1'd1),
	.RXPI_CFG2(1'd1),
	.RXPMARESET_TIME(2'd3),
	.RXSYNC_MULTILANE(1'd0),
	.RXSYNC_OVRD(1'd0),
	.RX_BIAS_CFG(12'd3891),
	.RX_CLK25_DIV(3'd5),
	.RX_CM_SEL(1'd1),
	.RX_CM_TRIM(4'd10),
	.RX_DATA_WIDTH(5'd20),
	.RX_OS_CFG(8'd128),
	.RX_XCLK_SEL("RXUSR"),
	.SIM_RESET_SPEEDUP("TRUE"),
	.TXBUF_EN("FALSE"),
	.TXOUT_DIV(1'd1),
	.TXSYNC_MULTILANE(1'd0),
	.TXSYNC_OVRD(1'd1),
	.TXSYNC_SKIP_DA(1'd0),
	.TX_CLK25_DIV(3'd5),
	.TX_DATA_WIDTH(6'd40),
	.TX_XCLK_SEL("TXUSR")
) GTPE2_CHANNEL (
	.DRPADDR(drpaddr),
	.DRPCLK(tx_clk),
	.DRPDI(drpdi),
	.DRPEN(drpen),
	.DRPWE(drpwe),
	.EYESCANRESET(1'd0),
	.GTPRXN(gtp_rx_n),
	.GTPRXP(gtp_rx_p),
	.GTRESETSEL(1'd0),
	.GTRXRESET(gtprxinit_gtrxreset0),
	.GTTXRESET(tx_init_gttxreset0),
	.LOOPBACK(loopback),
	.PLL0CLK(qpll_clk),
	.PLL0REFCLK(qpll_refclk),
	.RESETOVRD(1'd0),
	.RXBUFRESET(1'd0),
	.RXCDRFREQRESET(1'd0),
	.RXCDRRESET(1'd0),
	.RXCOMMADETEN(1'd1),
	.RXDDIEN(1'd1),
	.RXDLYBYPASS(1'd0),
	.RXDLYSRESET(gtprxinit_rxdlysreset0),
	.RXELECIDLEMODE(2'd3),
	.RXLPMRESET(1'd0),
	.RXOOBRESET(1'd0),
	.RXOSINTCFG(2'd2),
	.RXOSINTEN(1'd1),
	.RXOUTCLKSEL(2'd2),
	.RXPCSRESET(1'd0),
	.RXPD({gtprxinit_gtrxpd0, gtprxinit_gtrxpd0}),
	.RXPMARESET(1'd0),
	.RXPOLARITY(rx_polarity),
	.RXRATE(1'd0),
	.RXSYNCALLIN(rxphaligndone),
	.RXSYNCIN(1'd0),
	.RXSYNCMODE(1'd1),
	.RXSYSCLKSEL(1'd0),
	.RXUSERRDY(gtprxinit_rxuserrdy0),
	.RXUSRCLK(rx_clk),
	.RXUSRCLK2(rx_clk),
	.TX8B10BEN(1'd1),
	.TXBUFDIFFCTRL(3'd4),
	.TXCHARDISPMODE(1'd0),
	.TXCHARDISPVAL(1'd0),
	.TXCHARISK(tx_k),
	.TXDATA(tx_data_out),
	.TXDIFFCTRL(diffctrl),
	.TXDLYBYPASS(1'd0),
	.TXDLYEN(tx_init_txdlyen0),
	.TXDLYSRESET(tx_init_txdlysreset0),
	.TXELECIDLE(1'd0),
	.TXINHIBIT(1'd0),
	.TXOUTCLKSEL(2'd3),
	.TXPCSRESET(1'd0),
	.TXPHALIGN(tx_init_txphalign0),
	.TXPHALIGNEN(1'd1),
	.TXPHDLYRESET(1'd0),
	.TXPHINIT(tx_init_txphinit0),
	.TXPMARESET(1'd0),
	.TXPOLARITY(tx_polarity),
	.TXPOSTCURSOR(txpostcursor),
	.TXPRECURSOR(txprecursor),
	.TXRATE(1'd0),
	.TXSYNCALLIN(1'd0),
	.TXSYNCIN(1'd0),
	.TXSYNCMODE(1'd0),
	.TXSYSCLKSEL(1'd0),
	.TXUSERRDY(tx_init_txuserrdy0),
	.TXUSRCLK(txusrclk0),
	.TXUSRCLK2(txusrclk20),
	.DRPDO(drpdo),
	.DRPRDY(drprdy),
	.GTPTXN(gtp_tx_n),
	.GTPTXP(gtp_tx_p),
	.RXDLYSRESETDONE(gtprxinit_rxdlysresetdone0),
	.RXOUTCLK(rxoutclk),
	.RXPHALIGNDONE(rxphaligndone),
	.RXPMARESETDONE(gtprxinit_rxpmaresetdone0),
	.RXRESETDONE(gtprxinit_rxresetdone0),
	.RXSYNCDONE(gtprxinit_rxsyncdone0),
	.TXDLYSRESETDONE(tx_init_txdlysresetdone0),
	.TXOUTCLK(txoutclk0),
	.TXPHALIGNDONE(tx_init_txphaligndone0),
	.TXPHINITDONE(tx_init_txphinitdone0),
	.TXRESETDONE(tx_init_txresetdone0)
);

BUFG BUFG_5(
	.I(txusrclk20),
	.O(tx_clk)
);

BUFG BUFG_6(
	.I(rxoutclk),
	.O(rx_clk)
);

endmodule
