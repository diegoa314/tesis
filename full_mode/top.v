//--------------------------------------------------------------------------------
// Auto-generated by Migen (--------) & LiteX (690de79) on 2020-06-04 20:33:18
//--------------------------------------------------------------------------------
module top(
	input write_clk_p,
	input write_clk_n,
	input gtp_clk_p,
	input gtp_clk_n,
	output gtp_tx_p,
	output gtp_tx_n,
	input gtp_rx_p,
	input gtp_rx_n,
	input din_a1,
	input din_b1,
	input din_c1,
	input din_d1,
	input din_e1,
	input din_f1,
	input din_g1,
	input din_h1,
	input din_a2,
	input din_b2,
	input din_c2,
	input din_d2,
	input din_e2,
	input din_f2,
	input din_g2,
	input din_h2,
	input din_a3,
	input din_b3,
	input din_c3,
	input din_d3,
	input din_e3,
	input din_f3,
	input din_g3,
	input din_h3,
	input din_a4,
	input din_b4,
	input din_c4,
	input din_d4,
	input din_e4,
	input din_f4,
	input din_g4,
	input din_h4,
	input dtin_a,
	input dtin_b,
	input we,
	input link_ready
);

wire write_clk_1;
wire write_clk_bufg;
wire write_clk;
reg write_rst = 1'd0;
wire gtp_clk_bufg;
wire gtp_clk;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
wire qpll_clk;
wire qpll_refclk;
wire qpll_reset;
wire qpll_lock;
reg gtp_tx_polarity = 1'd0;
reg gtp_rx_polarity = 1'd0;
reg [2:0] gtp_loopback = 3'd0;
reg [4:0] gtp_txprecursor = 5'd0;
reg [4:0] gtp_txpostcursor = 5'd0;
reg [3:0] gtp_diffctrl = 4'd0;
wire [8:0] gtp_drpaddr;
wire gtp_drpen;
wire [15:0] gtp_drpdi;
wire gtp_drprdy;
wire [15:0] gtp_drpdo;
wire gtp_drpwe;
wire [39:0] gtp_tx_data;
wire gtp_tx_init_done0;
reg gtp_tx_init_done1 = 1'd0;
reg gtp_tx_init_restart = 1'd0;
wire gtp_tx_init_plllock0;
reg gtp_tx_init_pllreset = 1'd0;
reg gtp_tx_init_gttxreset0 = 1'd0;
wire gtp_tx_init_txresetdone0;
reg gtp_tx_init_txdlysreset0 = 1'd0;
wire gtp_tx_init_txdlysresetdone0;
reg gtp_tx_init_txphinit0 = 1'd0;
wire gtp_tx_init_txphinitdone0;
reg gtp_tx_init_txphalign0 = 1'd0;
wire gtp_tx_init_txphaligndone0;
reg gtp_tx_init_txdlyen0 = 1'd0;
reg gtp_tx_init_txuserrdy0 = 1'd0;
wire gtp_tx_init_plllock1;
wire gtp_tx_init_txresetdone1;
wire gtp_tx_init_txdlysresetdone1;
wire gtp_tx_init_txphinitdone1;
wire gtp_tx_init_txphaligndone1;
reg gtp_tx_init_gttxreset1 = 1'd0;
reg gtp_tx_init_txdlysreset1 = 1'd0;
reg gtp_tx_init_txphinit1 = 1'd0;
reg gtp_tx_init_txphalign1 = 1'd0;
reg gtp_tx_init_txdlyen1 = 1'd0;
reg gtp_tx_init_txuserrdy1 = 1'd0;
reg gtp_tx_init_pll_reset_timer_wait = 1'd0;
wire gtp_tx_init_pll_reset_timer_done;
reg [6:0] gtp_tx_init_pll_reset_timer_count = 7'd120;
wire gtp_tx_init_reset;
wire gtp_tx_init_ready_timer_wait;
wire gtp_tx_init_ready_timer_done;
reg [17:0] gtp_tx_init_ready_timer_count = 18'd240000;
reg gtp_tx_init_txphaligndone_r = 1'd1;
wire gtp_tx_init_txphaligndone_rising;
reg gtp_gtprxinit_done = 1'd0;
reg gtp_gtprxinit_restart = 1'd0;
wire gtp_gtprxinit_plllock0;
reg gtp_gtprxinit_gtrxreset0 = 1'd0;
reg gtp_gtprxinit_gtrxpd0 = 1'd0;
wire gtp_gtprxinit_rxresetdone0;
reg gtp_gtprxinit_rxdlysreset0 = 1'd0;
wire gtp_gtprxinit_rxdlysresetdone0;
reg gtp_gtprxinit_rxphalign0 = 1'd0;
reg gtp_gtprxinit_rxdlyen0 = 1'd0;
reg gtp_gtprxinit_rxuserrdy0 = 1'd0;
wire gtp_gtprxinit_rxsyncdone0;
wire gtp_gtprxinit_rxpmaresetdone0;
wire [8:0] gtp_gtprxinit_drpaddr;
reg gtp_gtprxinit_drpen = 1'd0;
reg [15:0] gtp_gtprxinit_drpdi = 16'd0;
wire gtp_gtprxinit_drprdy;
wire [15:0] gtp_gtprxinit_drpdo;
reg gtp_gtprxinit_drpwe = 1'd0;
reg gtp_gtprxinit_drp_mux_sel = 1'd0;
reg [15:0] gtp_gtprxinit_drpvalue = 16'd0;
reg gtp_gtprxinit_drpmask = 1'd0;
wire gtp_gtprxinit_rxpmaresetdone1;
reg gtp_gtprxinit_rxpmaresetdone_r = 1'd0;
wire gtp_gtprxinit_plllock1;
wire gtp_gtprxinit_rxresetdone1;
wire gtp_gtprxinit_rxdlysresetdone1;
wire gtp_gtprxinit_rxsyncdone1;
reg gtp_gtprxinit_gtrxreset1 = 1'd0;
reg gtp_gtprxinit_gtrxpd1 = 1'd0;
reg gtp_gtprxinit_rxdlysreset1 = 1'd0;
reg gtp_gtprxinit_rxphalign1 = 1'd0;
reg gtp_gtprxinit_rxdlyen1 = 1'd0;
reg gtp_gtprxinit_rxuserrdy1 = 1'd0;
reg gtp_gtprxinit_pll_reset_timer_wait = 1'd0;
wire gtp_gtprxinit_pll_reset_timer_done;
reg [5:0] gtp_gtprxinit_pll_reset_timer_count = 6'd60;
wire gtp_gtprxinit_reset;
wire gtp_gtprxinit_ready_timer_wait;
wire gtp_gtprxinit_ready_timer_done;
reg [18:0] gtp_gtprxinit_ready_timer_count = 19'd480000;
reg gtp_gtprxinit_cdr_stable_timer_wait = 1'd0;
wire gtp_gtprxinit_cdr_stable_timer_done;
reg [10:0] gtp_gtprxinit_cdr_stable_timer_count = 11'd1024;
wire gtp_txoutclk0;
wire gtp_rxoutclk;
wire gtp_txusrclk0;
wire gtp_txusrclk20;
wire gtp_txusrclk1;
wire gtp_txusrclk21;
wire gtp_txoutclk1;
wire gtp_pll_fb2;
wire gtp_pll_lock;
wire gtp_rxphaligndone;
wire tx_clk;
reg tx_rst = 1'd0;
wire rx_clk;
wire tx_link_ready;
reg [31:0] tx_data_in = 32'd0;
reg [1:0] tx_data_type_in = 2'd0;
reg [39:0] tx_data_out = 40'd0;
wire tx_fifo_empty;
wire tx_fifo_re;
wire tx_tx_init_done;
wire tx_pll_lock;
reg tx_reset = 1'd0;
reg [7:0] tx_d0 = 8'd0;
reg [7:0] tx_d1 = 8'd0;
reg [7:0] tx_d2 = 8'd0;
reg [7:0] tx_d3 = 8'd0;
reg tx_k0 = 1'd0;
reg tx_k1 = 1'd0;
reg tx_k2 = 1'd0;
reg tx_k3 = 1'd0;
reg [9:0] tx_output0 = 10'd0;
reg [9:0] tx_output1 = 10'd0;
reg [9:0] tx_output2 = 10'd0;
reg [9:0] tx_output3 = 10'd0;
reg tx_disparity0 = 1'd0;
reg tx_disparity1 = 1'd0;
reg tx_disparity2 = 1'd0;
reg tx_disparity3 = 1'd0;
wire [7:0] tx_singleencoder0_d;
wire tx_singleencoder0_k;
reg tx_singleencoder0_disp_in = 1'd0;
wire [9:0] tx_singleencoder0_output;
reg tx_singleencoder0_disp_out = 1'd0;
reg [5:0] tx_singleencoder0_code6b = 6'd0;
reg tx_singleencoder0_code6b_unbalanced = 1'd0;
reg tx_singleencoder0_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder0_code4b = 4'd0;
reg tx_singleencoder0_code4b_unbalanced = 1'd0;
reg tx_singleencoder0_code4b_flip = 1'd0;
reg tx_singleencoder0_alt7_rd0 = 1'd0;
reg tx_singleencoder0_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder0_output_6b = 6'd0;
wire tx_singleencoder0_disp_inter;
reg [3:0] tx_singleencoder0_output_4b = 4'd0;
wire [9:0] tx_singleencoder0_output_msb_first;
wire [7:0] tx_singleencoder1_d;
wire tx_singleencoder1_k;
wire tx_singleencoder1_disp_in;
wire [9:0] tx_singleencoder1_output;
reg tx_singleencoder1_disp_out = 1'd0;
reg [5:0] tx_singleencoder1_code6b = 6'd0;
reg tx_singleencoder1_code6b_unbalanced = 1'd0;
reg tx_singleencoder1_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder1_code4b = 4'd0;
reg tx_singleencoder1_code4b_unbalanced = 1'd0;
reg tx_singleencoder1_code4b_flip = 1'd0;
reg tx_singleencoder1_alt7_rd0 = 1'd0;
reg tx_singleencoder1_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder1_output_6b = 6'd0;
wire tx_singleencoder1_disp_inter;
reg [3:0] tx_singleencoder1_output_4b = 4'd0;
wire [9:0] tx_singleencoder1_output_msb_first;
wire [7:0] tx_singleencoder2_d;
wire tx_singleencoder2_k;
wire tx_singleencoder2_disp_in;
wire [9:0] tx_singleencoder2_output;
reg tx_singleencoder2_disp_out = 1'd0;
reg [5:0] tx_singleencoder2_code6b = 6'd0;
reg tx_singleencoder2_code6b_unbalanced = 1'd0;
reg tx_singleencoder2_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder2_code4b = 4'd0;
reg tx_singleencoder2_code4b_unbalanced = 1'd0;
reg tx_singleencoder2_code4b_flip = 1'd0;
reg tx_singleencoder2_alt7_rd0 = 1'd0;
reg tx_singleencoder2_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder2_output_6b = 6'd0;
wire tx_singleencoder2_disp_inter;
reg [3:0] tx_singleencoder2_output_4b = 4'd0;
wire [9:0] tx_singleencoder2_output_msb_first;
wire [7:0] tx_singleencoder3_d;
wire tx_singleencoder3_k;
wire tx_singleencoder3_disp_in;
wire [9:0] tx_singleencoder3_output;
reg tx_singleencoder3_disp_out = 1'd0;
reg [5:0] tx_singleencoder3_code6b = 6'd0;
reg tx_singleencoder3_code6b_unbalanced = 1'd0;
reg tx_singleencoder3_code6b_flip = 1'd0;
reg [3:0] tx_singleencoder3_code4b = 4'd0;
reg tx_singleencoder3_code4b_unbalanced = 1'd0;
reg tx_singleencoder3_code4b_flip = 1'd0;
reg tx_singleencoder3_alt7_rd0 = 1'd0;
reg tx_singleencoder3_alt7_rd1 = 1'd0;
reg [5:0] tx_singleencoder3_output_6b = 6'd0;
wire tx_singleencoder3_disp_inter;
reg [3:0] tx_singleencoder3_output_4b = 4'd0;
wire [9:0] tx_singleencoder3_output_msb_first;
reg [31:0] tx_crc_encoder_i_data_payload = 32'd0;
wire tx_crc_encoder_i_data_strobe;
wire tx_crc_encoder_reset;
wire [19:0] tx_crc_encoder_o_crc;
wire [31:0] tx_crc_encoder_crc_dat;
reg [19:0] tx_crc_encoder_crc_cur = 20'd1048575;
reg [19:0] tx_crc_encoder_crc_next = 20'd597792;
wire tx_fsm_link_ready;
wire tx_fsm_fifo_empty;
wire [1:0] tx_fsm_data_type;
reg tx_fsm_sop = 1'd0;
reg tx_fsm_eop = 1'd0;
reg tx_fsm_idle = 1'd0;
reg tx_fsm_fifo_ready = 1'd0;
reg tx_fsm_encoder_ready = 1'd0;
reg tx_fsm_change_disp = 1'd0;
reg tx_fsm_fifo_re = 1'd0;
reg tx_fsm_strobe_crc = 1'd0;
wire tx_fsm_reset0;
wire tx_fsm_system_ready;
reg tx_fsm_reset_crc = 1'd0;
reg [1:0] tx_fsm_counter_idle = 2'd0;
wire tx_fsm_reset1;
wire asyncfifo_we;
wire asyncfifo_writable;
wire asyncfifo_re;
wire asyncfifo_readable;
wire [31:0] asyncfifo_din;
wire [31:0] asyncfifo_dout;
wire [1:0] asyncfifo_dtin;
wire [1:0] asyncfifo_dtout;
wire graycounter0_ce;
(* dont_touch = "true" *) reg [5:0] graycounter0_q = 6'd0;
wire [5:0] graycounter0_q_next;
reg [5:0] graycounter0_q_binary = 6'd0;
reg [5:0] graycounter0_q_next_binary = 6'd0;
wire graycounter1_ce;
(* dont_touch = "true" *) reg [5:0] graycounter1_q = 6'd0;
wire [5:0] graycounter1_q_next;
reg [5:0] graycounter1_q_binary = 6'd0;
reg [5:0] graycounter1_q_next_binary = 6'd0;
wire [5:0] produce_rdomain;
wire [5:0] consume_wdomain;
wire [4:0] wrport_adr;
wire [31:0] wrport_dat_r;
wire wrport_we;
wire [31:0] wrport_dat_w;
wire [4:0] rdport_adr;
wire [31:0] rdport_dat_r;
wire [4:0] wrport1_adr;
wire [1:0] wrport1_dat_r;
wire wrport1_we;
wire [1:0] wrport1_dat_w;
wire [4:0] rdport1_adr;
wire [1:0] rdport1_dat_r;
reg [2:0] gtptxinit_state = 3'd0;
reg [2:0] gtptxinit_next_state = 3'd0;
reg [3:0] clockdomainsrenamer_state = 4'd0;
reg [3:0] clockdomainsrenamer_next_state = 4'd0;
reg [15:0] gtp_gtprxinit_drpvalue_gtp_next_value = 16'd0;
reg gtp_gtprxinit_drpvalue_gtp_next_value_ce = 1'd0;
reg [2:0] state = 3'd0;
reg [2:0] next_state = 3'd0;
reg tx_fsm_fifo_re_clockdomainsrenamer_next_value0 = 1'd0;
reg tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 = 1'd0;
reg tx_fsm_sop_clockdomainsrenamer_next_value1 = 1'd0;
reg tx_fsm_sop_clockdomainsrenamer_next_value_ce1 = 1'd0;
reg tx_fsm_idle_clockdomainsrenamer_next_value2 = 1'd0;
reg tx_fsm_idle_clockdomainsrenamer_next_value_ce2 = 1'd0;
reg tx_fsm_change_disp_clockdomainsrenamer_next_value3 = 1'd0;
reg tx_fsm_change_disp_clockdomainsrenamer_next_value_ce3 = 1'd0;
reg [1:0] tx_fsm_counter_idle_clockdomainsrenamer_next_value4 = 2'd0;
reg tx_fsm_counter_idle_clockdomainsrenamer_next_value_ce4 = 1'd0;
reg tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 = 1'd0;
reg tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 = 1'd0;
reg tx_fsm_fifo_ready_clockdomainsrenamer_next_value6 = 1'd0;
reg tx_fsm_fifo_ready_clockdomainsrenamer_next_value_ce6 = 1'd0;
reg tx_fsm_strobe_crc_clockdomainsrenamer_next_value7 = 1'd0;
reg tx_fsm_strobe_crc_clockdomainsrenamer_next_value_ce7 = 1'd0;
reg tx_fsm_eop_clockdomainsrenamer_next_value8 = 1'd0;
reg tx_fsm_eop_clockdomainsrenamer_next_value_ce8 = 1'd0;
reg tx_fsm_reset_crc_clockdomainsrenamer_next_value9 = 1'd0;
reg tx_fsm_reset_crc_clockdomainsrenamer_next_value_ce9 = 1'd0;
reg [5:0] f_array_muxed0 = 6'd0;
reg f_array_muxed1 = 1'd0;
reg f_array_muxed2 = 1'd0;
reg [3:0] rhs_array_muxed0 = 4'd0;
reg rhs_array_muxed1 = 1'd0;
reg f_array_muxed3 = 1'd0;
reg [5:0] f_array_muxed4 = 6'd0;
reg f_array_muxed5 = 1'd0;
reg f_array_muxed6 = 1'd0;
reg [3:0] rhs_array_muxed2 = 4'd0;
reg rhs_array_muxed3 = 1'd0;
reg f_array_muxed7 = 1'd0;
reg [5:0] f_array_muxed8 = 6'd0;
reg f_array_muxed9 = 1'd0;
reg f_array_muxed10 = 1'd0;
reg [3:0] rhs_array_muxed4 = 4'd0;
reg rhs_array_muxed5 = 1'd0;
reg f_array_muxed11 = 1'd0;
reg [5:0] f_array_muxed12 = 6'd0;
reg f_array_muxed13 = 1'd0;
reg f_array_muxed14 = 1'd0;
reg [3:0] rhs_array_muxed6 = 4'd0;
reg rhs_array_muxed7 = 1'd0;
reg f_array_muxed15 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl1_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl1_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl2_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl2_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl3_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl3_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl4_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl4_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl5_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl5_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl6_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl6_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl7_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl7_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl8_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl8_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl9_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl9_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl10_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl10_regs1 = 6'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl11_regs0 = 6'd0;
(* async_reg = "true", dont_touch = "true" *) reg [5:0] xilinxmultiregimpl11_regs1 = 6'd0;

assign write_clk = write_clk_1;
assign asyncfifo_din = {din_h4, din_g4, din_f4, din_e4, din_d4, din_c4, din_b4, din_a4, din_h3, din_g3, din_f3, din_e3, din_d3, din_c3, din_b3, din_a3, din_h2, din_g2, din_f2, din_e2, din_d2, din_c2, din_b2, din_a2, din_h1, din_g1, din_f1, din_e1, din_d1, din_c1, din_b1, din_a1};
assign asyncfifo_dtin = {dtin_b, dtin_a};
assign asyncfifo_we = we;
assign asyncfifo_re = tx_fifo_re;
assign tx_link_ready = link_ready;
assign tx_fifo_empty = (~asyncfifo_readable);
assign tx_tx_init_done = gtp_tx_init_done0;
assign tx_pll_lock = gtp_pll_lock;
always @(*) begin
	tx_data_type_in <= 2'd0;
	tx_data_in <= 32'd0;
	if ((link_ready & asyncfifo_readable)) begin
		tx_data_type_in <= asyncfifo_dtout;
		tx_data_in <= asyncfifo_dout;
	end
end
assign gtp_tx_data = tx_data_out;
assign sys_clk = gtp_clk;
assign por_clk = gtp_clk;
assign sys_rst = int_rst;
assign gtp_tx_init_plllock0 = qpll_lock;
assign gtp_gtprxinit_plllock0 = qpll_lock;
assign qpll_reset = gtp_tx_init_pllreset;
assign gtp_tx_init_done0 = gtp_tx_init_done1;
assign gtp_drpaddr = gtp_gtprxinit_drpaddr;
assign gtp_drpdi = gtp_gtprxinit_drpdi;
assign gtp_gtprxinit_drpdo = gtp_drpdo;
assign gtp_drpen = gtp_gtprxinit_drpen;
assign gtp_drpwe = gtp_gtprxinit_drpwe;
assign gtp_gtprxinit_drprdy = gtp_drprdy;
assign gtp_tx_init_ready_timer_wait = ((~gtp_tx_init_done1) & (~gtp_tx_init_reset));
assign gtp_tx_init_reset = (gtp_tx_init_restart | gtp_tx_init_ready_timer_done);
assign gtp_tx_init_txphaligndone_rising = (gtp_tx_init_txphaligndone1 & (~gtp_tx_init_txphaligndone_r));
assign gtp_tx_init_pll_reset_timer_done = (gtp_tx_init_pll_reset_timer_count == 1'd0);
always @(*) begin
	gtp_tx_init_gttxreset1 <= 1'd0;
	gtp_tx_init_txdlysreset1 <= 1'd0;
	gtp_tx_init_txphinit1 <= 1'd0;
	gtp_tx_init_txphalign1 <= 1'd0;
	gtp_tx_init_txdlyen1 <= 1'd0;
	gtp_tx_init_txuserrdy1 <= 1'd0;
	gtp_tx_init_pll_reset_timer_wait <= 1'd0;
	gtptxinit_next_state <= 3'd0;
	gtp_tx_init_done1 <= 1'd0;
	gtp_tx_init_pllreset <= 1'd0;
	gtptxinit_next_state <= gtptxinit_state;
	case (gtptxinit_state)
		1'd1: begin
			gtp_tx_init_gttxreset1 <= 1'd1;
			if (gtp_tx_init_plllock1) begin
				gtptxinit_next_state <= 2'd2;
			end
		end
		2'd2: begin
			gtp_tx_init_gttxreset1 <= 1'd0;
			gtp_tx_init_txuserrdy1 <= 1'd1;
			if (gtp_tx_init_txresetdone1) begin
				gtptxinit_next_state <= 2'd3;
			end
		end
		2'd3: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txdlysreset1 <= 1'd1;
			if (gtp_tx_init_txdlysresetdone1) begin
				gtptxinit_next_state <= 3'd4;
			end
		end
		3'd4: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txphinit1 <= 1'd1;
			if (gtp_tx_init_txphinitdone1) begin
				gtptxinit_next_state <= 3'd5;
			end
		end
		3'd5: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txphalign1 <= 1'd1;
			if (gtp_tx_init_txphaligndone_rising) begin
				gtptxinit_next_state <= 3'd6;
			end
		end
		3'd6: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_txdlyen1 <= 1'd1;
			if (gtp_tx_init_txphaligndone_rising) begin
				gtptxinit_next_state <= 3'd7;
			end
		end
		3'd7: begin
			gtp_tx_init_txuserrdy1 <= 1'd1;
			gtp_tx_init_done1 <= 1'd1;
			if (gtp_tx_init_restart) begin
				gtptxinit_next_state <= 1'd0;
			end
		end
		default: begin
			gtp_tx_init_pll_reset_timer_wait <= 1'd1;
			if (gtp_tx_init_pll_reset_timer_done) begin
				gtp_tx_init_pllreset <= 1'd1;
				gtptxinit_next_state <= 1'd1;
			end
		end
	endcase
end
assign gtp_tx_init_ready_timer_done = (gtp_tx_init_ready_timer_count == 1'd0);
assign gtp_gtprxinit_drpaddr = 5'd17;
always @(*) begin
	gtp_gtprxinit_drpdi <= 16'd0;
	if (gtp_gtprxinit_drpmask) begin
		gtp_gtprxinit_drpdi <= (gtp_gtprxinit_drpvalue & 16'd63487);
	end else begin
		gtp_gtprxinit_drpdi <= gtp_gtprxinit_drpvalue;
	end
end
assign gtp_gtprxinit_ready_timer_wait = ((~gtp_gtprxinit_done) & (~gtp_gtprxinit_reset));
assign gtp_gtprxinit_reset = (gtp_gtprxinit_restart | gtp_gtprxinit_ready_timer_done);
assign gtp_gtprxinit_pll_reset_timer_done = (gtp_gtprxinit_pll_reset_timer_count == 1'd0);
always @(*) begin
	gtp_gtprxinit_gtrxreset1 <= 1'd0;
	gtp_gtprxinit_done <= 1'd0;
	gtp_gtprxinit_gtrxpd1 <= 1'd0;
	gtp_gtprxinit_drpwe <= 1'd0;
	gtp_gtprxinit_rxdlysreset1 <= 1'd0;
	gtp_gtprxinit_drp_mux_sel <= 1'd0;
	clockdomainsrenamer_next_state <= 4'd0;
	gtp_gtprxinit_cdr_stable_timer_wait <= 1'd0;
	gtp_gtprxinit_drpmask <= 1'd0;
	gtp_gtprxinit_rxuserrdy1 <= 1'd0;
	gtp_gtprxinit_pll_reset_timer_wait <= 1'd0;
	gtp_gtprxinit_drpvalue_gtp_next_value <= 16'd0;
	gtp_gtprxinit_drpvalue_gtp_next_value_ce <= 1'd0;
	gtp_gtprxinit_drpen <= 1'd0;
	clockdomainsrenamer_next_state <= clockdomainsrenamer_state;
	case (clockdomainsrenamer_state)
		1'd1: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if (gtp_gtprxinit_plllock1) begin
				clockdomainsrenamer_next_state <= 2'd2;
			end
		end
		2'd2: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			gtp_gtprxinit_drpen <= 1'd1;
			clockdomainsrenamer_next_state <= 2'd3;
		end
		2'd3: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if (gtp_gtprxinit_drprdy) begin
				gtp_gtprxinit_drpvalue_gtp_next_value <= gtp_gtprxinit_drpdo;
				gtp_gtprxinit_drpvalue_gtp_next_value_ce <= 1'd1;
				clockdomainsrenamer_next_state <= 3'd4;
			end
		end
		3'd4: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if ((~gtp_gtprxinit_drprdy)) begin
				clockdomainsrenamer_next_state <= 3'd5;
			end
		end
		3'd5: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			gtp_gtprxinit_drpmask <= 1'd1;
			gtp_gtprxinit_drpen <= 1'd1;
			gtp_gtprxinit_drpwe <= 1'd1;
			clockdomainsrenamer_next_state <= 3'd6;
		end
		3'd6: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxreset1 <= 1'd1;
			if (gtp_gtprxinit_drprdy) begin
				gtp_gtprxinit_gtrxreset1 <= 1'd0;
				clockdomainsrenamer_next_state <= 3'd7;
			end
		end
		3'd7: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if ((gtp_gtprxinit_rxpmaresetdone_r & (~gtp_gtprxinit_rxpmaresetdone1))) begin
				clockdomainsrenamer_next_state <= 4'd8;
			end
		end
		4'd8: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_drpen <= 1'd1;
			gtp_gtprxinit_drpwe <= 1'd1;
			clockdomainsrenamer_next_state <= 4'd9;
		end
		4'd9: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtp_gtprxinit_drprdy) begin
				clockdomainsrenamer_next_state <= 4'd10;
			end
		end
		4'd10: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_cdr_stable_timer_wait <= 1'd1;
			if ((gtp_gtprxinit_rxresetdone1 & gtp_gtprxinit_cdr_stable_timer_done)) begin
				clockdomainsrenamer_next_state <= 4'd11;
			end
		end
		4'd11: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_rxdlysreset1 <= 1'd1;
			if (gtp_gtprxinit_rxdlysresetdone1) begin
				clockdomainsrenamer_next_state <= 4'd12;
			end
		end
		4'd12: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			if (gtp_gtprxinit_rxsyncdone1) begin
				clockdomainsrenamer_next_state <= 4'd13;
			end
		end
		4'd13: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd0;
			gtp_gtprxinit_rxuserrdy1 <= 1'd1;
			gtp_gtprxinit_done <= 1'd1;
			if (gtp_gtprxinit_restart) begin
				clockdomainsrenamer_next_state <= 1'd0;
			end
		end
		default: begin
			gtp_gtprxinit_drp_mux_sel <= 1'd1;
			gtp_gtprxinit_gtrxpd1 <= 1'd1;
			gtp_gtprxinit_pll_reset_timer_wait <= 1'd1;
			if (gtp_gtprxinit_pll_reset_timer_done) begin
				clockdomainsrenamer_next_state <= 1'd1;
			end
		end
	endcase
end
assign gtp_gtprxinit_ready_timer_done = (gtp_gtprxinit_ready_timer_count == 1'd0);
assign gtp_gtprxinit_cdr_stable_timer_done = (gtp_gtprxinit_cdr_stable_timer_count == 1'd0);
assign graycounter0_ce = (asyncfifo_writable & asyncfifo_we);
assign graycounter1_ce = (asyncfifo_readable & asyncfifo_re);
assign asyncfifo_writable = (((graycounter0_q[5] == consume_wdomain[5]) | (graycounter0_q[4] == consume_wdomain[4])) | (graycounter0_q[3:0] != consume_wdomain[3:0]));
assign asyncfifo_readable = (graycounter1_q != produce_rdomain);
assign wrport_adr = graycounter0_q_binary[4:0];
assign wrport_dat_w = asyncfifo_din;
assign wrport_we = graycounter0_ce;
assign rdport_adr = graycounter1_q_next_binary[4:0];
assign asyncfifo_dout = rdport_dat_r;
assign wrport1_adr = graycounter0_q_binary[4:0];
assign wrport1_dat_w = asyncfifo_dtin;
assign wrport1_we = graycounter0_ce;
assign rdport1_adr = graycounter1_q_next_binary[4:0];
assign asyncfifo_dtout = rdport1_dat_r;
always @(*) begin
	graycounter0_q_next_binary <= 6'd0;
	if (graycounter0_ce) begin
		graycounter0_q_next_binary <= (graycounter0_q_binary + 1'd1);
	end else begin
		graycounter0_q_next_binary <= graycounter0_q_binary;
	end
end
assign graycounter0_q_next = (graycounter0_q_next_binary ^ graycounter0_q_next_binary[5:1]);
always @(*) begin
	graycounter1_q_next_binary <= 6'd0;
	if (graycounter1_ce) begin
		graycounter1_q_next_binary <= (graycounter1_q_binary + 1'd1);
	end else begin
		graycounter1_q_next_binary <= graycounter1_q_binary;
	end
end
assign graycounter1_q_next = (graycounter1_q_next_binary ^ graycounter1_q_next_binary[5:1]);
assign tx_fsm_link_ready = tx_link_ready;
assign tx_fsm_fifo_empty = tx_fifo_empty;
assign tx_fsm_data_type = tx_data_type_in;
assign tx_fsm_reset0 = tx_reset;
assign tx_fsm_system_ready = (tx_tx_init_done & tx_pll_lock);
assign tx_fifo_re = tx_fsm_fifo_re;
assign tx_crc_encoder_i_data_strobe = tx_fsm_strobe_crc;
assign tx_crc_encoder_reset = tx_fsm_reset_crc;
always @(*) begin
	tx_crc_encoder_i_data_payload <= 32'd0;
	if (tx_fsm_encoder_ready) begin
		tx_crc_encoder_i_data_payload <= tx_data_in;
	end
end
always @(*) begin
	tx_data_out <= 40'd0;
	if (tx_fsm_encoder_ready) begin
		tx_data_out <= {tx_output3, tx_output2, tx_output1, tx_output0};
	end else begin
		tx_data_out <= 1'd0;
	end
end
assign tx_singleencoder1_disp_in = tx_singleencoder0_disp_out;
assign tx_singleencoder2_disp_in = tx_singleencoder1_disp_out;
assign tx_singleencoder3_disp_in = tx_singleencoder2_disp_out;
assign tx_singleencoder0_d = tx_d0;
assign tx_singleencoder0_k = tx_k0;
assign tx_singleencoder1_d = tx_d1;
assign tx_singleencoder1_k = tx_k1;
assign tx_singleencoder2_d = tx_d2;
assign tx_singleencoder2_k = tx_k2;
assign tx_singleencoder3_d = tx_d3;
assign tx_singleencoder3_k = tx_k3;
assign tx_singleencoder0_disp_inter = (tx_singleencoder0_disp_in ^ tx_singleencoder0_code6b_unbalanced);
always @(*) begin
	tx_singleencoder0_output_6b <= 6'd0;
	if (((~tx_singleencoder0_disp_in) & tx_singleencoder0_code6b_flip)) begin
		tx_singleencoder0_output_6b <= (~tx_singleencoder0_code6b);
	end else begin
		tx_singleencoder0_output_6b <= tx_singleencoder0_code6b;
	end
end
always @(*) begin
	tx_singleencoder0_disp_out <= 1'd0;
	tx_singleencoder0_output_4b <= 4'd0;
	if (((~tx_singleencoder0_disp_inter) & tx_singleencoder0_alt7_rd0)) begin
		tx_singleencoder0_disp_out <= (~tx_singleencoder0_disp_inter);
		tx_singleencoder0_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder0_disp_inter & tx_singleencoder0_alt7_rd1)) begin
			tx_singleencoder0_disp_out <= (~tx_singleencoder0_disp_inter);
			tx_singleencoder0_output_4b <= 4'd8;
		end else begin
			tx_singleencoder0_disp_out <= (tx_singleencoder0_disp_inter ^ tx_singleencoder0_code4b_unbalanced);
			if (((~tx_singleencoder0_disp_inter) & tx_singleencoder0_code4b_flip)) begin
				tx_singleencoder0_output_4b <= (~tx_singleencoder0_code4b);
			end else begin
				tx_singleencoder0_output_4b <= tx_singleencoder0_code4b;
			end
		end
	end
end
assign tx_singleencoder0_output_msb_first = {tx_singleencoder0_output_6b, tx_singleencoder0_output_4b};
assign tx_singleencoder0_output = tx_singleencoder0_output_msb_first;
assign tx_singleencoder1_disp_inter = (tx_singleencoder1_disp_in ^ tx_singleencoder1_code6b_unbalanced);
always @(*) begin
	tx_singleencoder1_output_6b <= 6'd0;
	if (((~tx_singleencoder1_disp_in) & tx_singleencoder1_code6b_flip)) begin
		tx_singleencoder1_output_6b <= (~tx_singleencoder1_code6b);
	end else begin
		tx_singleencoder1_output_6b <= tx_singleencoder1_code6b;
	end
end
always @(*) begin
	tx_singleencoder1_output_4b <= 4'd0;
	tx_singleencoder1_disp_out <= 1'd0;
	if (((~tx_singleencoder1_disp_inter) & tx_singleencoder1_alt7_rd0)) begin
		tx_singleencoder1_disp_out <= (~tx_singleencoder1_disp_inter);
		tx_singleencoder1_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder1_disp_inter & tx_singleencoder1_alt7_rd1)) begin
			tx_singleencoder1_disp_out <= (~tx_singleencoder1_disp_inter);
			tx_singleencoder1_output_4b <= 4'd8;
		end else begin
			tx_singleencoder1_disp_out <= (tx_singleencoder1_disp_inter ^ tx_singleencoder1_code4b_unbalanced);
			if (((~tx_singleencoder1_disp_inter) & tx_singleencoder1_code4b_flip)) begin
				tx_singleencoder1_output_4b <= (~tx_singleencoder1_code4b);
			end else begin
				tx_singleencoder1_output_4b <= tx_singleencoder1_code4b;
			end
		end
	end
end
assign tx_singleencoder1_output_msb_first = {tx_singleencoder1_output_6b, tx_singleencoder1_output_4b};
assign tx_singleencoder1_output = tx_singleencoder1_output_msb_first;
assign tx_singleencoder2_disp_inter = (tx_singleencoder2_disp_in ^ tx_singleencoder2_code6b_unbalanced);
always @(*) begin
	tx_singleencoder2_output_6b <= 6'd0;
	if (((~tx_singleencoder2_disp_in) & tx_singleencoder2_code6b_flip)) begin
		tx_singleencoder2_output_6b <= (~tx_singleencoder2_code6b);
	end else begin
		tx_singleencoder2_output_6b <= tx_singleencoder2_code6b;
	end
end
always @(*) begin
	tx_singleencoder2_disp_out <= 1'd0;
	tx_singleencoder2_output_4b <= 4'd0;
	if (((~tx_singleencoder2_disp_inter) & tx_singleencoder2_alt7_rd0)) begin
		tx_singleencoder2_disp_out <= (~tx_singleencoder2_disp_inter);
		tx_singleencoder2_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder2_disp_inter & tx_singleencoder2_alt7_rd1)) begin
			tx_singleencoder2_disp_out <= (~tx_singleencoder2_disp_inter);
			tx_singleencoder2_output_4b <= 4'd8;
		end else begin
			tx_singleencoder2_disp_out <= (tx_singleencoder2_disp_inter ^ tx_singleencoder2_code4b_unbalanced);
			if (((~tx_singleencoder2_disp_inter) & tx_singleencoder2_code4b_flip)) begin
				tx_singleencoder2_output_4b <= (~tx_singleencoder2_code4b);
			end else begin
				tx_singleencoder2_output_4b <= tx_singleencoder2_code4b;
			end
		end
	end
end
assign tx_singleencoder2_output_msb_first = {tx_singleencoder2_output_6b, tx_singleencoder2_output_4b};
assign tx_singleencoder2_output = tx_singleencoder2_output_msb_first;
assign tx_singleencoder3_disp_inter = (tx_singleencoder3_disp_in ^ tx_singleencoder3_code6b_unbalanced);
always @(*) begin
	tx_singleencoder3_output_6b <= 6'd0;
	if (((~tx_singleencoder3_disp_in) & tx_singleencoder3_code6b_flip)) begin
		tx_singleencoder3_output_6b <= (~tx_singleencoder3_code6b);
	end else begin
		tx_singleencoder3_output_6b <= tx_singleencoder3_code6b;
	end
end
always @(*) begin
	tx_singleencoder3_disp_out <= 1'd0;
	tx_singleencoder3_output_4b <= 4'd0;
	if (((~tx_singleencoder3_disp_inter) & tx_singleencoder3_alt7_rd0)) begin
		tx_singleencoder3_disp_out <= (~tx_singleencoder3_disp_inter);
		tx_singleencoder3_output_4b <= 3'd7;
	end else begin
		if ((tx_singleencoder3_disp_inter & tx_singleencoder3_alt7_rd1)) begin
			tx_singleencoder3_disp_out <= (~tx_singleencoder3_disp_inter);
			tx_singleencoder3_output_4b <= 4'd8;
		end else begin
			tx_singleencoder3_disp_out <= (tx_singleencoder3_disp_inter ^ tx_singleencoder3_code4b_unbalanced);
			if (((~tx_singleencoder3_disp_inter) & tx_singleencoder3_code4b_flip)) begin
				tx_singleencoder3_output_4b <= (~tx_singleencoder3_code4b);
			end else begin
				tx_singleencoder3_output_4b <= tx_singleencoder3_code4b;
			end
		end
	end
end
assign tx_singleencoder3_output_msb_first = {tx_singleencoder3_output_6b, tx_singleencoder3_output_4b};
assign tx_singleencoder3_output = tx_singleencoder3_output_msb_first;
assign tx_crc_encoder_crc_dat = tx_crc_encoder_i_data_payload;
assign tx_crc_encoder_o_crc = tx_crc_encoder_crc_cur;
always @(*) begin
	tx_crc_encoder_crc_next <= 20'd597792;
	tx_crc_encoder_crc_next[0] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[15]);
	tx_crc_encoder_crc_next[1] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[16]);
	tx_crc_encoder_crc_next[2] <= (((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[3] <= (((((((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[4] <= (((((((((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[18]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[5] <= (((((((((((((((((((((tx_crc_encoder_crc_dat[14] ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[6] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[7] <= (((((((((((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[8] <= (((((((((((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[15]);
	tx_crc_encoder_crc_next[9] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[16]);
	tx_crc_encoder_crc_next[10] <= (((((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[11] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[12] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[13] <= (((((((((((((((tx_crc_encoder_crc_dat[13] ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[17]);
	tx_crc_encoder_crc_next[14] <= (((((((((((((((tx_crc_encoder_crc_dat[14] ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[27]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[15]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[15] <= (((((((((((((((tx_crc_encoder_crc_dat[15] ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[28]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[16]) ^ tx_crc_encoder_crc_cur[18]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[16] <= (((((((((((((tx_crc_encoder_crc_dat[16] ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[20]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[29]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[8]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[17]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[17] <= (((((((((((tx_crc_encoder_crc_dat[17] ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[21]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[30]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[9]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[18]);
	tx_crc_encoder_crc_next[18] <= (((((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[13]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[16]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[22]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[25]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_dat[31]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[1]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[4]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[10]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[13]) ^ tx_crc_encoder_crc_cur[14]) ^ tx_crc_encoder_crc_cur[19]);
	tx_crc_encoder_crc_next[19] <= (((((((((((((((((tx_crc_encoder_crc_dat[12] ^ tx_crc_encoder_crc_dat[14]) ^ tx_crc_encoder_crc_dat[15]) ^ tx_crc_encoder_crc_dat[17]) ^ tx_crc_encoder_crc_dat[18]) ^ tx_crc_encoder_crc_dat[19]) ^ tx_crc_encoder_crc_dat[23]) ^ tx_crc_encoder_crc_dat[24]) ^ tx_crc_encoder_crc_dat[26]) ^ tx_crc_encoder_crc_cur[0]) ^ tx_crc_encoder_crc_cur[2]) ^ tx_crc_encoder_crc_cur[3]) ^ tx_crc_encoder_crc_cur[5]) ^ tx_crc_encoder_crc_cur[6]) ^ tx_crc_encoder_crc_cur[7]) ^ tx_crc_encoder_crc_cur[11]) ^ tx_crc_encoder_crc_cur[12]) ^ tx_crc_encoder_crc_cur[14]);
end
assign tx_fsm_reset1 = tx_fsm_reset0;
always @(*) begin
	tx_fsm_reset_crc_clockdomainsrenamer_next_value9 <= 1'd0;
	tx_fsm_reset_crc_clockdomainsrenamer_next_value_ce9 <= 1'd0;
	next_state <= 3'd0;
	tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd0;
	tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd0;
	tx_fsm_fifo_ready_clockdomainsrenamer_next_value6 <= 1'd0;
	tx_fsm_sop_clockdomainsrenamer_next_value1 <= 1'd0;
	tx_fsm_fifo_ready_clockdomainsrenamer_next_value_ce6 <= 1'd0;
	tx_fsm_sop_clockdomainsrenamer_next_value_ce1 <= 1'd0;
	tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd0;
	tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd0;
	tx_fsm_strobe_crc_clockdomainsrenamer_next_value7 <= 1'd0;
	tx_fsm_strobe_crc_clockdomainsrenamer_next_value_ce7 <= 1'd0;
	tx_fsm_change_disp_clockdomainsrenamer_next_value3 <= 1'd0;
	tx_fsm_change_disp_clockdomainsrenamer_next_value_ce3 <= 1'd0;
	tx_fsm_counter_idle_clockdomainsrenamer_next_value4 <= 2'd0;
	tx_fsm_counter_idle_clockdomainsrenamer_next_value_ce4 <= 1'd0;
	tx_fsm_eop_clockdomainsrenamer_next_value8 <= 1'd0;
	tx_fsm_eop_clockdomainsrenamer_next_value_ce8 <= 1'd0;
	tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 <= 1'd0;
	tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			if (tx_fsm_link_ready) begin
				if (tx_fsm_fifo_empty) begin
					tx_fsm_counter_idle_clockdomainsrenamer_next_value4 <= (tx_fsm_counter_idle + 1'd1);
					tx_fsm_counter_idle_clockdomainsrenamer_next_value_ce4 <= 1'd1;
					if ((tx_fsm_counter_idle == 2'd2)) begin
						next_state <= 2'd2;
						tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 <= 1'd1;
						tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 <= 1'd1;
					end else begin
						next_state <= 1'd1;
					end
				end else begin
					next_state <= 2'd3;
					tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd1;
					tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd1;
					tx_fsm_sop_clockdomainsrenamer_next_value1 <= 1'd1;
					tx_fsm_sop_clockdomainsrenamer_next_value_ce1 <= 1'd1;
					tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd0;
					tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
				end
			end else begin
				next_state <= 1'd0;
				tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 <= 1'd0;
				tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 <= 1'd1;
				tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd0;
				tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
			end
		end
		2'd2: begin
			if (tx_fsm_link_ready) begin
				if (tx_fsm_fifo_empty) begin
					next_state <= 2'd2;
				end else begin
					next_state <= 2'd3;
					tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd1;
					tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd1;
					tx_fsm_sop_clockdomainsrenamer_next_value1 <= 1'd1;
					tx_fsm_sop_clockdomainsrenamer_next_value_ce1 <= 1'd1;
					tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd0;
					tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
				end
			end else begin
				next_state <= 1'd0;
				tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 <= 1'd0;
				tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 <= 1'd1;
				tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd0;
				tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
			end
		end
		2'd3: begin
			next_state <= 3'd4;
			tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 <= 1'd1;
			tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 <= 1'd1;
			tx_fsm_fifo_ready_clockdomainsrenamer_next_value6 <= 1'd1;
			tx_fsm_fifo_ready_clockdomainsrenamer_next_value_ce6 <= 1'd1;
			tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd1;
			tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd1;
			tx_fsm_sop_clockdomainsrenamer_next_value1 <= 1'd0;
			tx_fsm_sop_clockdomainsrenamer_next_value_ce1 <= 1'd1;
			tx_fsm_strobe_crc_clockdomainsrenamer_next_value7 <= 1'd1;
			tx_fsm_strobe_crc_clockdomainsrenamer_next_value_ce7 <= 1'd1;
		end
		3'd4: begin
			tx_fsm_encoder_ready_clockdomainsrenamer_next_value5 <= 1'd1;
			tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5 <= 1'd1;
			tx_fsm_fifo_ready_clockdomainsrenamer_next_value6 <= 1'd1;
			tx_fsm_fifo_ready_clockdomainsrenamer_next_value_ce6 <= 1'd1;
			tx_fsm_strobe_crc_clockdomainsrenamer_next_value7 <= 1'd1;
			tx_fsm_strobe_crc_clockdomainsrenamer_next_value_ce7 <= 1'd1;
			if (tx_fsm_fifo_empty) begin
				next_state <= 1'd0;
			end else begin
				tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd1;
				tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd1;
			end
			if ((tx_fsm_data_type == 2'd2)) begin
				tx_fsm_eop_clockdomainsrenamer_next_value8 <= 1'd1;
				tx_fsm_eop_clockdomainsrenamer_next_value_ce8 <= 1'd1;
				tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd0;
				tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd1;
				next_state <= 3'd5;
				tx_fsm_strobe_crc_clockdomainsrenamer_next_value7 <= 1'd0;
				tx_fsm_strobe_crc_clockdomainsrenamer_next_value_ce7 <= 1'd1;
				tx_fsm_reset_crc_clockdomainsrenamer_next_value9 <= 1'd1;
				tx_fsm_reset_crc_clockdomainsrenamer_next_value_ce9 <= 1'd1;
			end
		end
		3'd5: begin
			next_state <= 3'd6;
			tx_fsm_eop_clockdomainsrenamer_next_value8 <= 1'd0;
			tx_fsm_eop_clockdomainsrenamer_next_value_ce8 <= 1'd1;
			tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd1;
			tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
			tx_fsm_reset_crc_clockdomainsrenamer_next_value9 <= 1'd0;
			tx_fsm_reset_crc_clockdomainsrenamer_next_value_ce9 <= 1'd1;
		end
		3'd6: begin
			tx_fsm_fifo_ready_clockdomainsrenamer_next_value6 <= 1'd0;
			tx_fsm_fifo_ready_clockdomainsrenamer_next_value_ce6 <= 1'd1;
			next_state <= 3'd7;
		end
		3'd7: begin
			next_state <= 2'd2;
		end
		default: begin
			if ((tx_fsm_link_ready & tx_fsm_system_ready)) begin
				if ((~tx_fsm_fifo_empty)) begin
					next_state <= 2'd3;
					tx_fsm_fifo_re_clockdomainsrenamer_next_value0 <= 1'd1;
					tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0 <= 1'd1;
					tx_fsm_sop_clockdomainsrenamer_next_value1 <= 1'd1;
					tx_fsm_sop_clockdomainsrenamer_next_value_ce1 <= 1'd1;
					tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd0;
					tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
				end else begin
					next_state <= 1'd1;
					tx_fsm_idle_clockdomainsrenamer_next_value2 <= 1'd1;
					tx_fsm_idle_clockdomainsrenamer_next_value_ce2 <= 1'd1;
				end
				tx_fsm_change_disp_clockdomainsrenamer_next_value3 <= 1'd1;
				tx_fsm_change_disp_clockdomainsrenamer_next_value_ce3 <= 1'd1;
			end else begin
				next_state <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	f_array_muxed0 <= 6'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			f_array_muxed0 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed0 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed0 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed0 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed0 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed0 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed0 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed0 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed0 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed0 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed0 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed0 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed0 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed0 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed0 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed0 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed0 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed0 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed0 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed0 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed0 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed0 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed0 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed0 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed0 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed0 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed0 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed0 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed0 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed0 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed0 <= 6'd33;
		end
		default: begin
			f_array_muxed0 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed1 <= 1'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			f_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed1 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed1 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed1 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed1 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed1 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed1 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed1 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed1 <= 1'd1;
		end
		default: begin
			f_array_muxed1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed2 <= 1'd0;
	case (tx_singleencoder0_d[4:0])
		1'd0: begin
			f_array_muxed2 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed2 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed2 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed2 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed2 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed2 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed2 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed2 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed2 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed2 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed2 <= 1'd1;
		end
		default: begin
			f_array_muxed2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed0 <= 4'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed0 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed0 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed0 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed0 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed0 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed0 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed0 <= 3'd6;
		end
		default: begin
			rhs_array_muxed0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed1 <= 1'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			rhs_array_muxed1 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed1 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed1 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed1 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed1 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed1 <= 1'd0;
		end
		default: begin
			rhs_array_muxed1 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed3 <= 1'd0;
	case (tx_singleencoder0_d[7:5])
		1'd0: begin
			f_array_muxed3 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed3 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed3 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed3 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed3 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed3 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed3 <= 1'd0;
		end
		default: begin
			f_array_muxed3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed4 <= 6'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			f_array_muxed4 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed4 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed4 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed4 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed4 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed4 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed4 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed4 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed4 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed4 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed4 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed4 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed4 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed4 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed4 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed4 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed4 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed4 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed4 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed4 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed4 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed4 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed4 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed4 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed4 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed4 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed4 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed4 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed4 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed4 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed4 <= 6'd33;
		end
		default: begin
			f_array_muxed4 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed5 <= 1'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			f_array_muxed5 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed5 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed5 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed5 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed5 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed5 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed5 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed5 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed5 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed5 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed5 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed5 <= 1'd1;
		end
		default: begin
			f_array_muxed5 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed6 <= 1'd0;
	case (tx_singleencoder1_d[4:0])
		1'd0: begin
			f_array_muxed6 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed6 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed6 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed6 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed6 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed6 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed6 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed6 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed6 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed6 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed6 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed6 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed6 <= 1'd1;
		end
		default: begin
			f_array_muxed6 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed2 <= 4'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed2 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed2 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed2 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed2 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed2 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed2 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed2 <= 3'd6;
		end
		default: begin
			rhs_array_muxed2 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed3 <= 1'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			rhs_array_muxed3 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed3 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed3 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed3 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed3 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed3 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed3 <= 1'd0;
		end
		default: begin
			rhs_array_muxed3 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed7 <= 1'd0;
	case (tx_singleencoder1_d[7:5])
		1'd0: begin
			f_array_muxed7 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed7 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed7 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed7 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed7 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed7 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed7 <= 1'd0;
		end
		default: begin
			f_array_muxed7 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed8 <= 6'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			f_array_muxed8 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed8 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed8 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed8 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed8 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed8 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed8 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed8 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed8 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed8 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed8 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed8 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed8 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed8 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed8 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed8 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed8 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed8 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed8 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed8 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed8 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed8 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed8 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed8 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed8 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed8 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed8 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed8 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed8 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed8 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed8 <= 6'd33;
		end
		default: begin
			f_array_muxed8 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed9 <= 1'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			f_array_muxed9 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed9 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed9 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed9 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed9 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed9 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed9 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed9 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed9 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed9 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed9 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed9 <= 1'd1;
		end
		default: begin
			f_array_muxed9 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed10 <= 1'd0;
	case (tx_singleencoder2_d[4:0])
		1'd0: begin
			f_array_muxed10 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed10 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed10 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed10 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed10 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed10 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed10 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed10 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed10 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed10 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed10 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed10 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed10 <= 1'd1;
		end
		default: begin
			f_array_muxed10 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed4 <= 4'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed4 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed4 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed4 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed4 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed4 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed4 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed4 <= 3'd6;
		end
		default: begin
			rhs_array_muxed4 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed5 <= 1'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			rhs_array_muxed5 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed5 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed5 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed5 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed5 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed5 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed5 <= 1'd0;
		end
		default: begin
			rhs_array_muxed5 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed11 <= 1'd0;
	case (tx_singleencoder2_d[7:5])
		1'd0: begin
			f_array_muxed11 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed11 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed11 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed11 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed11 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed11 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed11 <= 1'd0;
		end
		default: begin
			f_array_muxed11 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed12 <= 6'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			f_array_muxed12 <= 5'd24;
		end
		1'd1: begin
			f_array_muxed12 <= 6'd34;
		end
		2'd2: begin
			f_array_muxed12 <= 5'd18;
		end
		2'd3: begin
			f_array_muxed12 <= 6'd49;
		end
		3'd4: begin
			f_array_muxed12 <= 4'd10;
		end
		3'd5: begin
			f_array_muxed12 <= 6'd41;
		end
		3'd6: begin
			f_array_muxed12 <= 5'd25;
		end
		3'd7: begin
			f_array_muxed12 <= 3'd7;
		end
		4'd8: begin
			f_array_muxed12 <= 3'd6;
		end
		4'd9: begin
			f_array_muxed12 <= 6'd37;
		end
		4'd10: begin
			f_array_muxed12 <= 5'd21;
		end
		4'd11: begin
			f_array_muxed12 <= 6'd52;
		end
		4'd12: begin
			f_array_muxed12 <= 4'd13;
		end
		4'd13: begin
			f_array_muxed12 <= 6'd44;
		end
		4'd14: begin
			f_array_muxed12 <= 5'd28;
		end
		4'd15: begin
			f_array_muxed12 <= 6'd40;
		end
		5'd16: begin
			f_array_muxed12 <= 6'd36;
		end
		5'd17: begin
			f_array_muxed12 <= 6'd35;
		end
		5'd18: begin
			f_array_muxed12 <= 5'd19;
		end
		5'd19: begin
			f_array_muxed12 <= 6'd50;
		end
		5'd20: begin
			f_array_muxed12 <= 4'd11;
		end
		5'd21: begin
			f_array_muxed12 <= 6'd42;
		end
		5'd22: begin
			f_array_muxed12 <= 5'd26;
		end
		5'd23: begin
			f_array_muxed12 <= 3'd5;
		end
		5'd24: begin
			f_array_muxed12 <= 4'd12;
		end
		5'd25: begin
			f_array_muxed12 <= 6'd38;
		end
		5'd26: begin
			f_array_muxed12 <= 5'd22;
		end
		5'd27: begin
			f_array_muxed12 <= 4'd9;
		end
		5'd28: begin
			f_array_muxed12 <= 4'd14;
		end
		5'd29: begin
			f_array_muxed12 <= 5'd17;
		end
		5'd30: begin
			f_array_muxed12 <= 6'd33;
		end
		default: begin
			f_array_muxed12 <= 5'd20;
		end
	endcase
end
always @(*) begin
	f_array_muxed13 <= 1'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			f_array_muxed13 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed13 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed13 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed13 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed13 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed13 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed13 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd8: begin
			f_array_muxed13 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed13 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed13 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed13 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed13 <= 1'd1;
		end
		default: begin
			f_array_muxed13 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed14 <= 1'd0;
	case (tx_singleencoder3_d[4:0])
		1'd0: begin
			f_array_muxed14 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed14 <= 1'd1;
		end
		2'd2: begin
			f_array_muxed14 <= 1'd1;
		end
		2'd3: begin
			f_array_muxed14 <= 1'd0;
		end
		3'd4: begin
			f_array_muxed14 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed14 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed14 <= 1'd0;
		end
		3'd7: begin
			f_array_muxed14 <= 1'd1;
		end
		4'd8: begin
			f_array_muxed14 <= 1'd1;
		end
		4'd9: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd10: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd11: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd12: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd13: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd14: begin
			f_array_muxed14 <= 1'd0;
		end
		4'd15: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd16: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd17: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd18: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd19: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd20: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd21: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd22: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd23: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd24: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd25: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd26: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd27: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd28: begin
			f_array_muxed14 <= 1'd0;
		end
		5'd29: begin
			f_array_muxed14 <= 1'd1;
		end
		5'd30: begin
			f_array_muxed14 <= 1'd1;
		end
		default: begin
			f_array_muxed14 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed6 <= 4'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed6 <= 3'd4;
		end
		1'd1: begin
			rhs_array_muxed6 <= 4'd9;
		end
		2'd2: begin
			rhs_array_muxed6 <= 3'd5;
		end
		2'd3: begin
			rhs_array_muxed6 <= 2'd3;
		end
		3'd4: begin
			rhs_array_muxed6 <= 2'd2;
		end
		3'd5: begin
			rhs_array_muxed6 <= 4'd10;
		end
		3'd6: begin
			rhs_array_muxed6 <= 3'd6;
		end
		default: begin
			rhs_array_muxed6 <= 1'd1;
		end
	endcase
end
always @(*) begin
	rhs_array_muxed7 <= 1'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			rhs_array_muxed7 <= 1'd1;
		end
		1'd1: begin
			rhs_array_muxed7 <= 1'd0;
		end
		2'd2: begin
			rhs_array_muxed7 <= 1'd0;
		end
		2'd3: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd4: begin
			rhs_array_muxed7 <= 1'd1;
		end
		3'd5: begin
			rhs_array_muxed7 <= 1'd0;
		end
		3'd6: begin
			rhs_array_muxed7 <= 1'd0;
		end
		default: begin
			rhs_array_muxed7 <= 1'd1;
		end
	endcase
end
always @(*) begin
	f_array_muxed15 <= 1'd0;
	case (tx_singleencoder3_d[7:5])
		1'd0: begin
			f_array_muxed15 <= 1'd1;
		end
		1'd1: begin
			f_array_muxed15 <= 1'd0;
		end
		2'd2: begin
			f_array_muxed15 <= 1'd0;
		end
		2'd3: begin
			f_array_muxed15 <= 1'd1;
		end
		3'd4: begin
			f_array_muxed15 <= 1'd1;
		end
		3'd5: begin
			f_array_muxed15 <= 1'd0;
		end
		3'd6: begin
			f_array_muxed15 <= 1'd0;
		end
		default: begin
			f_array_muxed15 <= 1'd1;
		end
	endcase
end
assign gtp_tx_init_plllock1 = xilinxmultiregimpl0_regs1;
assign gtp_tx_init_txresetdone1 = xilinxmultiregimpl1_regs1;
assign gtp_tx_init_txdlysresetdone1 = xilinxmultiregimpl2_regs1;
assign gtp_tx_init_txphinitdone1 = xilinxmultiregimpl3_regs1;
assign gtp_tx_init_txphaligndone1 = xilinxmultiregimpl4_regs1;
assign gtp_gtprxinit_rxpmaresetdone1 = xilinxmultiregimpl5_regs1;
assign gtp_gtprxinit_plllock1 = xilinxmultiregimpl6_regs1;
assign gtp_gtprxinit_rxresetdone1 = xilinxmultiregimpl7_regs1;
assign gtp_gtprxinit_rxdlysresetdone1 = xilinxmultiregimpl8_regs1;
assign gtp_gtprxinit_rxsyncdone1 = xilinxmultiregimpl9_regs1;
assign produce_rdomain = xilinxmultiregimpl10_regs1;
assign consume_wdomain = xilinxmultiregimpl11_regs1;

always @(posedge por_clk) begin
	int_rst <= 1'd0;
end

always @(posedge sys_clk) begin
	gtp_tx_init_gttxreset0 <= gtp_tx_init_gttxreset1;
	gtp_tx_init_txdlysreset0 <= gtp_tx_init_txdlysreset1;
	gtp_tx_init_txphinit0 <= gtp_tx_init_txphinit1;
	gtp_tx_init_txphalign0 <= gtp_tx_init_txphalign1;
	gtp_tx_init_txdlyen0 <= gtp_tx_init_txdlyen1;
	gtp_tx_init_txuserrdy0 <= gtp_tx_init_txuserrdy1;
	gtp_tx_init_txphaligndone_r <= gtp_tx_init_txphaligndone1;
	if (gtp_tx_init_pll_reset_timer_wait) begin
		if ((~gtp_tx_init_pll_reset_timer_done)) begin
			gtp_tx_init_pll_reset_timer_count <= (gtp_tx_init_pll_reset_timer_count - 1'd1);
		end
	end else begin
		gtp_tx_init_pll_reset_timer_count <= 7'd120;
	end
	gtptxinit_state <= gtptxinit_next_state;
	if (gtp_tx_init_reset) begin
		gtptxinit_state <= 3'd0;
	end
	if (gtp_tx_init_ready_timer_wait) begin
		if ((~gtp_tx_init_ready_timer_done)) begin
			gtp_tx_init_ready_timer_count <= (gtp_tx_init_ready_timer_count - 1'd1);
		end
	end else begin
		gtp_tx_init_ready_timer_count <= 18'd240000;
	end
	if (sys_rst) begin
		gtp_tx_init_gttxreset0 <= 1'd0;
		gtp_tx_init_txdlysreset0 <= 1'd0;
		gtp_tx_init_txphinit0 <= 1'd0;
		gtp_tx_init_txphalign0 <= 1'd0;
		gtp_tx_init_txdlyen0 <= 1'd0;
		gtp_tx_init_txuserrdy0 <= 1'd0;
		gtp_tx_init_pll_reset_timer_count <= 7'd120;
		gtp_tx_init_ready_timer_count <= 18'd240000;
		gtp_tx_init_txphaligndone_r <= 1'd1;
		gtptxinit_state <= 3'd0;
	end
	xilinxmultiregimpl0_regs0 <= gtp_tx_init_plllock0;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= gtp_tx_init_txresetdone0;
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= gtp_tx_init_txdlysresetdone0;
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
	xilinxmultiregimpl3_regs0 <= gtp_tx_init_txphinitdone0;
	xilinxmultiregimpl3_regs1 <= xilinxmultiregimpl3_regs0;
	xilinxmultiregimpl4_regs0 <= gtp_tx_init_txphaligndone0;
	xilinxmultiregimpl4_regs1 <= xilinxmultiregimpl4_regs0;
end

always @(posedge tx_clk) begin
	gtp_gtprxinit_rxpmaresetdone_r <= gtp_gtprxinit_rxpmaresetdone1;
	gtp_gtprxinit_gtrxreset0 <= gtp_gtprxinit_gtrxreset1;
	gtp_gtprxinit_gtrxpd0 <= gtp_gtprxinit_gtrxpd1;
	gtp_gtprxinit_rxdlysreset0 <= gtp_gtprxinit_rxdlysreset1;
	gtp_gtprxinit_rxphalign0 <= gtp_gtprxinit_rxphalign1;
	gtp_gtprxinit_rxdlyen0 <= gtp_gtprxinit_rxdlyen1;
	gtp_gtprxinit_rxuserrdy0 <= gtp_gtprxinit_rxuserrdy1;
	if (gtp_gtprxinit_pll_reset_timer_wait) begin
		if ((~gtp_gtprxinit_pll_reset_timer_done)) begin
			gtp_gtprxinit_pll_reset_timer_count <= (gtp_gtprxinit_pll_reset_timer_count - 1'd1);
		end
	end else begin
		gtp_gtprxinit_pll_reset_timer_count <= 6'd60;
	end
	clockdomainsrenamer_state <= clockdomainsrenamer_next_state;
	if (gtp_gtprxinit_drpvalue_gtp_next_value_ce) begin
		gtp_gtprxinit_drpvalue <= gtp_gtprxinit_drpvalue_gtp_next_value;
	end
	if (gtp_gtprxinit_reset) begin
		gtp_gtprxinit_drpvalue <= 16'd0;
		clockdomainsrenamer_state <= 4'd0;
	end
	if (gtp_gtprxinit_ready_timer_wait) begin
		if ((~gtp_gtprxinit_ready_timer_done)) begin
			gtp_gtprxinit_ready_timer_count <= (gtp_gtprxinit_ready_timer_count - 1'd1);
		end
	end else begin
		gtp_gtprxinit_ready_timer_count <= 19'd480000;
	end
	if (gtp_gtprxinit_cdr_stable_timer_wait) begin
		if ((~gtp_gtprxinit_cdr_stable_timer_done)) begin
			gtp_gtprxinit_cdr_stable_timer_count <= (gtp_gtprxinit_cdr_stable_timer_count - 1'd1);
		end
	end else begin
		gtp_gtprxinit_cdr_stable_timer_count <= 11'd1024;
	end
	graycounter1_q_binary <= graycounter1_q_next_binary;
	graycounter1_q <= graycounter1_q_next;
	if (tx_fsm_fifo_ready) begin
		tx_d0 <= tx_data_in[7:0];
		tx_d1 <= tx_data_in[15:8];
		tx_d2 <= tx_data_in[23:16];
		tx_d3 <= tx_data_in[31:24];
	end
	if (tx_fsm_sop) begin
		tx_d0 <= 6'd60;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_fsm_idle) begin
		tx_d0 <= 8'd188;
		tx_k0 <= 1'd1;
		tx_d1 <= 1'd0;
		tx_d2 <= 1'd0;
		tx_d3 <= 1'd0;
	end
	if (tx_fsm_eop) begin
		tx_d0 <= 8'd220;
		tx_k0 <= 1'd1;
		tx_d1 <= tx_crc_encoder_o_crc[7:0];
		tx_d2 <= tx_crc_encoder_o_crc[15:8];
		tx_d3 <= tx_crc_encoder_o_crc[19:16];
	end
	tx_k1 <= 1'd0;
	tx_k2 <= 1'd0;
	tx_k3 <= 1'd0;
	tx_singleencoder0_disp_in <= tx_singleencoder3_disp_out;
	tx_output0 <= tx_singleencoder0_output;
	tx_disparity0 <= tx_singleencoder0_disp_out;
	tx_output1 <= tx_singleencoder1_output;
	tx_disparity1 <= tx_singleencoder1_disp_out;
	tx_output2 <= tx_singleencoder2_output;
	tx_disparity2 <= tx_singleencoder2_disp_out;
	tx_output3 <= tx_singleencoder3_output;
	tx_disparity3 <= tx_singleencoder3_disp_out;
	if ((tx_singleencoder0_k & (tx_singleencoder0_d[4:0] == 5'd28))) begin
		tx_singleencoder0_code6b <= 6'd48;
		tx_singleencoder0_code6b_unbalanced <= 1'd1;
		tx_singleencoder0_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder0_code6b <= f_array_muxed0;
		tx_singleencoder0_code6b_unbalanced <= f_array_muxed1;
		tx_singleencoder0_code6b_flip <= f_array_muxed2;
	end
	tx_singleencoder0_code4b <= rhs_array_muxed0;
	tx_singleencoder0_code4b_unbalanced <= rhs_array_muxed1;
	if (tx_singleencoder0_k) begin
		tx_singleencoder0_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder0_code4b_flip <= f_array_muxed3;
	end
	tx_singleencoder0_alt7_rd0 <= 1'd0;
	tx_singleencoder0_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder0_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder0_d[4:0] == 5'd17) | (tx_singleencoder0_d[4:0] == 5'd18)) | (tx_singleencoder0_d[4:0] == 5'd20))) begin
			tx_singleencoder0_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder0_d[4:0] == 4'd11) | (tx_singleencoder0_d[4:0] == 4'd13)) | (tx_singleencoder0_d[4:0] == 4'd14))) begin
			tx_singleencoder0_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder0_k) begin
			tx_singleencoder0_alt7_rd0 <= 1'd1;
			tx_singleencoder0_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder1_k & (tx_singleencoder1_d[4:0] == 5'd28))) begin
		tx_singleencoder1_code6b <= 6'd48;
		tx_singleencoder1_code6b_unbalanced <= 1'd1;
		tx_singleencoder1_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder1_code6b <= f_array_muxed4;
		tx_singleencoder1_code6b_unbalanced <= f_array_muxed5;
		tx_singleencoder1_code6b_flip <= f_array_muxed6;
	end
	tx_singleencoder1_code4b <= rhs_array_muxed2;
	tx_singleencoder1_code4b_unbalanced <= rhs_array_muxed3;
	if (tx_singleencoder1_k) begin
		tx_singleencoder1_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder1_code4b_flip <= f_array_muxed7;
	end
	tx_singleencoder1_alt7_rd0 <= 1'd0;
	tx_singleencoder1_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder1_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder1_d[4:0] == 5'd17) | (tx_singleencoder1_d[4:0] == 5'd18)) | (tx_singleencoder1_d[4:0] == 5'd20))) begin
			tx_singleencoder1_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder1_d[4:0] == 4'd11) | (tx_singleencoder1_d[4:0] == 4'd13)) | (tx_singleencoder1_d[4:0] == 4'd14))) begin
			tx_singleencoder1_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder1_k) begin
			tx_singleencoder1_alt7_rd0 <= 1'd1;
			tx_singleencoder1_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder2_k & (tx_singleencoder2_d[4:0] == 5'd28))) begin
		tx_singleencoder2_code6b <= 6'd48;
		tx_singleencoder2_code6b_unbalanced <= 1'd1;
		tx_singleencoder2_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder2_code6b <= f_array_muxed8;
		tx_singleencoder2_code6b_unbalanced <= f_array_muxed9;
		tx_singleencoder2_code6b_flip <= f_array_muxed10;
	end
	tx_singleencoder2_code4b <= rhs_array_muxed4;
	tx_singleencoder2_code4b_unbalanced <= rhs_array_muxed5;
	if (tx_singleencoder2_k) begin
		tx_singleencoder2_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder2_code4b_flip <= f_array_muxed11;
	end
	tx_singleencoder2_alt7_rd0 <= 1'd0;
	tx_singleencoder2_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder2_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder2_d[4:0] == 5'd17) | (tx_singleencoder2_d[4:0] == 5'd18)) | (tx_singleencoder2_d[4:0] == 5'd20))) begin
			tx_singleencoder2_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder2_d[4:0] == 4'd11) | (tx_singleencoder2_d[4:0] == 4'd13)) | (tx_singleencoder2_d[4:0] == 4'd14))) begin
			tx_singleencoder2_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder2_k) begin
			tx_singleencoder2_alt7_rd0 <= 1'd1;
			tx_singleencoder2_alt7_rd1 <= 1'd1;
		end
	end
	if ((tx_singleencoder3_k & (tx_singleencoder3_d[4:0] == 5'd28))) begin
		tx_singleencoder3_code6b <= 6'd48;
		tx_singleencoder3_code6b_unbalanced <= 1'd1;
		tx_singleencoder3_code6b_flip <= 1'd1;
	end else begin
		tx_singleencoder3_code6b <= f_array_muxed12;
		tx_singleencoder3_code6b_unbalanced <= f_array_muxed13;
		tx_singleencoder3_code6b_flip <= f_array_muxed14;
	end
	tx_singleencoder3_code4b <= rhs_array_muxed6;
	tx_singleencoder3_code4b_unbalanced <= rhs_array_muxed7;
	if (tx_singleencoder3_k) begin
		tx_singleencoder3_code4b_flip <= 1'd1;
	end else begin
		tx_singleencoder3_code4b_flip <= f_array_muxed15;
	end
	tx_singleencoder3_alt7_rd0 <= 1'd0;
	tx_singleencoder3_alt7_rd1 <= 1'd0;
	if ((tx_singleencoder3_d[7:5] == 3'd7)) begin
		if ((((tx_singleencoder3_d[4:0] == 5'd17) | (tx_singleencoder3_d[4:0] == 5'd18)) | (tx_singleencoder3_d[4:0] == 5'd20))) begin
			tx_singleencoder3_alt7_rd0 <= 1'd1;
		end
		if ((((tx_singleencoder3_d[4:0] == 4'd11) | (tx_singleencoder3_d[4:0] == 4'd13)) | (tx_singleencoder3_d[4:0] == 4'd14))) begin
			tx_singleencoder3_alt7_rd1 <= 1'd1;
		end
		if (tx_singleencoder3_k) begin
			tx_singleencoder3_alt7_rd0 <= 1'd1;
			tx_singleencoder3_alt7_rd1 <= 1'd1;
		end
	end
	if (tx_crc_encoder_i_data_strobe) begin
		tx_crc_encoder_crc_cur <= tx_crc_encoder_crc_next;
	end
	if (tx_crc_encoder_reset) begin
		tx_crc_encoder_crc_cur <= 20'd1048575;
	end
	state <= next_state;
	if (tx_fsm_fifo_re_clockdomainsrenamer_next_value_ce0) begin
		tx_fsm_fifo_re <= tx_fsm_fifo_re_clockdomainsrenamer_next_value0;
	end
	if (tx_fsm_sop_clockdomainsrenamer_next_value_ce1) begin
		tx_fsm_sop <= tx_fsm_sop_clockdomainsrenamer_next_value1;
	end
	if (tx_fsm_idle_clockdomainsrenamer_next_value_ce2) begin
		tx_fsm_idle <= tx_fsm_idle_clockdomainsrenamer_next_value2;
	end
	if (tx_fsm_change_disp_clockdomainsrenamer_next_value_ce3) begin
		tx_fsm_change_disp <= tx_fsm_change_disp_clockdomainsrenamer_next_value3;
	end
	if (tx_fsm_counter_idle_clockdomainsrenamer_next_value_ce4) begin
		tx_fsm_counter_idle <= tx_fsm_counter_idle_clockdomainsrenamer_next_value4;
	end
	if (tx_fsm_encoder_ready_clockdomainsrenamer_next_value_ce5) begin
		tx_fsm_encoder_ready <= tx_fsm_encoder_ready_clockdomainsrenamer_next_value5;
	end
	if (tx_fsm_fifo_ready_clockdomainsrenamer_next_value_ce6) begin
		tx_fsm_fifo_ready <= tx_fsm_fifo_ready_clockdomainsrenamer_next_value6;
	end
	if (tx_fsm_strobe_crc_clockdomainsrenamer_next_value_ce7) begin
		tx_fsm_strobe_crc <= tx_fsm_strobe_crc_clockdomainsrenamer_next_value7;
	end
	if (tx_fsm_eop_clockdomainsrenamer_next_value_ce8) begin
		tx_fsm_eop <= tx_fsm_eop_clockdomainsrenamer_next_value8;
	end
	if (tx_fsm_reset_crc_clockdomainsrenamer_next_value_ce9) begin
		tx_fsm_reset_crc <= tx_fsm_reset_crc_clockdomainsrenamer_next_value9;
	end
	if (tx_fsm_reset1) begin
		tx_fsm_sop <= 1'd0;
		tx_fsm_eop <= 1'd0;
		tx_fsm_idle <= 1'd0;
		tx_fsm_fifo_ready <= 1'd0;
		tx_fsm_encoder_ready <= 1'd0;
		tx_fsm_change_disp <= 1'd0;
		tx_fsm_fifo_re <= 1'd0;
		tx_fsm_strobe_crc <= 1'd0;
		tx_fsm_reset_crc <= 1'd0;
		tx_fsm_counter_idle <= 2'd0;
		state <= 3'd0;
	end
	if (tx_rst) begin
		gtp_gtprxinit_gtrxreset0 <= 1'd0;
		gtp_gtprxinit_gtrxpd0 <= 1'd0;
		gtp_gtprxinit_rxdlysreset0 <= 1'd0;
		gtp_gtprxinit_rxphalign0 <= 1'd0;
		gtp_gtprxinit_rxdlyen0 <= 1'd0;
		gtp_gtprxinit_rxuserrdy0 <= 1'd0;
		gtp_gtprxinit_drpvalue <= 16'd0;
		gtp_gtprxinit_rxpmaresetdone_r <= 1'd0;
		gtp_gtprxinit_pll_reset_timer_count <= 6'd60;
		gtp_gtprxinit_ready_timer_count <= 19'd480000;
		gtp_gtprxinit_cdr_stable_timer_count <= 11'd1024;
		tx_d0 <= 8'd0;
		tx_d1 <= 8'd0;
		tx_d2 <= 8'd0;
		tx_d3 <= 8'd0;
		tx_k0 <= 1'd0;
		tx_k1 <= 1'd0;
		tx_k2 <= 1'd0;
		tx_k3 <= 1'd0;
		tx_output0 <= 10'd0;
		tx_output1 <= 10'd0;
		tx_output2 <= 10'd0;
		tx_output3 <= 10'd0;
		tx_disparity0 <= 1'd0;
		tx_disparity1 <= 1'd0;
		tx_disparity2 <= 1'd0;
		tx_disparity3 <= 1'd0;
		tx_singleencoder0_disp_in <= 1'd0;
		tx_singleencoder0_code6b <= 6'd0;
		tx_singleencoder0_code6b_unbalanced <= 1'd0;
		tx_singleencoder0_code6b_flip <= 1'd0;
		tx_singleencoder0_code4b <= 4'd0;
		tx_singleencoder0_code4b_unbalanced <= 1'd0;
		tx_singleencoder0_code4b_flip <= 1'd0;
		tx_singleencoder0_alt7_rd0 <= 1'd0;
		tx_singleencoder0_alt7_rd1 <= 1'd0;
		tx_singleencoder1_code6b <= 6'd0;
		tx_singleencoder1_code6b_unbalanced <= 1'd0;
		tx_singleencoder1_code6b_flip <= 1'd0;
		tx_singleencoder1_code4b <= 4'd0;
		tx_singleencoder1_code4b_unbalanced <= 1'd0;
		tx_singleencoder1_code4b_flip <= 1'd0;
		tx_singleencoder1_alt7_rd0 <= 1'd0;
		tx_singleencoder1_alt7_rd1 <= 1'd0;
		tx_singleencoder2_code6b <= 6'd0;
		tx_singleencoder2_code6b_unbalanced <= 1'd0;
		tx_singleencoder2_code6b_flip <= 1'd0;
		tx_singleencoder2_code4b <= 4'd0;
		tx_singleencoder2_code4b_unbalanced <= 1'd0;
		tx_singleencoder2_code4b_flip <= 1'd0;
		tx_singleencoder2_alt7_rd0 <= 1'd0;
		tx_singleencoder2_alt7_rd1 <= 1'd0;
		tx_singleencoder3_code6b <= 6'd0;
		tx_singleencoder3_code6b_unbalanced <= 1'd0;
		tx_singleencoder3_code6b_flip <= 1'd0;
		tx_singleencoder3_code4b <= 4'd0;
		tx_singleencoder3_code4b_unbalanced <= 1'd0;
		tx_singleencoder3_code4b_flip <= 1'd0;
		tx_singleencoder3_alt7_rd0 <= 1'd0;
		tx_singleencoder3_alt7_rd1 <= 1'd0;
		tx_crc_encoder_crc_cur <= 20'd1048575;
		tx_fsm_sop <= 1'd0;
		tx_fsm_eop <= 1'd0;
		tx_fsm_idle <= 1'd0;
		tx_fsm_fifo_ready <= 1'd0;
		tx_fsm_encoder_ready <= 1'd0;
		tx_fsm_change_disp <= 1'd0;
		tx_fsm_fifo_re <= 1'd0;
		tx_fsm_strobe_crc <= 1'd0;
		tx_fsm_reset_crc <= 1'd0;
		tx_fsm_counter_idle <= 2'd0;
		graycounter1_q <= 6'd0;
		graycounter1_q_binary <= 6'd0;
		clockdomainsrenamer_state <= 4'd0;
		state <= 3'd0;
	end
	xilinxmultiregimpl5_regs0 <= gtp_gtprxinit_rxpmaresetdone0;
	xilinxmultiregimpl5_regs1 <= xilinxmultiregimpl5_regs0;
	xilinxmultiregimpl6_regs0 <= gtp_gtprxinit_plllock0;
	xilinxmultiregimpl6_regs1 <= xilinxmultiregimpl6_regs0;
	xilinxmultiregimpl7_regs0 <= gtp_gtprxinit_rxresetdone0;
	xilinxmultiregimpl7_regs1 <= xilinxmultiregimpl7_regs0;
	xilinxmultiregimpl8_regs0 <= gtp_gtprxinit_rxdlysresetdone0;
	xilinxmultiregimpl8_regs1 <= xilinxmultiregimpl8_regs0;
	xilinxmultiregimpl9_regs0 <= gtp_gtprxinit_rxsyncdone0;
	xilinxmultiregimpl9_regs1 <= xilinxmultiregimpl9_regs0;
	xilinxmultiregimpl10_regs0 <= graycounter0_q;
	xilinxmultiregimpl10_regs1 <= xilinxmultiregimpl10_regs0;
end

always @(posedge write_clk) begin
	graycounter0_q_binary <= graycounter0_q_next_binary;
	graycounter0_q <= graycounter0_q_next;
	if (write_rst) begin
		graycounter0_q <= 6'd0;
		graycounter0_q_binary <= 6'd0;
	end
	xilinxmultiregimpl11_regs0 <= graycounter1_q;
	xilinxmultiregimpl11_regs1 <= xilinxmultiregimpl11_regs0;
end

IBUFGDS IBUFGDS(
	.I(write_clk_p),
	.IB(write_clk_n),
	.O(write_clk_bufg)
);

BUFG BUFG(
	.I(write_clk_bufg),
	.O(write_clk_1)
);

IBUFDS_GTE2 IBUFDS_GTE2(
	.CEB(1'd0),
	.I(gtp_clk_p),
	.IB(gtp_clk_n),
	.O(gtp_clk_bufg)
);

BUFG BUFG_1(
	.I(gtp_clk_bufg),
	.O(gtp_clk)
);

GTPE2_COMMON #(
	.PLL0_FBDIV(3'd5),
	.PLL0_FBDIV_45(3'd4),
	.PLL0_REFCLK_DIV(2'd2)
) GTPE2_COMMON (
	.BGBYPASSB(1'd1),
	.BGMONITORENB(1'd1),
	.BGPDB(1'd1),
	.BGRCALOVRD(5'd31),
	.GTREFCLK0(gtp_clk),
	.PLL0LOCKEN(1'd1),
	.PLL0PD(1'd0),
	.PLL0REFCLKSEL(1'd1),
	.PLL0RESET(qpll_reset),
	.PLL1PD(1'd1),
	.RCALENB(1'd1),
	.PLL0LOCK(qpll_lock),
	.PLL0OUTCLK(qpll_clk),
	.PLL0OUTREFCLK(qpll_refclk)
);

PLLE2_BASE #(
	.CLKFBOUT_MULT(3'd5),
	.CLKIN1_PERIOD(4.166667),
	.CLKOUT0_DIVIDE(3'd5),
	.CLKOUT0_PHASE(0.0),
	.CLKOUT1_DIVIDE(4'd10),
	.CLKOUT1_PHASE(0.0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_BASE (
	.CLKFBIN(gtp_pll_fb2),
	.CLKIN1(gtp_txoutclk1),
	.CLKFBOUT(gtp_pll_fb2),
	.CLKOUT0(gtp_txusrclk1),
	.CLKOUT1(gtp_txusrclk21),
	.LOCKED(gtp_pll_lock)
);

BUFG BUFG_2(
	.I(gtp_txoutclk0),
	.O(gtp_txoutclk1)
);

BUFG BUFG_3(
	.I(gtp_txusrclk21),
	.O(gtp_txusrclk20)
);

BUFG BUFG_4(
	.I(gtp_txusrclk1),
	.O(gtp_txusrclk0)
);

GTPE2_CHANNEL #(
	.CLK_CORRECT_USE("FALSE"),
	.PD_TRANS_TIME_FROM_P2(6'd60),
	.PD_TRANS_TIME_NONE_P2(6'd60),
	.PD_TRANS_TIME_TO_P2(7'd100),
	.PMA_RSV(10'd819),
	.PMA_RSV2(14'd8256),
	.PMA_RSV3(1'd0),
	.PMA_RSV4(1'd0),
	.RXBUF_EN("FALSE"),
	.RXCDR_CFG(65'd19022712657137635344),
	.RXDLY_CFG(5'd31),
	.RXDLY_LCFG(6'd48),
	.RXLPM_IPCM_CFG(1'd1),
	.RXOUT_DIV(1'd1),
	.RXPHDLY_CFG(20'd540704),
	.RXPH_CFG(24'd12582914),
	.RXPI_CFG1(1'd1),
	.RXPI_CFG2(1'd1),
	.RXPMARESET_TIME(2'd3),
	.RXSYNC_MULTILANE(1'd0),
	.RXSYNC_OVRD(1'd0),
	.RX_BIAS_CFG(12'd3891),
	.RX_CLK25_DIV(3'd5),
	.RX_CM_SEL(1'd1),
	.RX_CM_TRIM(4'd10),
	.RX_DATA_WIDTH(5'd20),
	.RX_OS_CFG(8'd128),
	.RX_XCLK_SEL("RXUSR"),
	.SIM_RESET_SPEEDUP("TRUE"),
	.TXBUF_EN("FALSE"),
	.TXOUT_DIV(1'd1),
	.TXSYNC_MULTILANE(1'd0),
	.TXSYNC_OVRD(1'd1),
	.TXSYNC_SKIP_DA(1'd0),
	.TX_CLK25_DIV(3'd5),
	.TX_DATA_WIDTH(6'd40),
	.TX_XCLK_SEL("TXUSR")
) GTPE2_CHANNEL (
	.DRPADDR(gtp_drpaddr),
	.DRPCLK(tx_clk),
	.DRPDI(gtp_drpdi),
	.DRPEN(gtp_drpen),
	.DRPWE(gtp_drpwe),
	.EYESCANRESET(1'd0),
	.GTPRXN(gtp_rx_n),
	.GTPRXP(gtp_rx_p),
	.GTRESETSEL(1'd0),
	.GTRXRESET(gtp_gtprxinit_gtrxreset0),
	.GTTXRESET(gtp_tx_init_gttxreset0),
	.LOOPBACK(gtp_loopback),
	.PLL0CLK(qpll_clk),
	.PLL0REFCLK(qpll_refclk),
	.RESETOVRD(1'd0),
	.RXBUFRESET(1'd0),
	.RXCDRFREQRESET(1'd0),
	.RXCDRRESET(1'd0),
	.RXCOMMADETEN(1'd1),
	.RXDDIEN(1'd1),
	.RXDLYBYPASS(1'd0),
	.RXDLYSRESET(gtp_gtprxinit_rxdlysreset0),
	.RXELECIDLEMODE(2'd3),
	.RXLPMRESET(1'd0),
	.RXOOBRESET(1'd0),
	.RXOSINTCFG(2'd2),
	.RXOSINTEN(1'd1),
	.RXOUTCLKSEL(2'd2),
	.RXPCSRESET(1'd0),
	.RXPD({gtp_gtprxinit_gtrxpd0, gtp_gtprxinit_gtrxpd0}),
	.RXPMARESET(1'd0),
	.RXPOLARITY(gtp_rx_polarity),
	.RXRATE(1'd0),
	.RXSYNCALLIN(gtp_rxphaligndone),
	.RXSYNCIN(1'd0),
	.RXSYNCMODE(1'd1),
	.RXSYSCLKSEL(1'd0),
	.RXUSERRDY(gtp_gtprxinit_rxuserrdy0),
	.RXUSRCLK(rx_clk),
	.RXUSRCLK2(rx_clk),
	.TX8B10BEN(1'd0),
	.TXBUFDIFFCTRL(3'd4),
	.TXCHARDISPMODE({gtp_tx_data[39], gtp_tx_data[29], gtp_tx_data[19], gtp_tx_data[9]}),
	.TXCHARDISPVAL({gtp_tx_data[38], gtp_tx_data[28], gtp_tx_data[18], gtp_tx_data[8]}),
	.TXDATA({gtp_tx_data[37:30], gtp_tx_data[27:20], gtp_tx_data[17:10], gtp_tx_data[7:0]}),
	.TXDIFFCTRL(gtp_diffctrl),
	.TXDLYBYPASS(1'd0),
	.TXDLYEN(gtp_tx_init_txdlyen0),
	.TXDLYSRESET(gtp_tx_init_txdlysreset0),
	.TXELECIDLE(1'd0),
	.TXINHIBIT(1'd0),
	.TXOUTCLKSEL(2'd3),
	.TXPCSRESET(1'd0),
	.TXPHALIGN(gtp_tx_init_txphalign0),
	.TXPHALIGNEN(1'd1),
	.TXPHDLYRESET(1'd0),
	.TXPHINIT(gtp_tx_init_txphinit0),
	.TXPMARESET(1'd0),
	.TXPOLARITY(gtp_tx_polarity),
	.TXPOSTCURSOR(gtp_txpostcursor),
	.TXPRECURSOR(gtp_txprecursor),
	.TXRATE(1'd0),
	.TXSYNCALLIN(1'd0),
	.TXSYNCIN(1'd0),
	.TXSYNCMODE(1'd0),
	.TXSYSCLKSEL(1'd0),
	.TXUSERRDY(gtp_tx_init_txuserrdy0),
	.TXUSRCLK(gtp_txusrclk0),
	.TXUSRCLK2(gtp_txusrclk20),
	.DRPDO(gtp_drpdo),
	.DRPRDY(gtp_drprdy),
	.GTPTXN(gtp_tx_n),
	.GTPTXP(gtp_tx_p),
	.RXDLYSRESETDONE(gtp_gtprxinit_rxdlysresetdone0),
	.RXOUTCLK(gtp_rxoutclk),
	.RXPHALIGNDONE(gtp_rxphaligndone),
	.RXPMARESETDONE(gtp_gtprxinit_rxpmaresetdone0),
	.RXRESETDONE(gtp_gtprxinit_rxresetdone0),
	.RXSYNCDONE(gtp_gtprxinit_rxsyncdone0),
	.TXDLYSRESETDONE(gtp_tx_init_txdlysresetdone0),
	.TXOUTCLK(gtp_txoutclk0),
	.TXPHALIGNDONE(gtp_tx_init_txphaligndone0),
	.TXPHINITDONE(gtp_tx_init_txphinitdone0),
	.TXRESETDONE(gtp_tx_init_txresetdone0)
);

BUFG BUFG_5(
	.I(gtp_txusrclk20),
	.O(tx_clk)
);

BUFG BUFG_6(
	.I(gtp_rxoutclk),
	.O(rx_clk)
);

reg [31:0] storage[0:31];
reg [4:0] memadr;
reg [4:0] memadr_1;
always @(posedge write_clk) begin
	if (wrport_we)
		storage[wrport_adr] <= wrport_dat_w;
	memadr <= wrport_adr;
end

always @(posedge tx_clk) begin
	memadr_1 <= rdport_adr;
end

assign wrport_dat_r = storage[memadr];
assign rdport_dat_r = storage[memadr_1];

reg [1:0] storaget[0:31];
reg [4:0] memadr_2;
reg [4:0] memadr_3;
always @(posedge write_clk) begin
	if (wrport1_we)
		storaget[wrport1_adr] <= wrport1_dat_w;
	memadr_2 <= wrport1_adr;
end

always @(posedge tx_clk) begin
	memadr_3 <= rdport1_adr;
end

assign wrport1_dat_r = storaget[memadr_2];
assign rdport1_dat_r = storaget[memadr_3];

endmodule
